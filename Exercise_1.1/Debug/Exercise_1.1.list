
Exercise_1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015c8  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001774  08001774  00002774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800178c  0800178c  00003018  2**0
                  CONTENTS
  4 .ARM          00000008  0800178c  0800178c  0000278c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001794  08001794  00003018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001794  08001794  00002794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001798  08001798  00002798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  0800179c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003018  2**0
                  CONTENTS
 10 .bss          00000020  20000018  20000018  00003018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000038  20000038  00003018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003ed8  00000000  00000000  00003048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001086  00000000  00000000  00006f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000460  00000000  00000000  00007fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000322  00000000  00000000  00008408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000226b6  00000000  00000000  0000872a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000054c2  00000000  00000000  0002ade0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf56a  00000000  00000000  000302a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ff80c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000fa4  00000000  00000000  000ff850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000ab  00000000  00000000  001007f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800175c 	.word	0x0800175c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	0800175c 	.word	0x0800175c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/* Function Prototypes -------------------------------------------------------*/
void SystemClock_Config(void);  // Configuración del reloj del sistema

/* Main Program --------------------------------------------------------------*/
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0

  HAL_Init(); // Inicializa la biblioteca HAL (Hardware Abstraction Layer)
 80004e0:	f000 f9aa 	bl	8000838 <HAL_Init>
  SystemClock_Config(); // Configura el reloj del sistema
 80004e4:	f000 f82a 	bl	800053c <SystemClock_Config>

  /* Initialize BSP Led for LED1, 2 & 3 */
  BSP_LED_Init(LED1);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 f921 	bl	8000730 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 80004ee:	2001      	movs	r0, #1
 80004f0:	f000 f91e 	bl	8000730 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 80004f4:	2002      	movs	r0, #2
 80004f6:	f000 f91b 	bl	8000730 <BSP_LED_Init>

  /* Infinite loop */
  while (1)
  {

	BSP_LED_On(LED1);
 80004fa:	2000      	movs	r0, #0
 80004fc:	f000 f968 	bl	80007d0 <BSP_LED_On>
	HAL_Delay(200);
 8000500:	20c8      	movs	r0, #200	@ 0xc8
 8000502:	f000 fa0b 	bl	800091c <HAL_Delay>
	BSP_LED_Off(LED1);
 8000506:	2000      	movs	r0, #0
 8000508:	f000 f97c 	bl	8000804 <BSP_LED_Off>

	BSP_LED_On(LED2);
 800050c:	2001      	movs	r0, #1
 800050e:	f000 f95f 	bl	80007d0 <BSP_LED_On>
	HAL_Delay(200);
 8000512:	20c8      	movs	r0, #200	@ 0xc8
 8000514:	f000 fa02 	bl	800091c <HAL_Delay>
	BSP_LED_Off(LED2);
 8000518:	2001      	movs	r0, #1
 800051a:	f000 f973 	bl	8000804 <BSP_LED_Off>

	BSP_LED_On(LED3);
 800051e:	2002      	movs	r0, #2
 8000520:	f000 f956 	bl	80007d0 <BSP_LED_On>
	HAL_Delay(200);
 8000524:	20c8      	movs	r0, #200	@ 0xc8
 8000526:	f000 f9f9 	bl	800091c <HAL_Delay>
	BSP_LED_Off(LED3);
 800052a:	2002      	movs	r0, #2
 800052c:	f000 f96a 	bl	8000804 <BSP_LED_Off>

	HAL_Delay(200);
 8000530:	20c8      	movs	r0, #200	@ 0xc8
 8000532:	f000 f9f3 	bl	800091c <HAL_Delay>
	BSP_LED_On(LED1);
 8000536:	bf00      	nop
 8000538:	e7df      	b.n	80004fa <main+0x1e>
	...

0800053c <SystemClock_Config>:
  }
}

/* Configuración del Reloj del Sistema ---------------------------------------*/
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	@ 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0}; // Estructura para la configuración de los osciladores
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	@ 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f001 f8da 	bl	8001704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0}; // Estructura para la configuración de los relojes
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE(); // Habilita el reloj para el controlador de energía
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b23      	ldr	r3, [pc, #140]	@ (80005f4 <SystemClock_Config+0xb8>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000568:	4a22      	ldr	r2, [pc, #136]	@ (80005f4 <SystemClock_Config+0xb8>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000570:	4b20      	ldr	r3, [pc, #128]	@ (80005f4 <SystemClock_Config+0xb8>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3); // Configura el regulador de voltaje
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b1d      	ldr	r3, [pc, #116]	@ (80005f8 <SystemClock_Config+0xbc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000588:	4a1b      	ldr	r2, [pc, #108]	@ (80005f8 <SystemClock_Config+0xbc>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b19      	ldr	r3, [pc, #100]	@ (80005f8 <SystemClock_Config+0xbc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI; // Usa el oscilador interno de alta velocidad (HSI)
 800059c:	2302      	movs	r3, #2
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON; // Enciende el HSI
 80005a0:	2301      	movs	r3, #1
 80005a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT; // Usa el valor de calibración predeterminado
 80005a4:	2310      	movs	r3, #16
 80005a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE; // No usa el PLL
 80005a8:	2300      	movs	r3, #0
 80005aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fc83 	bl	8000ebc <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x84>
  {
    Error_Handler(); // Manejo de errores en la configuración del oscilador
 80005bc:	f000 f81e 	bl	80005fc <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80005c0:	230f      	movs	r3, #15
 80005c2:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2; // Configura los tipos de reloj
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI; // Usa HSI como fuente de reloj del sistema
 80005c4:	2300      	movs	r3, #0
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1; // Configura el divisor del reloj AHB
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1; // Configura el divisor del reloj APB1
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1; // Configura el divisor del reloj APB2
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fee6 	bl	80013ac <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xae>
  {
    Error_Handler(); // Manejo de errores en la configuración del reloj
 80005e6:	f000 f809 	bl	80005fc <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	@ 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <Error_Handler>:



/* Manejo de Errores ---------------------------------------------------------*/
void Error_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000600:	b672      	cpsid	i
}
 8000602:	bf00      	nop
  __disable_irq(); // Desactiva todas las interrupciones
  while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <Error_Handler+0x8>

08000608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	4b10      	ldr	r3, [pc, #64]	@ (8000654 <HAL_MspInit+0x4c>)
 8000614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000616:	4a0f      	ldr	r2, [pc, #60]	@ (8000654 <HAL_MspInit+0x4c>)
 8000618:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800061c:	6453      	str	r3, [r2, #68]	@ 0x44
 800061e:	4b0d      	ldr	r3, [pc, #52]	@ (8000654 <HAL_MspInit+0x4c>)
 8000620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000622:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <HAL_MspInit+0x4c>)
 8000630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000632:	4a08      	ldr	r2, [pc, #32]	@ (8000654 <HAL_MspInit+0x4c>)
 8000634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000638:	6413      	str	r3, [r2, #64]	@ 0x40
 800063a:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <HAL_MspInit+0x4c>)
 800063c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800

08000658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <NMI_Handler+0x4>

08000660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <HardFault_Handler+0x4>

08000668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <MemManage_Handler+0x4>

08000670 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <BusFault_Handler+0x4>

08000678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <UsageFault_Handler+0x4>

08000680 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ae:	f000 f915 	bl	80008dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006bc:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <SystemInit+0x20>)
 80006be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006c2:	4a05      	ldr	r2, [pc, #20]	@ (80006d8 <SystemInit+0x20>)
 80006c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80006dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000714 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80006e0:	f7ff ffea 	bl	80006b8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006e4:	480c      	ldr	r0, [pc, #48]	@ (8000718 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006e6:	490d      	ldr	r1, [pc, #52]	@ (800071c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000720 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ec:	e002      	b.n	80006f4 <LoopCopyDataInit>

080006ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f2:	3304      	adds	r3, #4

080006f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f8:	d3f9      	bcc.n	80006ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000724 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000728 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000700:	e001      	b.n	8000706 <LoopFillZerobss>

08000702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000704:	3204      	adds	r2, #4

08000706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000708:	d3fb      	bcc.n	8000702 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800070a:	f001 f803 	bl	8001714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800070e:	f7ff fee5 	bl	80004dc <main>
  bx  lr    
 8000712:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000714:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800071c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000720:	0800179c 	.word	0x0800179c
  ldr r2, =_sbss
 8000724:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000728:	20000038 	.word	0x20000038

0800072c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800072c:	e7fe      	b.n	800072c <ADC_IRQHandler>
	...

08000730 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	@ 0x28
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d10e      	bne.n	800075e <BSP_LED_Init+0x2e>
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <BSP_LED_Init+0x94>)
 8000746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000748:	4a1e      	ldr	r2, [pc, #120]	@ (80007c4 <BSP_LED_Init+0x94>)
 800074a:	f043 0302 	orr.w	r3, r3, #2
 800074e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000750:	4b1c      	ldr	r3, [pc, #112]	@ (80007c4 <BSP_LED_Init+0x94>)
 8000752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000754:	f003 0302 	and.w	r3, r3, #2
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	693b      	ldr	r3, [r7, #16]
 800075c:	e00d      	b.n	800077a <BSP_LED_Init+0x4a>
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <BSP_LED_Init+0x94>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a17      	ldr	r2, [pc, #92]	@ (80007c4 <BSP_LED_Init+0x94>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <BSP_LED_Init+0x94>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	4a12      	ldr	r2, [pc, #72]	@ (80007c8 <BSP_LED_Init+0x98>)
 800077e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800078c:	2302      	movs	r3, #2
 800078e:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4a0e      	ldr	r2, [pc, #56]	@ (80007cc <BSP_LED_Init+0x9c>)
 8000794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000798:	f107 0214 	add.w	r2, r7, #20
 800079c:	4611      	mov	r1, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f9c6 	bl	8000b30 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	4a09      	ldr	r2, [pc, #36]	@ (80007cc <BSP_LED_Init+0x9c>)
 80007a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	4a06      	ldr	r2, [pc, #24]	@ (80007c8 <BSP_LED_Init+0x98>)
 80007b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007b4:	2200      	movs	r2, #0
 80007b6:	4619      	mov	r1, r3
 80007b8:	f000 fb66 	bl	8000e88 <HAL_GPIO_WritePin>
}
 80007bc:	bf00      	nop
 80007be:	3728      	adds	r7, #40	@ 0x28
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40023800 	.word	0x40023800
 80007c8:	08001784 	.word	0x08001784
 80007cc:	20000004 	.word	0x20000004

080007d0 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	4a07      	ldr	r2, [pc, #28]	@ (80007fc <BSP_LED_On+0x2c>)
 80007de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	4a06      	ldr	r2, [pc, #24]	@ (8000800 <BSP_LED_On+0x30>)
 80007e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007ea:	2201      	movs	r2, #1
 80007ec:	4619      	mov	r1, r3
 80007ee:	f000 fb4b 	bl	8000e88 <HAL_GPIO_WritePin>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000004 	.word	0x20000004
 8000800:	08001784 	.word	0x08001784

08000804 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	4a07      	ldr	r2, [pc, #28]	@ (8000830 <BSP_LED_Off+0x2c>)
 8000812:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	4a06      	ldr	r2, [pc, #24]	@ (8000834 <BSP_LED_Off+0x30>)
 800081a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800081e:	2200      	movs	r2, #0
 8000820:	4619      	mov	r1, r3
 8000822:	f000 fb31 	bl	8000e88 <HAL_GPIO_WritePin>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000004 	.word	0x20000004
 8000834:	08001784 	.word	0x08001784

08000838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800083c:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <HAL_Init+0x40>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a0d      	ldr	r2, [pc, #52]	@ (8000878 <HAL_Init+0x40>)
 8000842:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000846:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000848:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <HAL_Init+0x40>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a0a      	ldr	r2, [pc, #40]	@ (8000878 <HAL_Init+0x40>)
 800084e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000852:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000854:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <HAL_Init+0x40>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a07      	ldr	r2, [pc, #28]	@ (8000878 <HAL_Init+0x40>)
 800085a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800085e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000860:	2003      	movs	r0, #3
 8000862:	f000 f931 	bl	8000ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000866:	200f      	movs	r0, #15
 8000868:	f000 f808 	bl	800087c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800086c:	f7ff fecc 	bl	8000608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023c00 	.word	0x40023c00

0800087c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <HAL_InitTick+0x54>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <HAL_InitTick+0x58>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	4619      	mov	r1, r3
 800088e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000892:	fbb3 f3f1 	udiv	r3, r3, r1
 8000896:	fbb2 f3f3 	udiv	r3, r2, r3
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f93b 	bl	8000b16 <HAL_SYSTICK_Config>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	e00e      	b.n	80008c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	d80a      	bhi.n	80008c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b0:	2200      	movs	r2, #0
 80008b2:	6879      	ldr	r1, [r7, #4]
 80008b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008b8:	f000 f911 	bl	8000ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008bc:	4a06      	ldr	r2, [pc, #24]	@ (80008d8 <HAL_InitTick+0x5c>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008c2:	2300      	movs	r3, #0
 80008c4:	e000      	b.n	80008c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000000 	.word	0x20000000
 80008d4:	20000014 	.word	0x20000014
 80008d8:	20000010 	.word	0x20000010

080008dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <HAL_IncTick+0x20>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <HAL_IncTick+0x24>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4413      	add	r3, r2
 80008ec:	4a04      	ldr	r2, [pc, #16]	@ (8000900 <HAL_IncTick+0x24>)
 80008ee:	6013      	str	r3, [r2, #0]
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20000014 	.word	0x20000014
 8000900:	20000034 	.word	0x20000034

08000904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return uwTick;
 8000908:	4b03      	ldr	r3, [pc, #12]	@ (8000918 <HAL_GetTick+0x14>)
 800090a:	681b      	ldr	r3, [r3, #0]
}
 800090c:	4618      	mov	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	20000034 	.word	0x20000034

0800091c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000924:	f7ff ffee 	bl	8000904 <HAL_GetTick>
 8000928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000934:	d005      	beq.n	8000942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000936:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <HAL_Delay+0x44>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4413      	add	r3, r2
 8000940:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000942:	bf00      	nop
 8000944:	f7ff ffde 	bl	8000904 <HAL_GetTick>
 8000948:	4602      	mov	r2, r0
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	429a      	cmp	r2, r3
 8000952:	d8f7      	bhi.n	8000944 <HAL_Delay+0x28>
  {
  }
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000014 	.word	0x20000014

08000964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800098c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000996:	4a04      	ldr	r2, [pc, #16]	@ (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	60d3      	str	r3, [r2, #12]
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b0:	4b04      	ldr	r3, [pc, #16]	@ (80009c4 <__NVIC_GetPriorityGrouping+0x18>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	f003 0307 	and.w	r3, r3, #7
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	6039      	str	r1, [r7, #0]
 80009d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	db0a      	blt.n	80009f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	490c      	ldr	r1, [pc, #48]	@ (8000a14 <__NVIC_SetPriority+0x4c>)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	0112      	lsls	r2, r2, #4
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	440b      	add	r3, r1
 80009ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f0:	e00a      	b.n	8000a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4908      	ldr	r1, [pc, #32]	@ (8000a18 <__NVIC_SetPriority+0x50>)
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	f003 030f 	and.w	r3, r3, #15
 80009fe:	3b04      	subs	r3, #4
 8000a00:	0112      	lsls	r2, r2, #4
 8000a02:	b2d2      	uxtb	r2, r2
 8000a04:	440b      	add	r3, r1
 8000a06:	761a      	strb	r2, [r3, #24]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000e100 	.word	0xe000e100
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b089      	sub	sp, #36	@ 0x24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	f1c3 0307 	rsb	r3, r3, #7
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	bf28      	it	cs
 8000a3a:	2304      	movcs	r3, #4
 8000a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3304      	adds	r3, #4
 8000a42:	2b06      	cmp	r3, #6
 8000a44:	d902      	bls.n	8000a4c <NVIC_EncodePriority+0x30>
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	3b03      	subs	r3, #3
 8000a4a:	e000      	b.n	8000a4e <NVIC_EncodePriority+0x32>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43da      	mvns	r2, r3
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	401a      	ands	r2, r3
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6e:	43d9      	mvns	r1, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	4313      	orrs	r3, r2
         );
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3724      	adds	r7, #36	@ 0x24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
	...

08000a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a94:	d301      	bcc.n	8000a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00f      	b.n	8000aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac4 <SysTick_Config+0x40>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa2:	210f      	movs	r1, #15
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000aa8:	f7ff ff8e 	bl	80009c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aac:	4b05      	ldr	r3, [pc, #20]	@ (8000ac4 <SysTick_Config+0x40>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab2:	4b04      	ldr	r3, [pc, #16]	@ (8000ac4 <SysTick_Config+0x40>)
 8000ab4:	2207      	movs	r2, #7
 8000ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	e000e010 	.word	0xe000e010

08000ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ff47 	bl	8000964 <__NVIC_SetPriorityGrouping>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b086      	sub	sp, #24
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
 8000aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af0:	f7ff ff5c 	bl	80009ac <__NVIC_GetPriorityGrouping>
 8000af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	68b9      	ldr	r1, [r7, #8]
 8000afa:	6978      	ldr	r0, [r7, #20]
 8000afc:	f7ff ff8e 	bl	8000a1c <NVIC_EncodePriority>
 8000b00:	4602      	mov	r2, r0
 8000b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff5d 	bl	80009c8 <__NVIC_SetPriority>
}
 8000b0e:	bf00      	nop
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff ffb0 	bl	8000a84 <SysTick_Config>
 8000b24:	4603      	mov	r3, r0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	@ 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
 8000b4a:	e177      	b.n	8000e3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	697a      	ldr	r2, [r7, #20]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	f040 8166 	bne.w	8000e36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 0303 	and.w	r3, r3, #3
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d005      	beq.n	8000b82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d130      	bne.n	8000be4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43db      	mvns	r3, r3
 8000b94:	69ba      	ldr	r2, [r7, #24]
 8000b96:	4013      	ands	r3, r2
 8000b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	68da      	ldr	r2, [r3, #12]
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	69ba      	ldr	r2, [r7, #24]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	69ba      	ldr	r2, [r7, #24]
 8000bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bb8:	2201      	movs	r2, #1
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	091b      	lsrs	r3, r3, #4
 8000bce:	f003 0201 	and.w	r2, r3, #1
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	d017      	beq.n	8000c20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	4013      	ands	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	689a      	ldr	r2, [r3, #8]
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f003 0303 	and.w	r3, r3, #3
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d123      	bne.n	8000c74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	08da      	lsrs	r2, r3, #3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3208      	adds	r2, #8
 8000c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	f003 0307 	and.w	r3, r3, #7
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	220f      	movs	r2, #15
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	691a      	ldr	r2, [r3, #16]
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	08da      	lsrs	r2, r3, #3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3208      	adds	r2, #8
 8000c6e:	69b9      	ldr	r1, [r7, #24]
 8000c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	2203      	movs	r2, #3
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 0203 	and.w	r2, r3, #3
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	f000 80c0 	beq.w	8000e36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b66      	ldr	r3, [pc, #408]	@ (8000e54 <HAL_GPIO_Init+0x324>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cbe:	4a65      	ldr	r2, [pc, #404]	@ (8000e54 <HAL_GPIO_Init+0x324>)
 8000cc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cc6:	4b63      	ldr	r3, [pc, #396]	@ (8000e54 <HAL_GPIO_Init+0x324>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cd2:	4a61      	ldr	r2, [pc, #388]	@ (8000e58 <HAL_GPIO_Init+0x328>)
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	089b      	lsrs	r3, r3, #2
 8000cd8:	3302      	adds	r3, #2
 8000cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f003 0303 	and.w	r3, r3, #3
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	220f      	movs	r2, #15
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a58      	ldr	r2, [pc, #352]	@ (8000e5c <HAL_GPIO_Init+0x32c>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d037      	beq.n	8000d6e <HAL_GPIO_Init+0x23e>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a57      	ldr	r2, [pc, #348]	@ (8000e60 <HAL_GPIO_Init+0x330>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d031      	beq.n	8000d6a <HAL_GPIO_Init+0x23a>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a56      	ldr	r2, [pc, #344]	@ (8000e64 <HAL_GPIO_Init+0x334>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d02b      	beq.n	8000d66 <HAL_GPIO_Init+0x236>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a55      	ldr	r2, [pc, #340]	@ (8000e68 <HAL_GPIO_Init+0x338>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d025      	beq.n	8000d62 <HAL_GPIO_Init+0x232>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a54      	ldr	r2, [pc, #336]	@ (8000e6c <HAL_GPIO_Init+0x33c>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d01f      	beq.n	8000d5e <HAL_GPIO_Init+0x22e>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a53      	ldr	r2, [pc, #332]	@ (8000e70 <HAL_GPIO_Init+0x340>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d019      	beq.n	8000d5a <HAL_GPIO_Init+0x22a>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a52      	ldr	r2, [pc, #328]	@ (8000e74 <HAL_GPIO_Init+0x344>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d013      	beq.n	8000d56 <HAL_GPIO_Init+0x226>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a51      	ldr	r2, [pc, #324]	@ (8000e78 <HAL_GPIO_Init+0x348>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d00d      	beq.n	8000d52 <HAL_GPIO_Init+0x222>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a50      	ldr	r2, [pc, #320]	@ (8000e7c <HAL_GPIO_Init+0x34c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d007      	beq.n	8000d4e <HAL_GPIO_Init+0x21e>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a4f      	ldr	r2, [pc, #316]	@ (8000e80 <HAL_GPIO_Init+0x350>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d101      	bne.n	8000d4a <HAL_GPIO_Init+0x21a>
 8000d46:	2309      	movs	r3, #9
 8000d48:	e012      	b.n	8000d70 <HAL_GPIO_Init+0x240>
 8000d4a:	230a      	movs	r3, #10
 8000d4c:	e010      	b.n	8000d70 <HAL_GPIO_Init+0x240>
 8000d4e:	2308      	movs	r3, #8
 8000d50:	e00e      	b.n	8000d70 <HAL_GPIO_Init+0x240>
 8000d52:	2307      	movs	r3, #7
 8000d54:	e00c      	b.n	8000d70 <HAL_GPIO_Init+0x240>
 8000d56:	2306      	movs	r3, #6
 8000d58:	e00a      	b.n	8000d70 <HAL_GPIO_Init+0x240>
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	e008      	b.n	8000d70 <HAL_GPIO_Init+0x240>
 8000d5e:	2304      	movs	r3, #4
 8000d60:	e006      	b.n	8000d70 <HAL_GPIO_Init+0x240>
 8000d62:	2303      	movs	r3, #3
 8000d64:	e004      	b.n	8000d70 <HAL_GPIO_Init+0x240>
 8000d66:	2302      	movs	r3, #2
 8000d68:	e002      	b.n	8000d70 <HAL_GPIO_Init+0x240>
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e000      	b.n	8000d70 <HAL_GPIO_Init+0x240>
 8000d6e:	2300      	movs	r3, #0
 8000d70:	69fa      	ldr	r2, [r7, #28]
 8000d72:	f002 0203 	and.w	r2, r2, #3
 8000d76:	0092      	lsls	r2, r2, #2
 8000d78:	4093      	lsls	r3, r2
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d80:	4935      	ldr	r1, [pc, #212]	@ (8000e58 <HAL_GPIO_Init+0x328>)
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	089b      	lsrs	r3, r3, #2
 8000d86:	3302      	adds	r3, #2
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d8e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e84 <HAL_GPIO_Init+0x354>)
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	43db      	mvns	r3, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d003      	beq.n	8000db2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000db2:	4a34      	ldr	r2, [pc, #208]	@ (8000e84 <HAL_GPIO_Init+0x354>)
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000db8:	4b32      	ldr	r3, [pc, #200]	@ (8000e84 <HAL_GPIO_Init+0x354>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ddc:	4a29      	ldr	r2, [pc, #164]	@ (8000e84 <HAL_GPIO_Init+0x354>)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000de2:	4b28      	ldr	r3, [pc, #160]	@ (8000e84 <HAL_GPIO_Init+0x354>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e06:	4a1f      	ldr	r2, [pc, #124]	@ (8000e84 <HAL_GPIO_Init+0x354>)
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e84 <HAL_GPIO_Init+0x354>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d003      	beq.n	8000e30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e30:	4a14      	ldr	r2, [pc, #80]	@ (8000e84 <HAL_GPIO_Init+0x354>)
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	61fb      	str	r3, [r7, #28]
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	2b0f      	cmp	r3, #15
 8000e40:	f67f ae84 	bls.w	8000b4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3724      	adds	r7, #36	@ 0x24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40013800 	.word	0x40013800
 8000e5c:	40020000 	.word	0x40020000
 8000e60:	40020400 	.word	0x40020400
 8000e64:	40020800 	.word	0x40020800
 8000e68:	40020c00 	.word	0x40020c00
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40021400 	.word	0x40021400
 8000e74:	40021800 	.word	0x40021800
 8000e78:	40021c00 	.word	0x40021c00
 8000e7c:	40022000 	.word	0x40022000
 8000e80:	40022400 	.word	0x40022400
 8000e84:	40013c00 	.word	0x40013c00

08000e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	807b      	strh	r3, [r7, #2]
 8000e94:	4613      	mov	r3, r2
 8000e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e98:	787b      	ldrb	r3, [r7, #1]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e9e:	887a      	ldrh	r2, [r7, #2]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ea4:	e003      	b.n	8000eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ea6:	887b      	ldrh	r3, [r7, #2]
 8000ea8:	041a      	lsls	r2, r3, #16
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	619a      	str	r2, [r3, #24]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e267      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d075      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000eda:	4b88      	ldr	r3, [pc, #544]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 030c 	and.w	r3, r3, #12
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	d00c      	beq.n	8000f00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ee6:	4b85      	ldr	r3, [pc, #532]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000eee:	2b08      	cmp	r3, #8
 8000ef0:	d112      	bne.n	8000f18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ef2:	4b82      	ldr	r3, [pc, #520]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000efa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000efe:	d10b      	bne.n	8000f18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f00:	4b7e      	ldr	r3, [pc, #504]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d05b      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x108>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d157      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e242      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f20:	d106      	bne.n	8000f30 <HAL_RCC_OscConfig+0x74>
 8000f22:	4b76      	ldr	r3, [pc, #472]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a75      	ldr	r2, [pc, #468]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	e01d      	b.n	8000f6c <HAL_RCC_OscConfig+0xb0>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f38:	d10c      	bne.n	8000f54 <HAL_RCC_OscConfig+0x98>
 8000f3a:	4b70      	ldr	r3, [pc, #448]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a6f      	ldr	r2, [pc, #444]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	4b6d      	ldr	r3, [pc, #436]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a6c      	ldr	r2, [pc, #432]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	e00b      	b.n	8000f6c <HAL_RCC_OscConfig+0xb0>
 8000f54:	4b69      	ldr	r3, [pc, #420]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a68      	ldr	r2, [pc, #416]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b66      	ldr	r3, [pc, #408]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a65      	ldr	r2, [pc, #404]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d013      	beq.n	8000f9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fcc6 	bl	8000904 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fcc2 	bl	8000904 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b64      	cmp	r3, #100	@ 0x64
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e207      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8e:	4b5b      	ldr	r3, [pc, #364]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f0      	beq.n	8000f7c <HAL_RCC_OscConfig+0xc0>
 8000f9a:	e014      	b.n	8000fc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fcb2 	bl	8000904 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa4:	f7ff fcae 	bl	8000904 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b64      	cmp	r3, #100	@ 0x64
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e1f3      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb6:	4b51      	ldr	r3, [pc, #324]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f0      	bne.n	8000fa4 <HAL_RCC_OscConfig+0xe8>
 8000fc2:	e000      	b.n	8000fc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d063      	beq.n	800109a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fd2:	4b4a      	ldr	r3, [pc, #296]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f003 030c 	and.w	r3, r3, #12
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00b      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fde:	4b47      	ldr	r3, [pc, #284]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d11c      	bne.n	8001024 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fea:	4b44      	ldr	r3, [pc, #272]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d116      	bne.n	8001024 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff6:	4b41      	ldr	r3, [pc, #260]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d005      	beq.n	800100e <HAL_RCC_OscConfig+0x152>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d001      	beq.n	800100e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e1c7      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100e:	4b3b      	ldr	r3, [pc, #236]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	4937      	ldr	r1, [pc, #220]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 800101e:	4313      	orrs	r3, r2
 8001020:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001022:	e03a      	b.n	800109a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d020      	beq.n	800106e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800102c:	4b34      	ldr	r3, [pc, #208]	@ (8001100 <HAL_RCC_OscConfig+0x244>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001032:	f7ff fc67 	bl	8000904 <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800103a:	f7ff fc63 	bl	8000904 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e1a8      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104c:	4b2b      	ldr	r3, [pc, #172]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f0      	beq.n	800103a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001058:	4b28      	ldr	r3, [pc, #160]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	4925      	ldr	r1, [pc, #148]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8001068:	4313      	orrs	r3, r2
 800106a:	600b      	str	r3, [r1, #0]
 800106c:	e015      	b.n	800109a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800106e:	4b24      	ldr	r3, [pc, #144]	@ (8001100 <HAL_RCC_OscConfig+0x244>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001074:	f7ff fc46 	bl	8000904 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800107c:	f7ff fc42 	bl	8000904 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e187      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800108e:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f0      	bne.n	800107c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0308 	and.w	r3, r3, #8
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d036      	beq.n	8001114 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d016      	beq.n	80010dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ae:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <HAL_RCC_OscConfig+0x248>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010b4:	f7ff fc26 	bl	8000904 <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010bc:	f7ff fc22 	bl	8000904 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e167      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ce:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 80010d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f0      	beq.n	80010bc <HAL_RCC_OscConfig+0x200>
 80010da:	e01b      	b.n	8001114 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010dc:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <HAL_RCC_OscConfig+0x248>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e2:	f7ff fc0f 	bl	8000904 <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e8:	e00e      	b.n	8001108 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010ea:	f7ff fc0b 	bl	8000904 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d907      	bls.n	8001108 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e150      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
 80010fc:	40023800 	.word	0x40023800
 8001100:	42470000 	.word	0x42470000
 8001104:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001108:	4b88      	ldr	r3, [pc, #544]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 800110a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1ea      	bne.n	80010ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 8097 	beq.w	8001250 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001126:	4b81      	ldr	r3, [pc, #516]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10f      	bne.n	8001152 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	4b7d      	ldr	r3, [pc, #500]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	4a7c      	ldr	r2, [pc, #496]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001140:	6413      	str	r3, [r2, #64]	@ 0x40
 8001142:	4b7a      	ldr	r3, [pc, #488]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800114e:	2301      	movs	r3, #1
 8001150:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001152:	4b77      	ldr	r3, [pc, #476]	@ (8001330 <HAL_RCC_OscConfig+0x474>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800115a:	2b00      	cmp	r3, #0
 800115c:	d118      	bne.n	8001190 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800115e:	4b74      	ldr	r3, [pc, #464]	@ (8001330 <HAL_RCC_OscConfig+0x474>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a73      	ldr	r2, [pc, #460]	@ (8001330 <HAL_RCC_OscConfig+0x474>)
 8001164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800116a:	f7ff fbcb 	bl	8000904 <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001172:	f7ff fbc7 	bl	8000904 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e10c      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001184:	4b6a      	ldr	r3, [pc, #424]	@ (8001330 <HAL_RCC_OscConfig+0x474>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0f0      	beq.n	8001172 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d106      	bne.n	80011a6 <HAL_RCC_OscConfig+0x2ea>
 8001198:	4b64      	ldr	r3, [pc, #400]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 800119a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800119c:	4a63      	ldr	r2, [pc, #396]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80011a4:	e01c      	b.n	80011e0 <HAL_RCC_OscConfig+0x324>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	2b05      	cmp	r3, #5
 80011ac:	d10c      	bne.n	80011c8 <HAL_RCC_OscConfig+0x30c>
 80011ae:	4b5f      	ldr	r3, [pc, #380]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 80011b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011b2:	4a5e      	ldr	r2, [pc, #376]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80011ba:	4b5c      	ldr	r3, [pc, #368]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 80011bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011be:	4a5b      	ldr	r2, [pc, #364]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80011c6:	e00b      	b.n	80011e0 <HAL_RCC_OscConfig+0x324>
 80011c8:	4b58      	ldr	r3, [pc, #352]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 80011ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011cc:	4a57      	ldr	r2, [pc, #348]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 80011ce:	f023 0301 	bic.w	r3, r3, #1
 80011d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80011d4:	4b55      	ldr	r3, [pc, #340]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 80011d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011d8:	4a54      	ldr	r2, [pc, #336]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 80011da:	f023 0304 	bic.w	r3, r3, #4
 80011de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d015      	beq.n	8001214 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e8:	f7ff fb8c 	bl	8000904 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ee:	e00a      	b.n	8001206 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011f0:	f7ff fb88 	bl	8000904 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011fe:	4293      	cmp	r3, r2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e0cb      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001206:	4b49      	ldr	r3, [pc, #292]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 8001208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0ee      	beq.n	80011f0 <HAL_RCC_OscConfig+0x334>
 8001212:	e014      	b.n	800123e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001214:	f7ff fb76 	bl	8000904 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800121a:	e00a      	b.n	8001232 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800121c:	f7ff fb72 	bl	8000904 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800122a:	4293      	cmp	r3, r2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e0b5      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001232:	4b3e      	ldr	r3, [pc, #248]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 8001234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1ee      	bne.n	800121c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800123e:	7dfb      	ldrb	r3, [r7, #23]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d105      	bne.n	8001250 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001244:	4b39      	ldr	r3, [pc, #228]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	4a38      	ldr	r2, [pc, #224]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 800124a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800124e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 80a1 	beq.w	800139c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800125a:	4b34      	ldr	r3, [pc, #208]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	2b08      	cmp	r3, #8
 8001264:	d05c      	beq.n	8001320 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	2b02      	cmp	r3, #2
 800126c:	d141      	bne.n	80012f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126e:	4b31      	ldr	r3, [pc, #196]	@ (8001334 <HAL_RCC_OscConfig+0x478>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fb46 	bl	8000904 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800127c:	f7ff fb42 	bl	8000904 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e087      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800128e:	4b27      	ldr	r3, [pc, #156]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69da      	ldr	r2, [r3, #28]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a8:	019b      	lsls	r3, r3, #6
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b0:	085b      	lsrs	r3, r3, #1
 80012b2:	3b01      	subs	r3, #1
 80012b4:	041b      	lsls	r3, r3, #16
 80012b6:	431a      	orrs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012bc:	061b      	lsls	r3, r3, #24
 80012be:	491b      	ldr	r1, [pc, #108]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <HAL_RCC_OscConfig+0x478>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ca:	f7ff fb1b 	bl	8000904 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d2:	f7ff fb17 	bl	8000904 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e05c      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012e4:	4b11      	ldr	r3, [pc, #68]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0f0      	beq.n	80012d2 <HAL_RCC_OscConfig+0x416>
 80012f0:	e054      	b.n	800139c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f2:	4b10      	ldr	r3, [pc, #64]	@ (8001334 <HAL_RCC_OscConfig+0x478>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fb04 	bl	8000904 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001300:	f7ff fb00 	bl	8000904 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e045      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001312:	4b06      	ldr	r3, [pc, #24]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0x444>
 800131e:	e03d      	b.n	800139c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d107      	bne.n	8001338 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e038      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
 800132c:	40023800 	.word	0x40023800
 8001330:	40007000 	.word	0x40007000
 8001334:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001338:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <HAL_RCC_OscConfig+0x4ec>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d028      	beq.n	8001398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001350:	429a      	cmp	r2, r3
 8001352:	d121      	bne.n	8001398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135e:	429a      	cmp	r2, r3
 8001360:	d11a      	bne.n	8001398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001368:	4013      	ands	r3, r2
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800136e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001370:	4293      	cmp	r3, r2
 8001372:	d111      	bne.n	8001398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	3b01      	subs	r3, #1
 8001382:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001384:	429a      	cmp	r2, r3
 8001386:	d107      	bne.n	8001398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001392:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001394:	429a      	cmp	r2, r3
 8001396:	d001      	beq.n	800139c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e000      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800

080013ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e0cc      	b.n	800155a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013c0:	4b68      	ldr	r3, [pc, #416]	@ (8001564 <HAL_RCC_ClockConfig+0x1b8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 030f 	and.w	r3, r3, #15
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d90c      	bls.n	80013e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ce:	4b65      	ldr	r3, [pc, #404]	@ (8001564 <HAL_RCC_ClockConfig+0x1b8>)
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d6:	4b63      	ldr	r3, [pc, #396]	@ (8001564 <HAL_RCC_ClockConfig+0x1b8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d001      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0b8      	b.n	800155a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d020      	beq.n	8001436 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d005      	beq.n	800140c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001400:	4b59      	ldr	r3, [pc, #356]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	4a58      	ldr	r2, [pc, #352]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 8001406:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800140a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0308 	and.w	r3, r3, #8
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001418:	4b53      	ldr	r3, [pc, #332]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	4a52      	ldr	r2, [pc, #328]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 800141e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001422:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001424:	4b50      	ldr	r3, [pc, #320]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	494d      	ldr	r1, [pc, #308]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 8001432:	4313      	orrs	r3, r2
 8001434:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d044      	beq.n	80014cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d107      	bne.n	800145a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144a:	4b47      	ldr	r3, [pc, #284]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d119      	bne.n	800148a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e07f      	b.n	800155a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d003      	beq.n	800146a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001466:	2b03      	cmp	r3, #3
 8001468:	d107      	bne.n	800147a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800146a:	4b3f      	ldr	r3, [pc, #252]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d109      	bne.n	800148a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e06f      	b.n	800155a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147a:	4b3b      	ldr	r3, [pc, #236]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e067      	b.n	800155a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800148a:	4b37      	ldr	r3, [pc, #220]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f023 0203 	bic.w	r2, r3, #3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	4934      	ldr	r1, [pc, #208]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 8001498:	4313      	orrs	r3, r2
 800149a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800149c:	f7ff fa32 	bl	8000904 <HAL_GetTick>
 80014a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a2:	e00a      	b.n	80014ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a4:	f7ff fa2e 	bl	8000904 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e04f      	b.n	800155a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 020c 	and.w	r2, r3, #12
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d1eb      	bne.n	80014a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014cc:	4b25      	ldr	r3, [pc, #148]	@ (8001564 <HAL_RCC_ClockConfig+0x1b8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 030f 	and.w	r3, r3, #15
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d20c      	bcs.n	80014f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014da:	4b22      	ldr	r3, [pc, #136]	@ (8001564 <HAL_RCC_ClockConfig+0x1b8>)
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e2:	4b20      	ldr	r3, [pc, #128]	@ (8001564 <HAL_RCC_ClockConfig+0x1b8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d001      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e032      	b.n	800155a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d008      	beq.n	8001512 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001500:	4b19      	ldr	r3, [pc, #100]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	4916      	ldr	r1, [pc, #88]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	4313      	orrs	r3, r2
 8001510:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	2b00      	cmp	r3, #0
 800151c:	d009      	beq.n	8001532 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800151e:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	490e      	ldr	r1, [pc, #56]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	4313      	orrs	r3, r2
 8001530:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001532:	f000 f821 	bl	8001578 <HAL_RCC_GetSysClockFreq>
 8001536:	4602      	mov	r2, r0
 8001538:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	091b      	lsrs	r3, r3, #4
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	490a      	ldr	r1, [pc, #40]	@ (800156c <HAL_RCC_ClockConfig+0x1c0>)
 8001544:	5ccb      	ldrb	r3, [r1, r3]
 8001546:	fa22 f303 	lsr.w	r3, r2, r3
 800154a:	4a09      	ldr	r2, [pc, #36]	@ (8001570 <HAL_RCC_ClockConfig+0x1c4>)
 800154c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <HAL_RCC_ClockConfig+0x1c8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff f992 	bl	800087c <HAL_InitTick>

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023c00 	.word	0x40023c00
 8001568:	40023800 	.word	0x40023800
 800156c:	08001774 	.word	0x08001774
 8001570:	20000000 	.word	0x20000000
 8001574:	20000010 	.word	0x20000010

08001578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800157c:	b090      	sub	sp, #64	@ 0x40
 800157e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	637b      	str	r3, [r7, #52]	@ 0x34
 8001584:	2300      	movs	r3, #0
 8001586:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001588:	2300      	movs	r3, #0
 800158a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001590:	4b59      	ldr	r3, [pc, #356]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 030c 	and.w	r3, r3, #12
 8001598:	2b08      	cmp	r3, #8
 800159a:	d00d      	beq.n	80015b8 <HAL_RCC_GetSysClockFreq+0x40>
 800159c:	2b08      	cmp	r3, #8
 800159e:	f200 80a1 	bhi.w	80016e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d002      	beq.n	80015ac <HAL_RCC_GetSysClockFreq+0x34>
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d003      	beq.n	80015b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80015aa:	e09b      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015ac:	4b53      	ldr	r3, [pc, #332]	@ (80016fc <HAL_RCC_GetSysClockFreq+0x184>)
 80015ae:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80015b0:	e09b      	b.n	80016ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015b2:	4b53      	ldr	r3, [pc, #332]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x188>)
 80015b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80015b6:	e098      	b.n	80016ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015b8:	4b4f      	ldr	r3, [pc, #316]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015c2:	4b4d      	ldr	r3, [pc, #308]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d028      	beq.n	8001620 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ce:	4b4a      	ldr	r3, [pc, #296]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	099b      	lsrs	r3, r3, #6
 80015d4:	2200      	movs	r2, #0
 80015d6:	623b      	str	r3, [r7, #32]
 80015d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80015e0:	2100      	movs	r1, #0
 80015e2:	4b47      	ldr	r3, [pc, #284]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x188>)
 80015e4:	fb03 f201 	mul.w	r2, r3, r1
 80015e8:	2300      	movs	r3, #0
 80015ea:	fb00 f303 	mul.w	r3, r0, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	4a43      	ldr	r2, [pc, #268]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x188>)
 80015f2:	fba0 1202 	umull	r1, r2, r0, r2
 80015f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80015f8:	460a      	mov	r2, r1
 80015fa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80015fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015fe:	4413      	add	r3, r2
 8001600:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001604:	2200      	movs	r2, #0
 8001606:	61bb      	str	r3, [r7, #24]
 8001608:	61fa      	str	r2, [r7, #28]
 800160a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800160e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001612:	f7fe fdeb 	bl	80001ec <__aeabi_uldivmod>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4613      	mov	r3, r2
 800161c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800161e:	e053      	b.n	80016c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001620:	4b35      	ldr	r3, [pc, #212]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	099b      	lsrs	r3, r3, #6
 8001626:	2200      	movs	r2, #0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	617a      	str	r2, [r7, #20]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001632:	f04f 0b00 	mov.w	fp, #0
 8001636:	4652      	mov	r2, sl
 8001638:	465b      	mov	r3, fp
 800163a:	f04f 0000 	mov.w	r0, #0
 800163e:	f04f 0100 	mov.w	r1, #0
 8001642:	0159      	lsls	r1, r3, #5
 8001644:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001648:	0150      	lsls	r0, r2, #5
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	ebb2 080a 	subs.w	r8, r2, sl
 8001652:	eb63 090b 	sbc.w	r9, r3, fp
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001662:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001666:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800166a:	ebb2 0408 	subs.w	r4, r2, r8
 800166e:	eb63 0509 	sbc.w	r5, r3, r9
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	00eb      	lsls	r3, r5, #3
 800167c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001680:	00e2      	lsls	r2, r4, #3
 8001682:	4614      	mov	r4, r2
 8001684:	461d      	mov	r5, r3
 8001686:	eb14 030a 	adds.w	r3, r4, sl
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	eb45 030b 	adc.w	r3, r5, fp
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800169e:	4629      	mov	r1, r5
 80016a0:	028b      	lsls	r3, r1, #10
 80016a2:	4621      	mov	r1, r4
 80016a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016a8:	4621      	mov	r1, r4
 80016aa:	028a      	lsls	r2, r1, #10
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016b2:	2200      	movs	r2, #0
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	60fa      	str	r2, [r7, #12]
 80016b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016bc:	f7fe fd96 	bl	80001ec <__aeabi_uldivmod>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4613      	mov	r3, r2
 80016c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016c8:	4b0b      	ldr	r3, [pc, #44]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	0c1b      	lsrs	r3, r3, #16
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	3301      	adds	r3, #1
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80016d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016e2:	e002      	b.n	80016ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016e4:	4b05      	ldr	r3, [pc, #20]	@ (80016fc <HAL_RCC_GetSysClockFreq+0x184>)
 80016e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3740      	adds	r7, #64	@ 0x40
 80016f0:	46bd      	mov	sp, r7
 80016f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800
 80016fc:	00f42400 	.word	0x00f42400
 8001700:	017d7840 	.word	0x017d7840

08001704 <memset>:
 8001704:	4402      	add	r2, r0
 8001706:	4603      	mov	r3, r0
 8001708:	4293      	cmp	r3, r2
 800170a:	d100      	bne.n	800170e <memset+0xa>
 800170c:	4770      	bx	lr
 800170e:	f803 1b01 	strb.w	r1, [r3], #1
 8001712:	e7f9      	b.n	8001708 <memset+0x4>

08001714 <__libc_init_array>:
 8001714:	b570      	push	{r4, r5, r6, lr}
 8001716:	4d0d      	ldr	r5, [pc, #52]	@ (800174c <__libc_init_array+0x38>)
 8001718:	4c0d      	ldr	r4, [pc, #52]	@ (8001750 <__libc_init_array+0x3c>)
 800171a:	1b64      	subs	r4, r4, r5
 800171c:	10a4      	asrs	r4, r4, #2
 800171e:	2600      	movs	r6, #0
 8001720:	42a6      	cmp	r6, r4
 8001722:	d109      	bne.n	8001738 <__libc_init_array+0x24>
 8001724:	4d0b      	ldr	r5, [pc, #44]	@ (8001754 <__libc_init_array+0x40>)
 8001726:	4c0c      	ldr	r4, [pc, #48]	@ (8001758 <__libc_init_array+0x44>)
 8001728:	f000 f818 	bl	800175c <_init>
 800172c:	1b64      	subs	r4, r4, r5
 800172e:	10a4      	asrs	r4, r4, #2
 8001730:	2600      	movs	r6, #0
 8001732:	42a6      	cmp	r6, r4
 8001734:	d105      	bne.n	8001742 <__libc_init_array+0x2e>
 8001736:	bd70      	pop	{r4, r5, r6, pc}
 8001738:	f855 3b04 	ldr.w	r3, [r5], #4
 800173c:	4798      	blx	r3
 800173e:	3601      	adds	r6, #1
 8001740:	e7ee      	b.n	8001720 <__libc_init_array+0xc>
 8001742:	f855 3b04 	ldr.w	r3, [r5], #4
 8001746:	4798      	blx	r3
 8001748:	3601      	adds	r6, #1
 800174a:	e7f2      	b.n	8001732 <__libc_init_array+0x1e>
 800174c:	08001794 	.word	0x08001794
 8001750:	08001794 	.word	0x08001794
 8001754:	08001794 	.word	0x08001794
 8001758:	08001798 	.word	0x08001798

0800175c <_init>:
 800175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800175e:	bf00      	nop
 8001760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001762:	bc08      	pop	{r3}
 8001764:	469e      	mov	lr, r3
 8001766:	4770      	bx	lr

08001768 <_fini>:
 8001768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800176a:	bf00      	nop
 800176c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800176e:	bc08      	pop	{r3}
 8001770:	469e      	mov	lr, r3
 8001772:	4770      	bx	lr
