
Exercise5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002278  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08002424  08002424  00003424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024c4  080024c4  0000401c  2**0
                  CONTENTS
  4 .ARM          00000008  080024c4  080024c4  000034c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024cc  080024cc  0000401c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024cc  080024cc  000034cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024d0  080024d0  000034d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080024d4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000401c  2**0
                  CONTENTS
 10 .bss          00000074  2000001c  2000001c  0000401c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000090  20000090  0000401c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000871d  00000000  00000000  0000404c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a03  00000000  00000000  0000c769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  0000e170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005c2  00000000  00000000  0000e920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000257df  00000000  00000000  0000eee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d46d  00000000  00000000  000346c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e15a1  00000000  00000000  00041b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001230cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c94  00000000  00000000  00123114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a1  00000000  00000000  00124da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800240c 	.word	0x0800240c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	0800240c 	.word	0x0800240c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <debounceFSM_init>:

// Variable global privada (con static)
static debounceState_t currentState;

/* Private function prototypes --------------------------*/
void debounceFSM_init(void){
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0

	currentState = BUTTON_UP;
 80004e0:	4b05      	ldr	r3, [pc, #20]	@ (80004f8 <debounceFSM_init+0x1c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	701a      	strb	r2, [r3, #0]
	button_pressed = false;
 80004e6:	4b05      	ldr	r3, [pc, #20]	@ (80004fc <debounceFSM_init+0x20>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	701a      	strb	r2, [r3, #0]

}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	20000039 	.word	0x20000039
 80004fc:	20000038 	.word	0x20000038

08000500 <debounceFSM_isButtonDown>:


bool_t debounceFSM_isButtonDown() {
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

	return (currentState == BUTTON_DOWN);
 8000504:	4b05      	ldr	r3, [pc, #20]	@ (800051c <debounceFSM_isButtonDown+0x1c>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b02      	cmp	r3, #2
 800050a:	bf0c      	ite	eq
 800050c:	2301      	moveq	r3, #1
 800050e:	2300      	movne	r3, #0
 8000510:	b2db      	uxtb	r3, r3

}
 8000512:	4618      	mov	r0, r3
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	20000039 	.word	0x20000039

08000520 <debounceFSM_readKey>:

// Esta función devuelve el valor de button_pressed. TRUE significa que button == pressed
bool_t debounceFSM_readKey() {
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0

	if (button_pressed) {
 8000524:	4b07      	ldr	r3, [pc, #28]	@ (8000544 <debounceFSM_readKey+0x24>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d004      	beq.n	8000536 <debounceFSM_readKey+0x16>

		button_pressed = false;
 800052c:	4b05      	ldr	r3, [pc, #20]	@ (8000544 <debounceFSM_readKey+0x24>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
		return true;
 8000532:	2301      	movs	r3, #1
 8000534:	e001      	b.n	800053a <debounceFSM_readKey+0x1a>

	}

	return button_pressed;
 8000536:	4b03      	ldr	r3, [pc, #12]	@ (8000544 <debounceFSM_readKey+0x24>)
 8000538:	781b      	ldrb	r3, [r3, #0]

}
 800053a:	4618      	mov	r0, r3
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	20000038 	.word	0x20000038

08000548 <debounceFSM_update>:

void debounceFSM_update(bool_t button) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]

	button_pressed = button;
 8000552:	4a27      	ldr	r2, [pc, #156]	@ (80005f0 <debounceFSM_update+0xa8>)
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	7013      	strb	r3, [r2, #0]

	switch(currentState) {
 8000558:	4b26      	ldr	r3, [pc, #152]	@ (80005f4 <debounceFSM_update+0xac>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b03      	cmp	r3, #3
 800055e:	d83d      	bhi.n	80005dc <debounceFSM_update+0x94>
 8000560:	a201      	add	r2, pc, #4	@ (adr r2, 8000568 <debounceFSM_update+0x20>)
 8000562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000566:	bf00      	nop
 8000568:	08000579 	.word	0x08000579
 800056c:	0800058b 	.word	0x0800058b
 8000570:	080005a5 	.word	0x080005a5
 8000574:	080005bd 	.word	0x080005bd

	case BUTTON_UP:

		if (debounceFSM_readKey()) {
 8000578:	f7ff ffd2 	bl	8000520 <debounceFSM_readKey>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d02f      	beq.n	80005e2 <debounceFSM_update+0x9a>

			currentState = BUTTON_FALLING;
 8000582:	4b1c      	ldr	r3, [pc, #112]	@ (80005f4 <debounceFSM_update+0xac>)
 8000584:	2201      	movs	r2, #1
 8000586:	701a      	strb	r2, [r3, #0]

		}

		break;
 8000588:	e02b      	b.n	80005e2 <debounceFSM_update+0x9a>

	case BUTTON_FALLING:

		if (debounceFSM_readKey()) {
 800058a:	f7ff ffc9 	bl	8000520 <debounceFSM_readKey>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d003      	beq.n	800059c <debounceFSM_update+0x54>

			currentState = BUTTON_DOWN;
 8000594:	4b17      	ldr	r3, [pc, #92]	@ (80005f4 <debounceFSM_update+0xac>)
 8000596:	2202      	movs	r2, #2
 8000598:	701a      	strb	r2, [r3, #0]

			currentState = BUTTON_UP;

		}

		break;
 800059a:	e025      	b.n	80005e8 <debounceFSM_update+0xa0>
			currentState = BUTTON_UP;
 800059c:	4b15      	ldr	r3, [pc, #84]	@ (80005f4 <debounceFSM_update+0xac>)
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
		break;
 80005a2:	e021      	b.n	80005e8 <debounceFSM_update+0xa0>

	case BUTTON_DOWN:

		if (!debounceFSM_readKey()) {
 80005a4:	f7ff ffbc 	bl	8000520 <debounceFSM_readKey>
 80005a8:	4603      	mov	r3, r0
 80005aa:	f083 0301 	eor.w	r3, r3, #1
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d018      	beq.n	80005e6 <debounceFSM_update+0x9e>

			currentState = BUTTON_RAISING;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	@ (80005f4 <debounceFSM_update+0xac>)
 80005b6:	2203      	movs	r2, #3
 80005b8:	701a      	strb	r2, [r3, #0]

		}

		break;
 80005ba:	e014      	b.n	80005e6 <debounceFSM_update+0x9e>

	case BUTTON_RAISING:

		if (!debounceFSM_readKey()) {
 80005bc:	f7ff ffb0 	bl	8000520 <debounceFSM_readKey>
 80005c0:	4603      	mov	r3, r0
 80005c2:	f083 0301 	eor.w	r3, r3, #1
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d003      	beq.n	80005d4 <debounceFSM_update+0x8c>

			currentState = BUTTON_UP;
 80005cc:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <debounceFSM_update+0xac>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
		} else {

			currentState = BUTTON_DOWN;
		}

		break;
 80005d2:	e009      	b.n	80005e8 <debounceFSM_update+0xa0>
			currentState = BUTTON_DOWN;
 80005d4:	4b07      	ldr	r3, [pc, #28]	@ (80005f4 <debounceFSM_update+0xac>)
 80005d6:	2202      	movs	r2, #2
 80005d8:	701a      	strb	r2, [r3, #0]
		break;
 80005da:	e005      	b.n	80005e8 <debounceFSM_update+0xa0>

	default:

		debounceFSM_init();
 80005dc:	f7ff ff7e 	bl	80004dc <debounceFSM_init>

		break;
 80005e0:	e002      	b.n	80005e8 <debounceFSM_update+0xa0>
		break;
 80005e2:	bf00      	nop
 80005e4:	e000      	b.n	80005e8 <debounceFSM_update+0xa0>
		break;
 80005e6:	bf00      	nop

	}

}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000038 	.word	0x20000038
 80005f4:	20000039 	.word	0x20000039

080005f8 <delayInit>:
 * @brief  Initialize timer
 * @param  delay: pointer to timer structure
 * @param  duration: duration of the timer in milliseconds
 * @retval None
 */
void delayInit(delay_t *delay, tick_t duration){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]

	if(delay == NULL) {
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d102      	bne.n	800060e <delayInit+0x16>
		delayErrorHandler();
 8000608:	f000 f80d 	bl	8000626 <delayErrorHandler>
		return;
 800060c:	e008      	b.n	8000620 <delayInit+0x28>
	}

	//Initialize delay structure
	delay->startTime = 0;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
	delay->duration = duration;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	683a      	ldr	r2, [r7, #0]
 8000618:	605a      	str	r2, [r3, #4]
	delay->running = false;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	721a      	strb	r2, [r3, #8]
}
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <delayErrorHandler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void delayErrorHandler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062a:	b672      	cpsid	i
}
 800062c:	bf00      	nop
	__disable_irq();
	while (1)
 800062e:	bf00      	nop
 8000630:	e7fd      	b.n	800062e <delayErrorHandler+0x8>
	...

08000634 <uartInit>:

/* Public functions ----------------------------------------------------------*/

// Inicializa UART. Devuelve TRUE si es correcto, sino, FALSO
bool_t uartInit(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  UartHandle.Instance        = USARTx;
 8000638:	4b14      	ldr	r3, [pc, #80]	@ (800068c <uartInit+0x58>)
 800063a:	4a15      	ldr	r2, [pc, #84]	@ (8000690 <uartInit+0x5c>)
 800063c:	601a      	str	r2, [r3, #0]

  UartHandle.Init.BaudRate   = 9600;
 800063e:	4b13      	ldr	r3, [pc, #76]	@ (800068c <uartInit+0x58>)
 8000640:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000644:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b11      	ldr	r3, [pc, #68]	@ (800068c <uartInit+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800064c:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <uartInit+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_ODD;
 8000652:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <uartInit+0x58>)
 8000654:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000658:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800065a:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <uartInit+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000660:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <uartInit+0x58>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000666:	4b09      	ldr	r3, [pc, #36]	@ (800068c <uartInit+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 800066c:	4807      	ldr	r0, [pc, #28]	@ (800068c <uartInit+0x58>)
 800066e:	f001 fa15 	bl	8001a9c <HAL_UART_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d003      	beq.n	8000680 <uartInit+0x4c>

  {

    /* Initialization Error */
   Error_Handler();
 8000678:	f000 f830 	bl	80006dc <Error_Handler>
   return false;
 800067c:	2300      	movs	r3, #0
 800067e:	e003      	b.n	8000688 <uartInit+0x54>

  }

  uartSendString((uint8_t*)"Welcome: UART initialized with 9600 baud rate, 1 stop bit.\r\n");
 8000680:	4804      	ldr	r0, [pc, #16]	@ (8000694 <uartInit+0x60>)
 8000682:	f000 f809 	bl	8000698 <uartSendString>
  return true;
 8000686:	2301      	movs	r3, #1

}
 8000688:	4618      	mov	r0, r3
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2000003c 	.word	0x2000003c
 8000690:	40004800 	.word	0x40004800
 8000694:	08002424 	.word	0x08002424

08000698 <uartSendString>:

void uartSendString(uint8_t * pstring) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

	if (pstring == NULL) return;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d013      	beq.n	80006ce <uartSendString+0x36>

	uint16_t length = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	81fb      	strh	r3, [r7, #14]
	while (pstring[length] != '\0') {
 80006aa:	e002      	b.n	80006b2 <uartSendString+0x1a>

		length++;
 80006ac:	89fb      	ldrh	r3, [r7, #14]
 80006ae:	3301      	adds	r3, #1
 80006b0:	81fb      	strh	r3, [r7, #14]
	while (pstring[length] != '\0') {
 80006b2:	89fb      	ldrh	r3, [r7, #14]
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	4413      	add	r3, r2
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d1f6      	bne.n	80006ac <uartSendString+0x14>

	}

	HAL_UART_Transmit(&UartHandle, pstring, length, HAL_MAX_DELAY);
 80006be:	89fa      	ldrh	r2, [r7, #14]
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006c4:	6879      	ldr	r1, [r7, #4]
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <uartSendString+0x40>)
 80006c8:	f001 fa35 	bl	8001b36 <HAL_UART_Transmit>
 80006cc:	e000      	b.n	80006d0 <uartSendString+0x38>
	if (pstring == NULL) return;
 80006ce:	bf00      	nop

}
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	2000003c 	.word	0x2000003c

080006dc <Error_Handler>:

    HAL_UART_Receive(&UartHandle, pstring, size, HAL_MAX_DELAY);

}

void Error_Handler(void) {
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
	while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <Error_Handler+0x4>

080006e4 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	@ 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d10e      	bne.n	8000712 <BSP_LED_Init+0x2e>
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000778 <BSP_LED_Init+0x94>)
 80006fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fc:	4a1e      	ldr	r2, [pc, #120]	@ (8000778 <BSP_LED_Init+0x94>)
 80006fe:	f043 0302 	orr.w	r3, r3, #2
 8000702:	6313      	str	r3, [r2, #48]	@ 0x30
 8000704:	4b1c      	ldr	r3, [pc, #112]	@ (8000778 <BSP_LED_Init+0x94>)
 8000706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000708:	f003 0302 	and.w	r3, r3, #2
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	e00d      	b.n	800072e <BSP_LED_Init+0x4a>
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b18      	ldr	r3, [pc, #96]	@ (8000778 <BSP_LED_Init+0x94>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a17      	ldr	r2, [pc, #92]	@ (8000778 <BSP_LED_Init+0x94>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <BSP_LED_Init+0x94>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	4a12      	ldr	r2, [pc, #72]	@ (800077c <BSP_LED_Init+0x98>)
 8000732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000740:	2302      	movs	r3, #2
 8000742:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	4a0e      	ldr	r2, [pc, #56]	@ (8000780 <BSP_LED_Init+0x9c>)
 8000748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800074c:	f107 0214 	add.w	r2, r7, #20
 8000750:	4611      	mov	r1, r2
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fa82 	bl	8000c5c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	4a09      	ldr	r2, [pc, #36]	@ (8000780 <BSP_LED_Init+0x9c>)
 800075c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	4a06      	ldr	r2, [pc, #24]	@ (800077c <BSP_LED_Init+0x98>)
 8000764:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000768:	2200      	movs	r2, #0
 800076a:	4619      	mov	r1, r3
 800076c:	f000 fc3a 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	@ 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	080024a4 	.word	0x080024a4
 8000780:	20000000 	.word	0x20000000

08000784 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	4a07      	ldr	r2, [pc, #28]	@ (80007b0 <BSP_LED_On+0x2c>)
 8000792:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <BSP_LED_On+0x30>)
 800079a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800079e:	2201      	movs	r2, #1
 80007a0:	4619      	mov	r1, r3
 80007a2:	f000 fc1f 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000000 	.word	0x20000000
 80007b4:	080024a4 	.word	0x080024a4

080007b8 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	460a      	mov	r2, r1
 80007c2:	71fb      	strb	r3, [r7, #7]
 80007c4:	4613      	mov	r3, r2
 80007c6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	4b23      	ldr	r3, [pc, #140]	@ (800085c <BSP_PB_Init+0xa4>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d0:	4a22      	ldr	r2, [pc, #136]	@ (800085c <BSP_PB_Init+0xa4>)
 80007d2:	f043 0304 	orr.w	r3, r3, #4
 80007d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d8:	4b20      	ldr	r3, [pc, #128]	@ (800085c <BSP_PB_Init+0xa4>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007dc:	f003 0304 	and.w	r3, r3, #4
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80007e4:	79bb      	ldrb	r3, [r7, #6]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d112      	bne.n	8000810 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80007ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f0:	2300      	movs	r3, #0
 80007f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007f4:	2302      	movs	r3, #2
 80007f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80007f8:	2302      	movs	r3, #2
 80007fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	4a18      	ldr	r2, [pc, #96]	@ (8000860 <BSP_PB_Init+0xa8>)
 8000800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000804:	f107 020c 	add.w	r2, r7, #12
 8000808:	4611      	mov	r1, r2
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fa26 	bl	8000c5c <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000810:	79bb      	ldrb	r3, [r7, #6]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d11d      	bne.n	8000852 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000816:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800081a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000820:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000824:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	4a0d      	ldr	r2, [pc, #52]	@ (8000860 <BSP_PB_Init+0xa8>)
 800082a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800082e:	f107 020c 	add.w	r2, r7, #12
 8000832:	4611      	mov	r1, r2
 8000834:	4618      	mov	r0, r3
 8000836:	f000 fa11 	bl	8000c5c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800083a:	2328      	movs	r3, #40	@ 0x28
 800083c:	b25b      	sxtb	r3, r3
 800083e:	2200      	movs	r2, #0
 8000840:	210f      	movs	r1, #15
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f9d3 	bl	8000bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000848:	2328      	movs	r3, #40	@ 0x28
 800084a:	b25b      	sxtb	r3, r3
 800084c:	4618      	mov	r0, r3
 800084e:	f000 f9ea 	bl	8000c26 <HAL_NVIC_EnableIRQ>
  }
}
 8000852:	bf00      	nop
 8000854:	3720      	adds	r7, #32
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800
 8000860:	2000000c 	.word	0x2000000c

08000864 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	4a06      	ldr	r2, [pc, #24]	@ (800088c <BSP_PB_GetState+0x28>)
 8000872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000876:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f000 fb99 	bl	8000fb4 <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2000000c 	.word	0x2000000c

08000890 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000894:	4b16      	ldr	r3, [pc, #88]	@ (80008f0 <SystemInit+0x60>)
 8000896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800089a:	4a15      	ldr	r2, [pc, #84]	@ (80008f0 <SystemInit+0x60>)
 800089c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80008a4:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <SystemInit+0x64>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a12      	ldr	r2, [pc, #72]	@ (80008f4 <SystemInit+0x64>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008b0:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <SystemInit+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <SystemInit+0x64>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a0e      	ldr	r2, [pc, #56]	@ (80008f4 <SystemInit+0x64>)
 80008bc:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 80008c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80008c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <SystemInit+0x64>)
 80008c8:	4a0b      	ldr	r2, [pc, #44]	@ (80008f8 <SystemInit+0x68>)
 80008ca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <SystemInit+0x64>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a08      	ldr	r2, [pc, #32]	@ (80008f4 <SystemInit+0x64>)
 80008d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80008d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <SystemInit+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008de:	4b04      	ldr	r3, [pc, #16]	@ (80008f0 <SystemInit+0x60>)
 80008e0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80008e4:	609a      	str	r2, [r3, #8]
#endif
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	e000ed00 	.word	0xe000ed00
 80008f4:	40023800 	.word	0x40023800
 80008f8:	24003010 	.word	0x24003010

080008fc <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800090e:	bf00      	nop
 8000910:	e7fd      	b.n	800090e <HardFault_Handler+0x4>

08000912 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000916:	bf00      	nop
 8000918:	e7fd      	b.n	8000916 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800091e:	bf00      	nop
 8000920:	e7fd      	b.n	800091e <BusFault_Handler+0x4>

08000922 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000926:	bf00      	nop
 8000928:	e7fd      	b.n	8000926 <UsageFault_Handler+0x4>

0800092a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000958:	f000 f84e 	bl	80009f8 <HAL_IncTick>
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000964:	4b0b      	ldr	r3, [pc, #44]	@ (8000994 <HAL_Init+0x34>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a0a      	ldr	r2, [pc, #40]	@ (8000994 <HAL_Init+0x34>)
 800096a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800096e:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000970:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <HAL_Init+0x34>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a07      	ldr	r2, [pc, #28]	@ (8000994 <HAL_Init+0x34>)
 8000976:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800097a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800097c:	2003      	movs	r0, #3
 800097e:	f000 f92b 	bl	8000bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000982:	200f      	movs	r0, #15
 8000984:	f000 f808 	bl	8000998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000988:	f000 fb98 	bl	80010bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023c00 	.word	0x40023c00

08000998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <HAL_InitTick+0x54>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <HAL_InitTick+0x58>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f943 	bl	8000c42 <HAL_SYSTICK_Config>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00e      	b.n	80009e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b0f      	cmp	r3, #15
 80009ca:	d80a      	bhi.n	80009e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009cc:	2200      	movs	r2, #0
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009d4:	f000 f90b 	bl	8000bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d8:	4a06      	ldr	r2, [pc, #24]	@ (80009f4 <HAL_InitTick+0x5c>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009de:	2300      	movs	r3, #0
 80009e0:	e000      	b.n	80009e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000010 	.word	0x20000010
 80009f0:	20000018 	.word	0x20000018
 80009f4:	20000014 	.word	0x20000014

080009f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <HAL_IncTick+0x20>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <HAL_IncTick+0x24>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <HAL_IncTick+0x24>)
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000018 	.word	0x20000018
 8000a1c:	20000080 	.word	0x20000080

08000a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b03      	ldr	r3, [pc, #12]	@ (8000a34 <HAL_GetTick+0x14>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000080 	.word	0x20000080

08000a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a48:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a54:	4013      	ands	r3, r2
 8000a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6a:	4a04      	ldr	r2, [pc, #16]	@ (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	60d3      	str	r3, [r2, #12]
}
 8000a70:	bf00      	nop
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a84:	4b04      	ldr	r3, [pc, #16]	@ (8000a98 <__NVIC_GetPriorityGrouping+0x18>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	0a1b      	lsrs	r3, r3, #8
 8000a8a:	f003 0307 	and.w	r3, r3, #7
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	db0b      	blt.n	8000ac6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	f003 021f 	and.w	r2, r3, #31
 8000ab4:	4907      	ldr	r1, [pc, #28]	@ (8000ad4 <__NVIC_EnableIRQ+0x38>)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	095b      	lsrs	r3, r3, #5
 8000abc:	2001      	movs	r0, #1
 8000abe:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000e100 	.word	0xe000e100

08000ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	db0a      	blt.n	8000b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	490c      	ldr	r1, [pc, #48]	@ (8000b24 <__NVIC_SetPriority+0x4c>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	0112      	lsls	r2, r2, #4
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	440b      	add	r3, r1
 8000afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b00:	e00a      	b.n	8000b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4908      	ldr	r1, [pc, #32]	@ (8000b28 <__NVIC_SetPriority+0x50>)
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	f003 030f 	and.w	r3, r3, #15
 8000b0e:	3b04      	subs	r3, #4
 8000b10:	0112      	lsls	r2, r2, #4
 8000b12:	b2d2      	uxtb	r2, r2
 8000b14:	440b      	add	r3, r1
 8000b16:	761a      	strb	r2, [r3, #24]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000e100 	.word	0xe000e100
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b089      	sub	sp, #36	@ 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	f1c3 0307 	rsb	r3, r3, #7
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	bf28      	it	cs
 8000b4a:	2304      	movcs	r3, #4
 8000b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3304      	adds	r3, #4
 8000b52:	2b06      	cmp	r3, #6
 8000b54:	d902      	bls.n	8000b5c <NVIC_EncodePriority+0x30>
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3b03      	subs	r3, #3
 8000b5a:	e000      	b.n	8000b5e <NVIC_EncodePriority+0x32>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	401a      	ands	r2, r3
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7e:	43d9      	mvns	r1, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	4313      	orrs	r3, r2
         );
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3724      	adds	r7, #36	@ 0x24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ba4:	d301      	bcc.n	8000baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00f      	b.n	8000bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <SysTick_Config+0x40>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bb8:	f7ff ff8e 	bl	8000ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bbc:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <SysTick_Config+0x40>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc2:	4b04      	ldr	r3, [pc, #16]	@ (8000bd4 <SysTick_Config+0x40>)
 8000bc4:	2207      	movs	r2, #7
 8000bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	e000e010 	.word	0xe000e010

08000bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff29 	bl	8000a38 <__NVIC_SetPriorityGrouping>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c00:	f7ff ff3e 	bl	8000a80 <__NVIC_GetPriorityGrouping>
 8000c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	6978      	ldr	r0, [r7, #20]
 8000c0c:	f7ff ff8e 	bl	8000b2c <NVIC_EncodePriority>
 8000c10:	4602      	mov	r2, r0
 8000c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff5d 	bl	8000ad8 <__NVIC_SetPriority>
}
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff31 	bl	8000a9c <__NVIC_EnableIRQ>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ffa2 	bl	8000b94 <SysTick_Config>
 8000c50:	4603      	mov	r3, r0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b089      	sub	sp, #36	@ 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
 8000c76:	e177      	b.n	8000f68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c78:	2201      	movs	r2, #1
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	697a      	ldr	r2, [r7, #20]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	f040 8166 	bne.w	8000f62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 0303 	and.w	r3, r3, #3
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d005      	beq.n	8000cae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d130      	bne.n	8000d10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	2203      	movs	r2, #3
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	68da      	ldr	r2, [r3, #12]
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	091b      	lsrs	r3, r3, #4
 8000cfa:	f003 0201 	and.w	r2, r3, #1
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	d017      	beq.n	8000d4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	2203      	movs	r2, #3
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d123      	bne.n	8000da0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	08da      	lsrs	r2, r3, #3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3208      	adds	r2, #8
 8000d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	f003 0307 	and.w	r3, r3, #7
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	220f      	movs	r2, #15
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	691a      	ldr	r2, [r3, #16]
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	08da      	lsrs	r2, r3, #3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3208      	adds	r2, #8
 8000d9a:	69b9      	ldr	r1, [r7, #24]
 8000d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	2203      	movs	r2, #3
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0203 	and.w	r2, r3, #3
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f000 80c0 	beq.w	8000f62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b66      	ldr	r3, [pc, #408]	@ (8000f80 <HAL_GPIO_Init+0x324>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dea:	4a65      	ldr	r2, [pc, #404]	@ (8000f80 <HAL_GPIO_Init+0x324>)
 8000dec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000df2:	4b63      	ldr	r3, [pc, #396]	@ (8000f80 <HAL_GPIO_Init+0x324>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dfe:	4a61      	ldr	r2, [pc, #388]	@ (8000f84 <HAL_GPIO_Init+0x328>)
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	089b      	lsrs	r3, r3, #2
 8000e04:	3302      	adds	r3, #2
 8000e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	220f      	movs	r2, #15
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a58      	ldr	r2, [pc, #352]	@ (8000f88 <HAL_GPIO_Init+0x32c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d037      	beq.n	8000e9a <HAL_GPIO_Init+0x23e>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a57      	ldr	r2, [pc, #348]	@ (8000f8c <HAL_GPIO_Init+0x330>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d031      	beq.n	8000e96 <HAL_GPIO_Init+0x23a>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a56      	ldr	r2, [pc, #344]	@ (8000f90 <HAL_GPIO_Init+0x334>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d02b      	beq.n	8000e92 <HAL_GPIO_Init+0x236>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a55      	ldr	r2, [pc, #340]	@ (8000f94 <HAL_GPIO_Init+0x338>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d025      	beq.n	8000e8e <HAL_GPIO_Init+0x232>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a54      	ldr	r2, [pc, #336]	@ (8000f98 <HAL_GPIO_Init+0x33c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d01f      	beq.n	8000e8a <HAL_GPIO_Init+0x22e>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a53      	ldr	r2, [pc, #332]	@ (8000f9c <HAL_GPIO_Init+0x340>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d019      	beq.n	8000e86 <HAL_GPIO_Init+0x22a>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a52      	ldr	r2, [pc, #328]	@ (8000fa0 <HAL_GPIO_Init+0x344>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d013      	beq.n	8000e82 <HAL_GPIO_Init+0x226>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a51      	ldr	r2, [pc, #324]	@ (8000fa4 <HAL_GPIO_Init+0x348>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d00d      	beq.n	8000e7e <HAL_GPIO_Init+0x222>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a50      	ldr	r2, [pc, #320]	@ (8000fa8 <HAL_GPIO_Init+0x34c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d007      	beq.n	8000e7a <HAL_GPIO_Init+0x21e>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4f      	ldr	r2, [pc, #316]	@ (8000fac <HAL_GPIO_Init+0x350>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d101      	bne.n	8000e76 <HAL_GPIO_Init+0x21a>
 8000e72:	2309      	movs	r3, #9
 8000e74:	e012      	b.n	8000e9c <HAL_GPIO_Init+0x240>
 8000e76:	230a      	movs	r3, #10
 8000e78:	e010      	b.n	8000e9c <HAL_GPIO_Init+0x240>
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	e00e      	b.n	8000e9c <HAL_GPIO_Init+0x240>
 8000e7e:	2307      	movs	r3, #7
 8000e80:	e00c      	b.n	8000e9c <HAL_GPIO_Init+0x240>
 8000e82:	2306      	movs	r3, #6
 8000e84:	e00a      	b.n	8000e9c <HAL_GPIO_Init+0x240>
 8000e86:	2305      	movs	r3, #5
 8000e88:	e008      	b.n	8000e9c <HAL_GPIO_Init+0x240>
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	e006      	b.n	8000e9c <HAL_GPIO_Init+0x240>
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e004      	b.n	8000e9c <HAL_GPIO_Init+0x240>
 8000e92:	2302      	movs	r3, #2
 8000e94:	e002      	b.n	8000e9c <HAL_GPIO_Init+0x240>
 8000e96:	2301      	movs	r3, #1
 8000e98:	e000      	b.n	8000e9c <HAL_GPIO_Init+0x240>
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	69fa      	ldr	r2, [r7, #28]
 8000e9e:	f002 0203 	and.w	r2, r2, #3
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	4093      	lsls	r3, r2
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eac:	4935      	ldr	r1, [pc, #212]	@ (8000f84 <HAL_GPIO_Init+0x328>)
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eba:	4b3d      	ldr	r3, [pc, #244]	@ (8000fb0 <HAL_GPIO_Init+0x354>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ede:	4a34      	ldr	r2, [pc, #208]	@ (8000fb0 <HAL_GPIO_Init+0x354>)
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ee4:	4b32      	ldr	r3, [pc, #200]	@ (8000fb0 <HAL_GPIO_Init+0x354>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f08:	4a29      	ldr	r2, [pc, #164]	@ (8000fb0 <HAL_GPIO_Init+0x354>)
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f0e:	4b28      	ldr	r3, [pc, #160]	@ (8000fb0 <HAL_GPIO_Init+0x354>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f32:	4a1f      	ldr	r2, [pc, #124]	@ (8000fb0 <HAL_GPIO_Init+0x354>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb0 <HAL_GPIO_Init+0x354>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f5c:	4a14      	ldr	r2, [pc, #80]	@ (8000fb0 <HAL_GPIO_Init+0x354>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3301      	adds	r3, #1
 8000f66:	61fb      	str	r3, [r7, #28]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	2b0f      	cmp	r3, #15
 8000f6c:	f67f ae84 	bls.w	8000c78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3724      	adds	r7, #36	@ 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40013800 	.word	0x40013800
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	40020800 	.word	0x40020800
 8000f94:	40020c00 	.word	0x40020c00
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40021400 	.word	0x40021400
 8000fa0:	40021800 	.word	0x40021800
 8000fa4:	40021c00 	.word	0x40021c00
 8000fa8:	40022000 	.word	0x40022000
 8000fac:	40022400 	.word	0x40022400
 8000fb0:	40013c00 	.word	0x40013c00

08000fb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	691a      	ldr	r2, [r3, #16]
 8000fc4:	887b      	ldrh	r3, [r7, #2]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	e001      	b.n	8000fd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	807b      	strh	r3, [r7, #2]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ff4:	787b      	ldrb	r3, [r7, #1]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ffa:	887a      	ldrh	r2, [r7, #2]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001000:	e003      	b.n	800100a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001002:	887b      	ldrh	r3, [r7, #2]
 8001004:	041a      	lsls	r2, r3, #16
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	619a      	str	r2, [r3, #24]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	@ 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	4b23      	ldr	r3, [pc, #140]	@ (80010b4 <HAL_UART_MspInit+0x9c>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001028:	4a22      	ldr	r2, [pc, #136]	@ (80010b4 <HAL_UART_MspInit+0x9c>)
 800102a:	f043 0308 	orr.w	r3, r3, #8
 800102e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001030:	4b20      	ldr	r3, [pc, #128]	@ (80010b4 <HAL_UART_MspInit+0x9c>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001034:	f003 0308 	and.w	r3, r3, #8
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	4b1c      	ldr	r3, [pc, #112]	@ (80010b4 <HAL_UART_MspInit+0x9c>)
 8001042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001044:	4a1b      	ldr	r2, [pc, #108]	@ (80010b4 <HAL_UART_MspInit+0x9c>)
 8001046:	f043 0308 	orr.w	r3, r3, #8
 800104a:	6313      	str	r3, [r2, #48]	@ 0x30
 800104c:	4b19      	ldr	r3, [pc, #100]	@ (80010b4 <HAL_UART_MspInit+0x9c>)
 800104e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001050:	f003 0308 	and.w	r3, r3, #8
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <HAL_UART_MspInit+0x9c>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001060:	4a14      	ldr	r2, [pc, #80]	@ (80010b4 <HAL_UART_MspInit+0x9c>)
 8001062:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001066:	6413      	str	r3, [r2, #64]	@ 0x40
 8001068:	4b12      	ldr	r3, [pc, #72]	@ (80010b4 <HAL_UART_MspInit+0x9c>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001074:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800107e:	2301      	movs	r3, #1
 8001080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001086:	2307      	movs	r3, #7
 8001088:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4809      	ldr	r0, [pc, #36]	@ (80010b8 <HAL_UART_MspInit+0xa0>)
 8001092:	f7ff fde3 	bl	8000c5c <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001096:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 800109c:	2307      	movs	r3, #7
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	4804      	ldr	r0, [pc, #16]	@ (80010b8 <HAL_UART_MspInit+0xa0>)
 80010a8:	f7ff fdd8 	bl	8000c5c <HAL_GPIO_Init>
}
 80010ac:	bf00      	nop
 80010ae:	3728      	adds	r7, #40	@ 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020c00 	.word	0x40020c00

080010bc <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0

}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	603b      	str	r3, [r7, #0]
 80010da:	4b20      	ldr	r3, [pc, #128]	@ (800115c <HAL_PWREx_EnableOverDrive+0x90>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010de:	4a1f      	ldr	r2, [pc, #124]	@ (800115c <HAL_PWREx_EnableOverDrive+0x90>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e6:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <HAL_PWREx_EnableOverDrive+0x90>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80010f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001160 <HAL_PWREx_EnableOverDrive+0x94>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010f8:	f7ff fc92 	bl	8000a20 <HAL_GetTick>
 80010fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80010fe:	e009      	b.n	8001114 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001100:	f7ff fc8e 	bl	8000a20 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800110e:	d901      	bls.n	8001114 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e01f      	b.n	8001154 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001114:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <HAL_PWREx_EnableOverDrive+0x98>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800111c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001120:	d1ee      	bne.n	8001100 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001122:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001124:	2201      	movs	r2, #1
 8001126:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001128:	f7ff fc7a 	bl	8000a20 <HAL_GetTick>
 800112c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800112e:	e009      	b.n	8001144 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001130:	f7ff fc76 	bl	8000a20 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800113e:	d901      	bls.n	8001144 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e007      	b.n	8001154 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001144:	4b07      	ldr	r3, [pc, #28]	@ (8001164 <HAL_PWREx_EnableOverDrive+0x98>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001150:	d1ee      	bne.n	8001130 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40023800 	.word	0x40023800
 8001160:	420e0040 	.word	0x420e0040
 8001164:	40007000 	.word	0x40007000
 8001168:	420e0044 	.word	0x420e0044

0800116c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e267      	b.n	800164e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d075      	beq.n	8001276 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800118a:	4b88      	ldr	r3, [pc, #544]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 030c 	and.w	r3, r3, #12
 8001192:	2b04      	cmp	r3, #4
 8001194:	d00c      	beq.n	80011b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001196:	4b85      	ldr	r3, [pc, #532]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d112      	bne.n	80011c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011a2:	4b82      	ldr	r3, [pc, #520]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011ae:	d10b      	bne.n	80011c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b0:	4b7e      	ldr	r3, [pc, #504]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d05b      	beq.n	8001274 <HAL_RCC_OscConfig+0x108>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d157      	bne.n	8001274 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e242      	b.n	800164e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011d0:	d106      	bne.n	80011e0 <HAL_RCC_OscConfig+0x74>
 80011d2:	4b76      	ldr	r3, [pc, #472]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a75      	ldr	r2, [pc, #468]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 80011d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e01d      	b.n	800121c <HAL_RCC_OscConfig+0xb0>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011e8:	d10c      	bne.n	8001204 <HAL_RCC_OscConfig+0x98>
 80011ea:	4b70      	ldr	r3, [pc, #448]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a6f      	ldr	r2, [pc, #444]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 80011f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	4b6d      	ldr	r3, [pc, #436]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a6c      	ldr	r2, [pc, #432]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 80011fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	e00b      	b.n	800121c <HAL_RCC_OscConfig+0xb0>
 8001204:	4b69      	ldr	r3, [pc, #420]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a68      	ldr	r2, [pc, #416]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 800120a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b66      	ldr	r3, [pc, #408]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a65      	ldr	r2, [pc, #404]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 8001216:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800121a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d013      	beq.n	800124c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001224:	f7ff fbfc 	bl	8000a20 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800122c:	f7ff fbf8 	bl	8000a20 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b64      	cmp	r3, #100	@ 0x64
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e207      	b.n	800164e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123e:	4b5b      	ldr	r3, [pc, #364]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0xc0>
 800124a:	e014      	b.n	8001276 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fbe8 	bl	8000a20 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff fbe4 	bl	8000a20 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	@ 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e1f3      	b.n	800164e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001266:	4b51      	ldr	r3, [pc, #324]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0xe8>
 8001272:	e000      	b.n	8001276 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d063      	beq.n	800134a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001282:	4b4a      	ldr	r3, [pc, #296]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00b      	beq.n	80012a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800128e:	4b47      	ldr	r3, [pc, #284]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001296:	2b08      	cmp	r3, #8
 8001298:	d11c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800129a:	4b44      	ldr	r3, [pc, #272]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d116      	bne.n	80012d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a6:	4b41      	ldr	r3, [pc, #260]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d005      	beq.n	80012be <HAL_RCC_OscConfig+0x152>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d001      	beq.n	80012be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e1c7      	b.n	800164e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012be:	4b3b      	ldr	r3, [pc, #236]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	4937      	ldr	r1, [pc, #220]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d2:	e03a      	b.n	800134a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d020      	beq.n	800131e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012dc:	4b34      	ldr	r3, [pc, #208]	@ (80013b0 <HAL_RCC_OscConfig+0x244>)
 80012de:	2201      	movs	r2, #1
 80012e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e2:	f7ff fb9d 	bl	8000a20 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ea:	f7ff fb99 	bl	8000a20 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e1a8      	b.n	800164e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fc:	4b2b      	ldr	r3, [pc, #172]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0f0      	beq.n	80012ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001308:	4b28      	ldr	r3, [pc, #160]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	4925      	ldr	r1, [pc, #148]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 8001318:	4313      	orrs	r3, r2
 800131a:	600b      	str	r3, [r1, #0]
 800131c:	e015      	b.n	800134a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800131e:	4b24      	ldr	r3, [pc, #144]	@ (80013b0 <HAL_RCC_OscConfig+0x244>)
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001324:	f7ff fb7c 	bl	8000a20 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800132c:	f7ff fb78 	bl	8000a20 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e187      	b.n	800164e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133e:	4b1b      	ldr	r3, [pc, #108]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f0      	bne.n	800132c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	2b00      	cmp	r3, #0
 8001354:	d036      	beq.n	80013c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d016      	beq.n	800138c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800135e:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <HAL_RCC_OscConfig+0x248>)
 8001360:	2201      	movs	r2, #1
 8001362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001364:	f7ff fb5c 	bl	8000a20 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800136c:	f7ff fb58 	bl	8000a20 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e167      	b.n	800164e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137e:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <HAL_RCC_OscConfig+0x240>)
 8001380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0f0      	beq.n	800136c <HAL_RCC_OscConfig+0x200>
 800138a:	e01b      	b.n	80013c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800138c:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <HAL_RCC_OscConfig+0x248>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001392:	f7ff fb45 	bl	8000a20 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001398:	e00e      	b.n	80013b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800139a:	f7ff fb41 	bl	8000a20 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d907      	bls.n	80013b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e150      	b.n	800164e <HAL_RCC_OscConfig+0x4e2>
 80013ac:	40023800 	.word	0x40023800
 80013b0:	42470000 	.word	0x42470000
 80013b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b8:	4b88      	ldr	r3, [pc, #544]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 80013ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1ea      	bne.n	800139a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 8097 	beq.w	8001500 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013d6:	4b81      	ldr	r3, [pc, #516]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10f      	bne.n	8001402 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	4b7d      	ldr	r3, [pc, #500]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	4a7c      	ldr	r2, [pc, #496]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 80013ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f2:	4b7a      	ldr	r3, [pc, #488]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013fe:	2301      	movs	r3, #1
 8001400:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001402:	4b77      	ldr	r3, [pc, #476]	@ (80015e0 <HAL_RCC_OscConfig+0x474>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800140a:	2b00      	cmp	r3, #0
 800140c:	d118      	bne.n	8001440 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800140e:	4b74      	ldr	r3, [pc, #464]	@ (80015e0 <HAL_RCC_OscConfig+0x474>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a73      	ldr	r2, [pc, #460]	@ (80015e0 <HAL_RCC_OscConfig+0x474>)
 8001414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800141a:	f7ff fb01 	bl	8000a20 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001422:	f7ff fafd 	bl	8000a20 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e10c      	b.n	800164e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001434:	4b6a      	ldr	r3, [pc, #424]	@ (80015e0 <HAL_RCC_OscConfig+0x474>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d106      	bne.n	8001456 <HAL_RCC_OscConfig+0x2ea>
 8001448:	4b64      	ldr	r3, [pc, #400]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 800144a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800144c:	4a63      	ldr	r2, [pc, #396]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6713      	str	r3, [r2, #112]	@ 0x70
 8001454:	e01c      	b.n	8001490 <HAL_RCC_OscConfig+0x324>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b05      	cmp	r3, #5
 800145c:	d10c      	bne.n	8001478 <HAL_RCC_OscConfig+0x30c>
 800145e:	4b5f      	ldr	r3, [pc, #380]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 8001460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001462:	4a5e      	ldr	r2, [pc, #376]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	6713      	str	r3, [r2, #112]	@ 0x70
 800146a:	4b5c      	ldr	r3, [pc, #368]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 800146c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800146e:	4a5b      	ldr	r2, [pc, #364]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6713      	str	r3, [r2, #112]	@ 0x70
 8001476:	e00b      	b.n	8001490 <HAL_RCC_OscConfig+0x324>
 8001478:	4b58      	ldr	r3, [pc, #352]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 800147a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800147c:	4a57      	ldr	r2, [pc, #348]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 800147e:	f023 0301 	bic.w	r3, r3, #1
 8001482:	6713      	str	r3, [r2, #112]	@ 0x70
 8001484:	4b55      	ldr	r3, [pc, #340]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 8001486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001488:	4a54      	ldr	r2, [pc, #336]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 800148a:	f023 0304 	bic.w	r3, r3, #4
 800148e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d015      	beq.n	80014c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001498:	f7ff fac2 	bl	8000a20 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800149e:	e00a      	b.n	80014b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a0:	f7ff fabe 	bl	8000a20 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e0cb      	b.n	800164e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b6:	4b49      	ldr	r3, [pc, #292]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 80014b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0ee      	beq.n	80014a0 <HAL_RCC_OscConfig+0x334>
 80014c2:	e014      	b.n	80014ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c4:	f7ff faac 	bl	8000a20 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ca:	e00a      	b.n	80014e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014cc:	f7ff faa8 	bl	8000a20 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014da:	4293      	cmp	r3, r2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e0b5      	b.n	800164e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e2:	4b3e      	ldr	r3, [pc, #248]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 80014e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1ee      	bne.n	80014cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014ee:	7dfb      	ldrb	r3, [r7, #23]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d105      	bne.n	8001500 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f4:	4b39      	ldr	r3, [pc, #228]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f8:	4a38      	ldr	r2, [pc, #224]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 80014fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 80a1 	beq.w	800164c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800150a:	4b34      	ldr	r3, [pc, #208]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b08      	cmp	r3, #8
 8001514:	d05c      	beq.n	80015d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	2b02      	cmp	r3, #2
 800151c:	d141      	bne.n	80015a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151e:	4b31      	ldr	r3, [pc, #196]	@ (80015e4 <HAL_RCC_OscConfig+0x478>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff fa7c 	bl	8000a20 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152c:	f7ff fa78 	bl	8000a20 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e087      	b.n	800164e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153e:	4b27      	ldr	r3, [pc, #156]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69da      	ldr	r2, [r3, #28]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001558:	019b      	lsls	r3, r3, #6
 800155a:	431a      	orrs	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001560:	085b      	lsrs	r3, r3, #1
 8001562:	3b01      	subs	r3, #1
 8001564:	041b      	lsls	r3, r3, #16
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800156c:	061b      	lsls	r3, r3, #24
 800156e:	491b      	ldr	r1, [pc, #108]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 8001570:	4313      	orrs	r3, r2
 8001572:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001574:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <HAL_RCC_OscConfig+0x478>)
 8001576:	2201      	movs	r2, #1
 8001578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157a:	f7ff fa51 	bl	8000a20 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001582:	f7ff fa4d 	bl	8000a20 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e05c      	b.n	800164e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001594:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x416>
 80015a0:	e054      	b.n	800164c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <HAL_RCC_OscConfig+0x478>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fa3a 	bl	8000a20 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b0:	f7ff fa36 	bl	8000a20 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e045      	b.n	800164e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c2:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <HAL_RCC_OscConfig+0x470>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x444>
 80015ce:	e03d      	b.n	800164c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d107      	bne.n	80015e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e038      	b.n	800164e <HAL_RCC_OscConfig+0x4e2>
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40007000 	.word	0x40007000
 80015e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <HAL_RCC_OscConfig+0x4ec>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d028      	beq.n	8001648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001600:	429a      	cmp	r2, r3
 8001602:	d121      	bne.n	8001648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160e:	429a      	cmp	r2, r3
 8001610:	d11a      	bne.n	8001648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001618:	4013      	ands	r3, r2
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800161e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001620:	4293      	cmp	r3, r2
 8001622:	d111      	bne.n	8001648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162e:	085b      	lsrs	r3, r3, #1
 8001630:	3b01      	subs	r3, #1
 8001632:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001634:	429a      	cmp	r2, r3
 8001636:	d107      	bne.n	8001648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001642:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001644:	429a      	cmp	r2, r3
 8001646:	d001      	beq.n	800164c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e000      	b.n	800164e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800

0800165c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0cc      	b.n	800180a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001670:	4b68      	ldr	r3, [pc, #416]	@ (8001814 <HAL_RCC_ClockConfig+0x1b8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 030f 	and.w	r3, r3, #15
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d90c      	bls.n	8001698 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167e:	4b65      	ldr	r3, [pc, #404]	@ (8001814 <HAL_RCC_ClockConfig+0x1b8>)
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001686:	4b63      	ldr	r3, [pc, #396]	@ (8001814 <HAL_RCC_ClockConfig+0x1b8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d001      	beq.n	8001698 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e0b8      	b.n	800180a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d020      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b0:	4b59      	ldr	r3, [pc, #356]	@ (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	4a58      	ldr	r2, [pc, #352]	@ (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016c8:	4b53      	ldr	r3, [pc, #332]	@ (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	4a52      	ldr	r2, [pc, #328]	@ (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d4:	4b50      	ldr	r3, [pc, #320]	@ (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	494d      	ldr	r1, [pc, #308]	@ (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d044      	beq.n	800177c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d107      	bne.n	800170a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fa:	4b47      	ldr	r3, [pc, #284]	@ (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d119      	bne.n	800173a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e07f      	b.n	800180a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b02      	cmp	r3, #2
 8001710:	d003      	beq.n	800171a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001716:	2b03      	cmp	r3, #3
 8001718:	d107      	bne.n	800172a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171a:	4b3f      	ldr	r3, [pc, #252]	@ (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d109      	bne.n	800173a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e06f      	b.n	800180a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172a:	4b3b      	ldr	r3, [pc, #236]	@ (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e067      	b.n	800180a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800173a:	4b37      	ldr	r3, [pc, #220]	@ (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f023 0203 	bic.w	r2, r3, #3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	4934      	ldr	r1, [pc, #208]	@ (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	4313      	orrs	r3, r2
 800174a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800174c:	f7ff f968 	bl	8000a20 <HAL_GetTick>
 8001750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001752:	e00a      	b.n	800176a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001754:	f7ff f964 	bl	8000a20 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001762:	4293      	cmp	r3, r2
 8001764:	d901      	bls.n	800176a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e04f      	b.n	800180a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176a:	4b2b      	ldr	r3, [pc, #172]	@ (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 020c 	and.w	r2, r3, #12
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	429a      	cmp	r2, r3
 800177a:	d1eb      	bne.n	8001754 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800177c:	4b25      	ldr	r3, [pc, #148]	@ (8001814 <HAL_RCC_ClockConfig+0x1b8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d20c      	bcs.n	80017a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178a:	4b22      	ldr	r3, [pc, #136]	@ (8001814 <HAL_RCC_ClockConfig+0x1b8>)
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001792:	4b20      	ldr	r3, [pc, #128]	@ (8001814 <HAL_RCC_ClockConfig+0x1b8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e032      	b.n	800180a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d008      	beq.n	80017c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b0:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	4916      	ldr	r1, [pc, #88]	@ (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d009      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ce:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	490e      	ldr	r1, [pc, #56]	@ (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017e2:	f000 f821 	bl	8001828 <HAL_RCC_GetSysClockFreq>
 80017e6:	4602      	mov	r2, r0
 80017e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	490a      	ldr	r1, [pc, #40]	@ (800181c <HAL_RCC_ClockConfig+0x1c0>)
 80017f4:	5ccb      	ldrb	r3, [r1, r3]
 80017f6:	fa22 f303 	lsr.w	r3, r2, r3
 80017fa:	4a09      	ldr	r2, [pc, #36]	@ (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017fe:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <HAL_RCC_ClockConfig+0x1c8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff f8c8 	bl	8000998 <HAL_InitTick>

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023c00 	.word	0x40023c00
 8001818:	40023800 	.word	0x40023800
 800181c:	080024ac 	.word	0x080024ac
 8001820:	20000010 	.word	0x20000010
 8001824:	20000014 	.word	0x20000014

08001828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800182c:	b094      	sub	sp, #80	@ 0x50
 800182e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	647b      	str	r3, [r7, #68]	@ 0x44
 8001834:	2300      	movs	r3, #0
 8001836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001838:	2300      	movs	r3, #0
 800183a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001840:	4b79      	ldr	r3, [pc, #484]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 030c 	and.w	r3, r3, #12
 8001848:	2b08      	cmp	r3, #8
 800184a:	d00d      	beq.n	8001868 <HAL_RCC_GetSysClockFreq+0x40>
 800184c:	2b08      	cmp	r3, #8
 800184e:	f200 80e1 	bhi.w	8001a14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <HAL_RCC_GetSysClockFreq+0x34>
 8001856:	2b04      	cmp	r3, #4
 8001858:	d003      	beq.n	8001862 <HAL_RCC_GetSysClockFreq+0x3a>
 800185a:	e0db      	b.n	8001a14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800185c:	4b73      	ldr	r3, [pc, #460]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x204>)
 800185e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001860:	e0db      	b.n	8001a1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001862:	4b73      	ldr	r3, [pc, #460]	@ (8001a30 <HAL_RCC_GetSysClockFreq+0x208>)
 8001864:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001866:	e0d8      	b.n	8001a1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001868:	4b6f      	ldr	r3, [pc, #444]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0x200>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001870:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001872:	4b6d      	ldr	r3, [pc, #436]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d063      	beq.n	8001946 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800187e:	4b6a      	ldr	r3, [pc, #424]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	099b      	lsrs	r3, r3, #6
 8001884:	2200      	movs	r2, #0
 8001886:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001888:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800188a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800188c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001890:	633b      	str	r3, [r7, #48]	@ 0x30
 8001892:	2300      	movs	r3, #0
 8001894:	637b      	str	r3, [r7, #52]	@ 0x34
 8001896:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800189a:	4622      	mov	r2, r4
 800189c:	462b      	mov	r3, r5
 800189e:	f04f 0000 	mov.w	r0, #0
 80018a2:	f04f 0100 	mov.w	r1, #0
 80018a6:	0159      	lsls	r1, r3, #5
 80018a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018ac:	0150      	lsls	r0, r2, #5
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4621      	mov	r1, r4
 80018b4:	1a51      	subs	r1, r2, r1
 80018b6:	6139      	str	r1, [r7, #16]
 80018b8:	4629      	mov	r1, r5
 80018ba:	eb63 0301 	sbc.w	r3, r3, r1
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018cc:	4659      	mov	r1, fp
 80018ce:	018b      	lsls	r3, r1, #6
 80018d0:	4651      	mov	r1, sl
 80018d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018d6:	4651      	mov	r1, sl
 80018d8:	018a      	lsls	r2, r1, #6
 80018da:	4651      	mov	r1, sl
 80018dc:	ebb2 0801 	subs.w	r8, r2, r1
 80018e0:	4659      	mov	r1, fp
 80018e2:	eb63 0901 	sbc.w	r9, r3, r1
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018fa:	4690      	mov	r8, r2
 80018fc:	4699      	mov	r9, r3
 80018fe:	4623      	mov	r3, r4
 8001900:	eb18 0303 	adds.w	r3, r8, r3
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	462b      	mov	r3, r5
 8001908:	eb49 0303 	adc.w	r3, r9, r3
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800191a:	4629      	mov	r1, r5
 800191c:	024b      	lsls	r3, r1, #9
 800191e:	4621      	mov	r1, r4
 8001920:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001924:	4621      	mov	r1, r4
 8001926:	024a      	lsls	r2, r1, #9
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800192e:	2200      	movs	r2, #0
 8001930:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001932:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001934:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001938:	f7fe fc58 	bl	80001ec <__aeabi_uldivmod>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4613      	mov	r3, r2
 8001942:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001944:	e058      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001946:	4b38      	ldr	r3, [pc, #224]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	099b      	lsrs	r3, r3, #6
 800194c:	2200      	movs	r2, #0
 800194e:	4618      	mov	r0, r3
 8001950:	4611      	mov	r1, r2
 8001952:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001956:	623b      	str	r3, [r7, #32]
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24
 800195c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001960:	4642      	mov	r2, r8
 8001962:	464b      	mov	r3, r9
 8001964:	f04f 0000 	mov.w	r0, #0
 8001968:	f04f 0100 	mov.w	r1, #0
 800196c:	0159      	lsls	r1, r3, #5
 800196e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001972:	0150      	lsls	r0, r2, #5
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4641      	mov	r1, r8
 800197a:	ebb2 0a01 	subs.w	sl, r2, r1
 800197e:	4649      	mov	r1, r9
 8001980:	eb63 0b01 	sbc.w	fp, r3, r1
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001990:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001994:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001998:	ebb2 040a 	subs.w	r4, r2, sl
 800199c:	eb63 050b 	sbc.w	r5, r3, fp
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	00eb      	lsls	r3, r5, #3
 80019aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019ae:	00e2      	lsls	r2, r4, #3
 80019b0:	4614      	mov	r4, r2
 80019b2:	461d      	mov	r5, r3
 80019b4:	4643      	mov	r3, r8
 80019b6:	18e3      	adds	r3, r4, r3
 80019b8:	603b      	str	r3, [r7, #0]
 80019ba:	464b      	mov	r3, r9
 80019bc:	eb45 0303 	adc.w	r3, r5, r3
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019ce:	4629      	mov	r1, r5
 80019d0:	028b      	lsls	r3, r1, #10
 80019d2:	4621      	mov	r1, r4
 80019d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019d8:	4621      	mov	r1, r4
 80019da:	028a      	lsls	r2, r1, #10
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019e2:	2200      	movs	r2, #0
 80019e4:	61bb      	str	r3, [r7, #24]
 80019e6:	61fa      	str	r2, [r7, #28]
 80019e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019ec:	f7fe fbfe 	bl	80001ec <__aeabi_uldivmod>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4613      	mov	r3, r2
 80019f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0x200>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	0c1b      	lsrs	r3, r3, #16
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	3301      	adds	r3, #1
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001a08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a12:	e002      	b.n	8001a1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a14:	4b05      	ldr	r3, [pc, #20]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3750      	adds	r7, #80	@ 0x50
 8001a20:	46bd      	mov	sp, r7
 8001a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	00f42400 	.word	0x00f42400
 8001a30:	007a1200 	.word	0x007a1200

08001a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a38:	4b03      	ldr	r3, [pc, #12]	@ (8001a48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000010 	.word	0x20000010

08001a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a50:	f7ff fff0 	bl	8001a34 <HAL_RCC_GetHCLKFreq>
 8001a54:	4602      	mov	r2, r0
 8001a56:	4b05      	ldr	r3, [pc, #20]	@ (8001a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	0a9b      	lsrs	r3, r3, #10
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	4903      	ldr	r1, [pc, #12]	@ (8001a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a62:	5ccb      	ldrb	r3, [r1, r3]
 8001a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	080024bc 	.word	0x080024bc

08001a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a78:	f7ff ffdc 	bl	8001a34 <HAL_RCC_GetHCLKFreq>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	0b5b      	lsrs	r3, r3, #13
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	4903      	ldr	r1, [pc, #12]	@ (8001a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a8a:	5ccb      	ldrb	r3, [r1, r3]
 8001a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40023800 	.word	0x40023800
 8001a98:	080024bc 	.word	0x080024bc

08001a9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e03f      	b.n	8001b2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d106      	bne.n	8001ac8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff faa8 	bl	8001018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2224      	movs	r2, #36	@ 0x24
 8001acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ade:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f929 	bl	8001d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001af4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695a      	ldr	r2, [r3, #20]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2220      	movs	r2, #32
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b08a      	sub	sp, #40	@ 0x28
 8001b3a:	af02      	add	r7, sp, #8
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	4613      	mov	r3, r2
 8001b44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b20      	cmp	r3, #32
 8001b54:	d17c      	bne.n	8001c50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d002      	beq.n	8001b62 <HAL_UART_Transmit+0x2c>
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e075      	b.n	8001c52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_UART_Transmit+0x3e>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e06e      	b.n	8001c52 <HAL_UART_Transmit+0x11c>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2221      	movs	r2, #33	@ 0x21
 8001b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b8a:	f7fe ff49 	bl	8000a20 <HAL_GetTick>
 8001b8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	88fa      	ldrh	r2, [r7, #6]
 8001b94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	88fa      	ldrh	r2, [r7, #6]
 8001b9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ba4:	d108      	bne.n	8001bb8 <HAL_UART_Transmit+0x82>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d104      	bne.n	8001bb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	61bb      	str	r3, [r7, #24]
 8001bb6:	e003      	b.n	8001bc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8001bc8:	e02a      	b.n	8001c20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2180      	movs	r1, #128	@ 0x80
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 f840 	bl	8001c5a <UART_WaitOnFlagUntilTimeout>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e036      	b.n	8001c52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10b      	bne.n	8001c02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	61bb      	str	r3, [r7, #24]
 8001c00:	e007      	b.n	8001c12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	781a      	ldrb	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1cf      	bne.n	8001bca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2200      	movs	r2, #0
 8001c32:	2140      	movs	r1, #64	@ 0x40
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 f810 	bl	8001c5a <UART_WaitOnFlagUntilTimeout>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e006      	b.n	8001c52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2220      	movs	r2, #32
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e000      	b.n	8001c52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c50:	2302      	movs	r3, #2
  }
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3720      	adds	r7, #32
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b090      	sub	sp, #64	@ 0x40
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	4613      	mov	r3, r2
 8001c68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c6a:	e050      	b.n	8001d0e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c72:	d04c      	beq.n	8001d0e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d007      	beq.n	8001c8a <UART_WaitOnFlagUntilTimeout+0x30>
 8001c7a:	f7fe fed1 	bl	8000a20 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d241      	bcs.n	8001d0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	330c      	adds	r3, #12
 8001c90:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c94:	e853 3f00 	ldrex	r3, [r3]
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	330c      	adds	r3, #12
 8001ca8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001caa:	637a      	str	r2, [r7, #52]	@ 0x34
 8001cac:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001cb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cb2:	e841 2300 	strex	r3, r2, [r1]
 8001cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8001cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1e5      	bne.n	8001c8a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	3314      	adds	r3, #20
 8001cc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	e853 3f00 	ldrex	r3, [r3]
 8001ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	f023 0301 	bic.w	r3, r3, #1
 8001cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	3314      	adds	r3, #20
 8001cdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001cde:	623a      	str	r2, [r7, #32]
 8001ce0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ce2:	69f9      	ldr	r1, [r7, #28]
 8001ce4:	6a3a      	ldr	r2, [r7, #32]
 8001ce6:	e841 2300 	strex	r3, r2, [r1]
 8001cea:	61bb      	str	r3, [r7, #24]
   return(result);
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1e5      	bne.n	8001cbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e00f      	b.n	8001d2e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4013      	ands	r3, r2
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	bf0c      	ite	eq
 8001d1e:	2301      	moveq	r3, #1
 8001d20:	2300      	movne	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d09f      	beq.n	8001c6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3740      	adds	r7, #64	@ 0x40
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d3c:	b0c0      	sub	sp, #256	@ 0x100
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d54:	68d9      	ldr	r1, [r3, #12]
 8001d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	ea40 0301 	orr.w	r3, r0, r1
 8001d60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	431a      	orrs	r2, r3
 8001d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001d90:	f021 010c 	bic.w	r1, r1, #12
 8001d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001d9e:	430b      	orrs	r3, r1
 8001da0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001db2:	6999      	ldr	r1, [r3, #24]
 8001db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	ea40 0301 	orr.w	r3, r0, r1
 8001dbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	4b8f      	ldr	r3, [pc, #572]	@ (8002004 <UART_SetConfig+0x2cc>)
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d005      	beq.n	8001dd8 <UART_SetConfig+0xa0>
 8001dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	4b8d      	ldr	r3, [pc, #564]	@ (8002008 <UART_SetConfig+0x2d0>)
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d104      	bne.n	8001de2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001dd8:	f7ff fe4c 	bl	8001a74 <HAL_RCC_GetPCLK2Freq>
 8001ddc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001de0:	e003      	b.n	8001dea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001de2:	f7ff fe33 	bl	8001a4c <HAL_RCC_GetPCLK1Freq>
 8001de6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001df4:	f040 810c 	bne.w	8002010 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001e02:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001e06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001e0a:	4622      	mov	r2, r4
 8001e0c:	462b      	mov	r3, r5
 8001e0e:	1891      	adds	r1, r2, r2
 8001e10:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001e12:	415b      	adcs	r3, r3
 8001e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	eb12 0801 	adds.w	r8, r2, r1
 8001e20:	4629      	mov	r1, r5
 8001e22:	eb43 0901 	adc.w	r9, r3, r1
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e3a:	4690      	mov	r8, r2
 8001e3c:	4699      	mov	r9, r3
 8001e3e:	4623      	mov	r3, r4
 8001e40:	eb18 0303 	adds.w	r3, r8, r3
 8001e44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001e48:	462b      	mov	r3, r5
 8001e4a:	eb49 0303 	adc.w	r3, r9, r3
 8001e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001e5e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001e66:	460b      	mov	r3, r1
 8001e68:	18db      	adds	r3, r3, r3
 8001e6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	eb42 0303 	adc.w	r3, r2, r3
 8001e72:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001e7c:	f7fe f9b6 	bl	80001ec <__aeabi_uldivmod>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4b61      	ldr	r3, [pc, #388]	@ (800200c <UART_SetConfig+0x2d4>)
 8001e86:	fba3 2302 	umull	r2, r3, r3, r2
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	011c      	lsls	r4, r3, #4
 8001e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e92:	2200      	movs	r2, #0
 8001e94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e98:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001e9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001ea0:	4642      	mov	r2, r8
 8001ea2:	464b      	mov	r3, r9
 8001ea4:	1891      	adds	r1, r2, r2
 8001ea6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001ea8:	415b      	adcs	r3, r3
 8001eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001eac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001eb0:	4641      	mov	r1, r8
 8001eb2:	eb12 0a01 	adds.w	sl, r2, r1
 8001eb6:	4649      	mov	r1, r9
 8001eb8:	eb43 0b01 	adc.w	fp, r3, r1
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ec8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ecc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ed0:	4692      	mov	sl, r2
 8001ed2:	469b      	mov	fp, r3
 8001ed4:	4643      	mov	r3, r8
 8001ed6:	eb1a 0303 	adds.w	r3, sl, r3
 8001eda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001ede:	464b      	mov	r3, r9
 8001ee0:	eb4b 0303 	adc.w	r3, fp, r3
 8001ee4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001ef4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001ef8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001efc:	460b      	mov	r3, r1
 8001efe:	18db      	adds	r3, r3, r3
 8001f00:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f02:	4613      	mov	r3, r2
 8001f04:	eb42 0303 	adc.w	r3, r2, r3
 8001f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001f12:	f7fe f96b 	bl	80001ec <__aeabi_uldivmod>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4b3b      	ldr	r3, [pc, #236]	@ (800200c <UART_SetConfig+0x2d4>)
 8001f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8001f22:	095b      	lsrs	r3, r3, #5
 8001f24:	2264      	movs	r2, #100	@ 0x64
 8001f26:	fb02 f303 	mul.w	r3, r2, r3
 8001f2a:	1acb      	subs	r3, r1, r3
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001f32:	4b36      	ldr	r3, [pc, #216]	@ (800200c <UART_SetConfig+0x2d4>)
 8001f34:	fba3 2302 	umull	r2, r3, r3, r2
 8001f38:	095b      	lsrs	r3, r3, #5
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001f40:	441c      	add	r4, r3
 8001f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f46:	2200      	movs	r2, #0
 8001f48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f4c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001f50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001f54:	4642      	mov	r2, r8
 8001f56:	464b      	mov	r3, r9
 8001f58:	1891      	adds	r1, r2, r2
 8001f5a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f5c:	415b      	adcs	r3, r3
 8001f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001f64:	4641      	mov	r1, r8
 8001f66:	1851      	adds	r1, r2, r1
 8001f68:	6339      	str	r1, [r7, #48]	@ 0x30
 8001f6a:	4649      	mov	r1, r9
 8001f6c:	414b      	adcs	r3, r1
 8001f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001f7c:	4659      	mov	r1, fp
 8001f7e:	00cb      	lsls	r3, r1, #3
 8001f80:	4651      	mov	r1, sl
 8001f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f86:	4651      	mov	r1, sl
 8001f88:	00ca      	lsls	r2, r1, #3
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4642      	mov	r2, r8
 8001f92:	189b      	adds	r3, r3, r2
 8001f94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001f98:	464b      	mov	r3, r9
 8001f9a:	460a      	mov	r2, r1
 8001f9c:	eb42 0303 	adc.w	r3, r2, r3
 8001fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001fb0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001fb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001fb8:	460b      	mov	r3, r1
 8001fba:	18db      	adds	r3, r3, r3
 8001fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	eb42 0303 	adc.w	r3, r2, r3
 8001fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001fca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001fce:	f7fe f90d 	bl	80001ec <__aeabi_uldivmod>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800200c <UART_SetConfig+0x2d4>)
 8001fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8001fdc:	095b      	lsrs	r3, r3, #5
 8001fde:	2164      	movs	r1, #100	@ 0x64
 8001fe0:	fb01 f303 	mul.w	r3, r1, r3
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	3332      	adds	r3, #50	@ 0x32
 8001fea:	4a08      	ldr	r2, [pc, #32]	@ (800200c <UART_SetConfig+0x2d4>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	095b      	lsrs	r3, r3, #5
 8001ff2:	f003 0207 	and.w	r2, r3, #7
 8001ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4422      	add	r2, r4
 8001ffe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002000:	e106      	b.n	8002210 <UART_SetConfig+0x4d8>
 8002002:	bf00      	nop
 8002004:	40011000 	.word	0x40011000
 8002008:	40011400 	.word	0x40011400
 800200c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002014:	2200      	movs	r2, #0
 8002016:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800201a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800201e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002022:	4642      	mov	r2, r8
 8002024:	464b      	mov	r3, r9
 8002026:	1891      	adds	r1, r2, r2
 8002028:	6239      	str	r1, [r7, #32]
 800202a:	415b      	adcs	r3, r3
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
 800202e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002032:	4641      	mov	r1, r8
 8002034:	1854      	adds	r4, r2, r1
 8002036:	4649      	mov	r1, r9
 8002038:	eb43 0501 	adc.w	r5, r3, r1
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	00eb      	lsls	r3, r5, #3
 8002046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800204a:	00e2      	lsls	r2, r4, #3
 800204c:	4614      	mov	r4, r2
 800204e:	461d      	mov	r5, r3
 8002050:	4643      	mov	r3, r8
 8002052:	18e3      	adds	r3, r4, r3
 8002054:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002058:	464b      	mov	r3, r9
 800205a:	eb45 0303 	adc.w	r3, r5, r3
 800205e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800206e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800207e:	4629      	mov	r1, r5
 8002080:	008b      	lsls	r3, r1, #2
 8002082:	4621      	mov	r1, r4
 8002084:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002088:	4621      	mov	r1, r4
 800208a:	008a      	lsls	r2, r1, #2
 800208c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002090:	f7fe f8ac 	bl	80001ec <__aeabi_uldivmod>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4b60      	ldr	r3, [pc, #384]	@ (800221c <UART_SetConfig+0x4e4>)
 800209a:	fba3 2302 	umull	r2, r3, r3, r2
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	011c      	lsls	r4, r3, #4
 80020a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020a6:	2200      	movs	r2, #0
 80020a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80020ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80020b4:	4642      	mov	r2, r8
 80020b6:	464b      	mov	r3, r9
 80020b8:	1891      	adds	r1, r2, r2
 80020ba:	61b9      	str	r1, [r7, #24]
 80020bc:	415b      	adcs	r3, r3
 80020be:	61fb      	str	r3, [r7, #28]
 80020c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020c4:	4641      	mov	r1, r8
 80020c6:	1851      	adds	r1, r2, r1
 80020c8:	6139      	str	r1, [r7, #16]
 80020ca:	4649      	mov	r1, r9
 80020cc:	414b      	adcs	r3, r1
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020dc:	4659      	mov	r1, fp
 80020de:	00cb      	lsls	r3, r1, #3
 80020e0:	4651      	mov	r1, sl
 80020e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020e6:	4651      	mov	r1, sl
 80020e8:	00ca      	lsls	r2, r1, #3
 80020ea:	4610      	mov	r0, r2
 80020ec:	4619      	mov	r1, r3
 80020ee:	4603      	mov	r3, r0
 80020f0:	4642      	mov	r2, r8
 80020f2:	189b      	adds	r3, r3, r2
 80020f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80020f8:	464b      	mov	r3, r9
 80020fa:	460a      	mov	r2, r1
 80020fc:	eb42 0303 	adc.w	r3, r2, r3
 8002100:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800210e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800211c:	4649      	mov	r1, r9
 800211e:	008b      	lsls	r3, r1, #2
 8002120:	4641      	mov	r1, r8
 8002122:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002126:	4641      	mov	r1, r8
 8002128:	008a      	lsls	r2, r1, #2
 800212a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800212e:	f7fe f85d 	bl	80001ec <__aeabi_uldivmod>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4611      	mov	r1, r2
 8002138:	4b38      	ldr	r3, [pc, #224]	@ (800221c <UART_SetConfig+0x4e4>)
 800213a:	fba3 2301 	umull	r2, r3, r3, r1
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	2264      	movs	r2, #100	@ 0x64
 8002142:	fb02 f303 	mul.w	r3, r2, r3
 8002146:	1acb      	subs	r3, r1, r3
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	3332      	adds	r3, #50	@ 0x32
 800214c:	4a33      	ldr	r2, [pc, #204]	@ (800221c <UART_SetConfig+0x4e4>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002158:	441c      	add	r4, r3
 800215a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800215e:	2200      	movs	r2, #0
 8002160:	673b      	str	r3, [r7, #112]	@ 0x70
 8002162:	677a      	str	r2, [r7, #116]	@ 0x74
 8002164:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002168:	4642      	mov	r2, r8
 800216a:	464b      	mov	r3, r9
 800216c:	1891      	adds	r1, r2, r2
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	415b      	adcs	r3, r3
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002178:	4641      	mov	r1, r8
 800217a:	1851      	adds	r1, r2, r1
 800217c:	6039      	str	r1, [r7, #0]
 800217e:	4649      	mov	r1, r9
 8002180:	414b      	adcs	r3, r1
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002190:	4659      	mov	r1, fp
 8002192:	00cb      	lsls	r3, r1, #3
 8002194:	4651      	mov	r1, sl
 8002196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800219a:	4651      	mov	r1, sl
 800219c:	00ca      	lsls	r2, r1, #3
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	4603      	mov	r3, r0
 80021a4:	4642      	mov	r2, r8
 80021a6:	189b      	adds	r3, r3, r2
 80021a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021aa:	464b      	mov	r3, r9
 80021ac:	460a      	mov	r2, r1
 80021ae:	eb42 0303 	adc.w	r3, r2, r3
 80021b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80021b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80021be:	667a      	str	r2, [r7, #100]	@ 0x64
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80021cc:	4649      	mov	r1, r9
 80021ce:	008b      	lsls	r3, r1, #2
 80021d0:	4641      	mov	r1, r8
 80021d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021d6:	4641      	mov	r1, r8
 80021d8:	008a      	lsls	r2, r1, #2
 80021da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80021de:	f7fe f805 	bl	80001ec <__aeabi_uldivmod>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4b0d      	ldr	r3, [pc, #52]	@ (800221c <UART_SetConfig+0x4e4>)
 80021e8:	fba3 1302 	umull	r1, r3, r3, r2
 80021ec:	095b      	lsrs	r3, r3, #5
 80021ee:	2164      	movs	r1, #100	@ 0x64
 80021f0:	fb01 f303 	mul.w	r3, r1, r3
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	3332      	adds	r3, #50	@ 0x32
 80021fa:	4a08      	ldr	r2, [pc, #32]	@ (800221c <UART_SetConfig+0x4e4>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	095b      	lsrs	r3, r3, #5
 8002202:	f003 020f 	and.w	r2, r3, #15
 8002206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4422      	add	r2, r4
 800220e:	609a      	str	r2, [r3, #8]
}
 8002210:	bf00      	nop
 8002212:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002216:	46bd      	mov	sp, r7
 8002218:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800221c:	51eb851f 	.word	0x51eb851f

08002220 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8002224:	f7fe fb9c 	bl	8000960 <HAL_Init>

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 8002228:	f000 f838 	bl	800229c <SystemClock_Config>

  /* Initialize BSP PB for BUTTON_USER */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 800222c:	2100      	movs	r1, #0
 800222e:	2000      	movs	r0, #0
 8002230:	f7fe fac2 	bl	80007b8 <BSP_PB_Init>

  /* Initialize BSP Led for LED2 and LED3*/
  BSP_LED_Init(LED2);
 8002234:	2001      	movs	r0, #1
 8002236:	f7fe fa55 	bl	80006e4 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 800223a:	2002      	movs	r0, #2
 800223c:	f7fe fa52 	bl	80006e4 <BSP_LED_Init>

  /*Initialize UART*/
  uartInit();
 8002240:	f7fe f9f8 	bl	8000634 <uartInit>

  /*Initialize FSM*/
  debounceFSM_init();
 8002244:	f7fe f94a 	bl	80004dc <debounceFSM_init>

  delayInit(&ledDelay, 100);
 8002248:	2164      	movs	r1, #100	@ 0x64
 800224a:	4811      	ldr	r0, [pc, #68]	@ (8002290 <main+0x70>)
 800224c:	f7fe f9d4 	bl	80005f8 <delayInit>

  /* Infinite loop */
  while (1)
  {
	  // Leer el estado actual del botón
	  debounceFSM_isButtonDown();
 8002250:	f7fe f956 	bl	8000500 <debounceFSM_isButtonDown>

	  // Actualizar la FSM de debounce con el estado actual del botón
	  debounceFSM_update(BSP_PB_GetState(BUTTON_USER));
 8002254:	2000      	movs	r0, #0
 8002256:	f7fe fb05 	bl	8000864 <BSP_PB_GetState>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf14      	ite	ne
 8002260:	2301      	movne	r3, #1
 8002262:	2300      	moveq	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe f96e 	bl	8000548 <debounceFSM_update>

	  // Verificar flancos ascendentes y descendentes
	  if (debounceFSM_readKey()) {
 800226c:	f7fe f958 	bl	8000520 <debounceFSM_readKey>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0ec      	beq.n	8002250 <main+0x30>

		  if (debounceFSM_isButtonDown()) {
 8002276:	f7fe f943 	bl	8000500 <debounceFSM_isButtonDown>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <main+0x68>

			  uartSendString((uint8_t *)"Flanco ascendente detectado\r\n");
 8002280:	4804      	ldr	r0, [pc, #16]	@ (8002294 <main+0x74>)
 8002282:	f7fe fa09 	bl	8000698 <uartSendString>
 8002286:	e7e3      	b.n	8002250 <main+0x30>

		  } else {

	          uartSendString((uint8_t *)"Flanco descendente detectado\r\n");
 8002288:	4803      	ldr	r0, [pc, #12]	@ (8002298 <main+0x78>)
 800228a:	f7fe fa05 	bl	8000698 <uartSendString>
	  debounceFSM_isButtonDown();
 800228e:	e7df      	b.n	8002250 <main+0x30>
 8002290:	20000084 	.word	0x20000084
 8002294:	08002464 	.word	0x08002464
 8002298:	08002484 	.word	0x08002484

0800229c <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b094      	sub	sp, #80	@ 0x50
 80022a0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002358 <SystemClock_Config+0xbc>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	4a2b      	ldr	r2, [pc, #172]	@ (8002358 <SystemClock_Config+0xbc>)
 80022ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022b2:	4b29      	ldr	r3, [pc, #164]	@ (8002358 <SystemClock_Config+0xbc>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022be:	2300      	movs	r3, #0
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	4b26      	ldr	r3, [pc, #152]	@ (800235c <SystemClock_Config+0xc0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a25      	ldr	r2, [pc, #148]	@ (800235c <SystemClock_Config+0xc0>)
 80022c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	4b23      	ldr	r3, [pc, #140]	@ (800235c <SystemClock_Config+0xc0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022da:	2301      	movs	r3, #1
 80022dc:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80022de:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80022e2:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022e4:	2302      	movs	r3, #2
 80022e6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022e8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80022ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022ee:	2308      	movs	r3, #8
 80022f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80022f2:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80022f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022f8:	2302      	movs	r3, #2
 80022fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80022fc:	2307      	movs	r3, #7
 80022fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe ff31 	bl	800116c <HAL_RCC_OscConfig>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8002310:	f000 f826 	bl	8002360 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002314:	f7fe feda 	bl	80010cc <HAL_PWREx_EnableOverDrive>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 800231e:	f000 f81f 	bl	8002360 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002322:	230f      	movs	r3, #15
 8002324:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002326:	2302      	movs	r3, #2
 8002328:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800232a:	2300      	movs	r3, #0
 800232c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 800232e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002332:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8002334:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002338:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800233a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800233e:	2105      	movs	r1, #5
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff f98b 	bl	800165c <HAL_RCC_ClockConfig>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 800234c:	f000 f808 	bl	8002360 <Error_Handler>
  }
}
 8002350:	bf00      	nop
 8002352:	3750      	adds	r7, #80	@ 0x50
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40023800 	.word	0x40023800
 800235c:	40007000 	.word	0x40007000

08002360 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8002364:	2001      	movs	r0, #1
 8002366:	f7fe fa0d 	bl	8000784 <BSP_LED_On>
  while (1)
 800236a:	bf00      	nop
 800236c:	e7fd      	b.n	800236a <Error_Handler+0xa>
	...

08002370 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002370:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023a8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002374:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002376:	e003      	b.n	8002380 <LoopCopyDataInit>

08002378 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002378:	4b0c      	ldr	r3, [pc, #48]	@ (80023ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800237a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800237c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800237e:	3104      	adds	r1, #4

08002380 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002380:	480b      	ldr	r0, [pc, #44]	@ (80023b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002382:	4b0c      	ldr	r3, [pc, #48]	@ (80023b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002384:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002386:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002388:	d3f6      	bcc.n	8002378 <CopyDataInit>
  ldr  r2, =_sbss
 800238a:	4a0b      	ldr	r2, [pc, #44]	@ (80023b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800238c:	e002      	b.n	8002394 <LoopFillZerobss>

0800238e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800238e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002390:	f842 3b04 	str.w	r3, [r2], #4

08002394 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002394:	4b09      	ldr	r3, [pc, #36]	@ (80023bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002396:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002398:	d3f9      	bcc.n	800238e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800239a:	f7fe fa79 	bl	8000890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800239e:	f000 f811 	bl	80023c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023a2:	f7ff ff3d 	bl	8002220 <main>
  bx  lr    
 80023a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80023a8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80023ac:	080024d4 	.word	0x080024d4
  ldr  r0, =_sdata
 80023b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023b4:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 80023b8:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 80023bc:	20000090 	.word	0x20000090

080023c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023c0:	e7fe      	b.n	80023c0 <ADC_IRQHandler>
	...

080023c4 <__libc_init_array>:
 80023c4:	b570      	push	{r4, r5, r6, lr}
 80023c6:	4d0d      	ldr	r5, [pc, #52]	@ (80023fc <__libc_init_array+0x38>)
 80023c8:	4c0d      	ldr	r4, [pc, #52]	@ (8002400 <__libc_init_array+0x3c>)
 80023ca:	1b64      	subs	r4, r4, r5
 80023cc:	10a4      	asrs	r4, r4, #2
 80023ce:	2600      	movs	r6, #0
 80023d0:	42a6      	cmp	r6, r4
 80023d2:	d109      	bne.n	80023e8 <__libc_init_array+0x24>
 80023d4:	4d0b      	ldr	r5, [pc, #44]	@ (8002404 <__libc_init_array+0x40>)
 80023d6:	4c0c      	ldr	r4, [pc, #48]	@ (8002408 <__libc_init_array+0x44>)
 80023d8:	f000 f818 	bl	800240c <_init>
 80023dc:	1b64      	subs	r4, r4, r5
 80023de:	10a4      	asrs	r4, r4, #2
 80023e0:	2600      	movs	r6, #0
 80023e2:	42a6      	cmp	r6, r4
 80023e4:	d105      	bne.n	80023f2 <__libc_init_array+0x2e>
 80023e6:	bd70      	pop	{r4, r5, r6, pc}
 80023e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80023ec:	4798      	blx	r3
 80023ee:	3601      	adds	r6, #1
 80023f0:	e7ee      	b.n	80023d0 <__libc_init_array+0xc>
 80023f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80023f6:	4798      	blx	r3
 80023f8:	3601      	adds	r6, #1
 80023fa:	e7f2      	b.n	80023e2 <__libc_init_array+0x1e>
 80023fc:	080024cc 	.word	0x080024cc
 8002400:	080024cc 	.word	0x080024cc
 8002404:	080024cc 	.word	0x080024cc
 8002408:	080024d0 	.word	0x080024d0

0800240c <_init>:
 800240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240e:	bf00      	nop
 8002410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002412:	bc08      	pop	{r3}
 8002414:	469e      	mov	lr, r3
 8002416:	4770      	bx	lr

08002418 <_fini>:
 8002418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800241a:	bf00      	nop
 800241c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800241e:	bc08      	pop	{r3}
 8002420:	469e      	mov	lr, r3
 8002422:	4770      	bx	lr
