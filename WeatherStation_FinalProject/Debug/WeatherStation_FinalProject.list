
WeatherStation_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037d8  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003984  08003984  00004984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800399c  0800399c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  0800399c  0800399c  0000499c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039a4  080039a4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039a4  080039a4  000049a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039a8  080039a8  000049a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080039ac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000110  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000011c  2000011c  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009b33  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bda  00000000  00000000  0000eb6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c8  00000000  00000000  00010750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000779  00000000  00000000  00011118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001e85  00000000  00000000  00011891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cb6e  00000000  00000000  00013716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3fa5  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f4229  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002888  00000000  00000000  000f426c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000ba  00000000  00000000  000f6af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800396c 	.word	0x0800396c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	0800396c 	.word	0x0800396c

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	@ 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__aeabi_d2uiz>:
 8000988:	004a      	lsls	r2, r1, #1
 800098a:	d211      	bcs.n	80009b0 <__aeabi_d2uiz+0x28>
 800098c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000990:	d211      	bcs.n	80009b6 <__aeabi_d2uiz+0x2e>
 8000992:	d50d      	bpl.n	80009b0 <__aeabi_d2uiz+0x28>
 8000994:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000998:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800099c:	d40e      	bmi.n	80009bc <__aeabi_d2uiz+0x34>
 800099e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009aa:	fa23 f002 	lsr.w	r0, r3, r2
 80009ae:	4770      	bx	lr
 80009b0:	f04f 0000 	mov.w	r0, #0
 80009b4:	4770      	bx	lr
 80009b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ba:	d102      	bne.n	80009c2 <__aeabi_d2uiz+0x3a>
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009c0:	4770      	bx	lr
 80009c2:	f04f 0000 	mov.w	r0, #0
 80009c6:	4770      	bx	lr

080009c8 <__aeabi_uldivmod>:
 80009c8:	b953      	cbnz	r3, 80009e0 <__aeabi_uldivmod+0x18>
 80009ca:	b94a      	cbnz	r2, 80009e0 <__aeabi_uldivmod+0x18>
 80009cc:	2900      	cmp	r1, #0
 80009ce:	bf08      	it	eq
 80009d0:	2800      	cmpeq	r0, #0
 80009d2:	bf1c      	itt	ne
 80009d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80009d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80009dc:	f000 b96a 	b.w	8000cb4 <__aeabi_idiv0>
 80009e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e8:	f000 f806 	bl	80009f8 <__udivmoddi4>
 80009ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f4:	b004      	add	sp, #16
 80009f6:	4770      	bx	lr

080009f8 <__udivmoddi4>:
 80009f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009fc:	9d08      	ldr	r5, [sp, #32]
 80009fe:	460c      	mov	r4, r1
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d14e      	bne.n	8000aa2 <__udivmoddi4+0xaa>
 8000a04:	4694      	mov	ip, r2
 8000a06:	458c      	cmp	ip, r1
 8000a08:	4686      	mov	lr, r0
 8000a0a:	fab2 f282 	clz	r2, r2
 8000a0e:	d962      	bls.n	8000ad6 <__udivmoddi4+0xde>
 8000a10:	b14a      	cbz	r2, 8000a26 <__udivmoddi4+0x2e>
 8000a12:	f1c2 0320 	rsb	r3, r2, #32
 8000a16:	4091      	lsls	r1, r2
 8000a18:	fa20 f303 	lsr.w	r3, r0, r3
 8000a1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a20:	4319      	orrs	r1, r3
 8000a22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a2a:	fa1f f68c 	uxth.w	r6, ip
 8000a2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a36:	fb07 1114 	mls	r1, r7, r4, r1
 8000a3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a3e:	fb04 f106 	mul.w	r1, r4, r6
 8000a42:	4299      	cmp	r1, r3
 8000a44:	d90a      	bls.n	8000a5c <__udivmoddi4+0x64>
 8000a46:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a4e:	f080 8112 	bcs.w	8000c76 <__udivmoddi4+0x27e>
 8000a52:	4299      	cmp	r1, r3
 8000a54:	f240 810f 	bls.w	8000c76 <__udivmoddi4+0x27e>
 8000a58:	3c02      	subs	r4, #2
 8000a5a:	4463      	add	r3, ip
 8000a5c:	1a59      	subs	r1, r3, r1
 8000a5e:	fa1f f38e 	uxth.w	r3, lr
 8000a62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a66:	fb07 1110 	mls	r1, r7, r0, r1
 8000a6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a6e:	fb00 f606 	mul.w	r6, r0, r6
 8000a72:	429e      	cmp	r6, r3
 8000a74:	d90a      	bls.n	8000a8c <__udivmoddi4+0x94>
 8000a76:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000a7e:	f080 80fc 	bcs.w	8000c7a <__udivmoddi4+0x282>
 8000a82:	429e      	cmp	r6, r3
 8000a84:	f240 80f9 	bls.w	8000c7a <__udivmoddi4+0x282>
 8000a88:	4463      	add	r3, ip
 8000a8a:	3802      	subs	r0, #2
 8000a8c:	1b9b      	subs	r3, r3, r6
 8000a8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a92:	2100      	movs	r1, #0
 8000a94:	b11d      	cbz	r5, 8000a9e <__udivmoddi4+0xa6>
 8000a96:	40d3      	lsrs	r3, r2
 8000a98:	2200      	movs	r2, #0
 8000a9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa2:	428b      	cmp	r3, r1
 8000aa4:	d905      	bls.n	8000ab2 <__udivmoddi4+0xba>
 8000aa6:	b10d      	cbz	r5, 8000aac <__udivmoddi4+0xb4>
 8000aa8:	e9c5 0100 	strd	r0, r1, [r5]
 8000aac:	2100      	movs	r1, #0
 8000aae:	4608      	mov	r0, r1
 8000ab0:	e7f5      	b.n	8000a9e <__udivmoddi4+0xa6>
 8000ab2:	fab3 f183 	clz	r1, r3
 8000ab6:	2900      	cmp	r1, #0
 8000ab8:	d146      	bne.n	8000b48 <__udivmoddi4+0x150>
 8000aba:	42a3      	cmp	r3, r4
 8000abc:	d302      	bcc.n	8000ac4 <__udivmoddi4+0xcc>
 8000abe:	4290      	cmp	r0, r2
 8000ac0:	f0c0 80f0 	bcc.w	8000ca4 <__udivmoddi4+0x2ac>
 8000ac4:	1a86      	subs	r6, r0, r2
 8000ac6:	eb64 0303 	sbc.w	r3, r4, r3
 8000aca:	2001      	movs	r0, #1
 8000acc:	2d00      	cmp	r5, #0
 8000ace:	d0e6      	beq.n	8000a9e <__udivmoddi4+0xa6>
 8000ad0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ad4:	e7e3      	b.n	8000a9e <__udivmoddi4+0xa6>
 8000ad6:	2a00      	cmp	r2, #0
 8000ad8:	f040 8090 	bne.w	8000bfc <__udivmoddi4+0x204>
 8000adc:	eba1 040c 	sub.w	r4, r1, ip
 8000ae0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae4:	fa1f f78c 	uxth.w	r7, ip
 8000ae8:	2101      	movs	r1, #1
 8000aea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000aee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000af2:	fb08 4416 	mls	r4, r8, r6, r4
 8000af6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000afa:	fb07 f006 	mul.w	r0, r7, r6
 8000afe:	4298      	cmp	r0, r3
 8000b00:	d908      	bls.n	8000b14 <__udivmoddi4+0x11c>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b0a:	d202      	bcs.n	8000b12 <__udivmoddi4+0x11a>
 8000b0c:	4298      	cmp	r0, r3
 8000b0e:	f200 80cd 	bhi.w	8000cac <__udivmoddi4+0x2b4>
 8000b12:	4626      	mov	r6, r4
 8000b14:	1a1c      	subs	r4, r3, r0
 8000b16:	fa1f f38e 	uxth.w	r3, lr
 8000b1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000b22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b26:	fb00 f707 	mul.w	r7, r0, r7
 8000b2a:	429f      	cmp	r7, r3
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0x148>
 8000b2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b32:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x146>
 8000b38:	429f      	cmp	r7, r3
 8000b3a:	f200 80b0 	bhi.w	8000c9e <__udivmoddi4+0x2a6>
 8000b3e:	4620      	mov	r0, r4
 8000b40:	1bdb      	subs	r3, r3, r7
 8000b42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b46:	e7a5      	b.n	8000a94 <__udivmoddi4+0x9c>
 8000b48:	f1c1 0620 	rsb	r6, r1, #32
 8000b4c:	408b      	lsls	r3, r1
 8000b4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000b52:	431f      	orrs	r7, r3
 8000b54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b58:	fa04 f301 	lsl.w	r3, r4, r1
 8000b5c:	ea43 030c 	orr.w	r3, r3, ip
 8000b60:	40f4      	lsrs	r4, r6
 8000b62:	fa00 f801 	lsl.w	r8, r0, r1
 8000b66:	0c38      	lsrs	r0, r7, #16
 8000b68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000b70:	fa1f fc87 	uxth.w	ip, r7
 8000b74:	fb00 441e 	mls	r4, r0, lr, r4
 8000b78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000b80:	45a1      	cmp	r9, r4
 8000b82:	fa02 f201 	lsl.w	r2, r2, r1
 8000b86:	d90a      	bls.n	8000b9e <__udivmoddi4+0x1a6>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000b8e:	f080 8084 	bcs.w	8000c9a <__udivmoddi4+0x2a2>
 8000b92:	45a1      	cmp	r9, r4
 8000b94:	f240 8081 	bls.w	8000c9a <__udivmoddi4+0x2a2>
 8000b98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b9c:	443c      	add	r4, r7
 8000b9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ba2:	fa1f f983 	uxth.w	r9, r3
 8000ba6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000baa:	fb00 4413 	mls	r4, r0, r3, r4
 8000bae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bb6:	45a4      	cmp	ip, r4
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x1d2>
 8000bba:	193c      	adds	r4, r7, r4
 8000bbc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000bc0:	d267      	bcs.n	8000c92 <__udivmoddi4+0x29a>
 8000bc2:	45a4      	cmp	ip, r4
 8000bc4:	d965      	bls.n	8000c92 <__udivmoddi4+0x29a>
 8000bc6:	3b02      	subs	r3, #2
 8000bc8:	443c      	add	r4, r7
 8000bca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bce:	fba0 9302 	umull	r9, r3, r0, r2
 8000bd2:	eba4 040c 	sub.w	r4, r4, ip
 8000bd6:	429c      	cmp	r4, r3
 8000bd8:	46ce      	mov	lr, r9
 8000bda:	469c      	mov	ip, r3
 8000bdc:	d351      	bcc.n	8000c82 <__udivmoddi4+0x28a>
 8000bde:	d04e      	beq.n	8000c7e <__udivmoddi4+0x286>
 8000be0:	b155      	cbz	r5, 8000bf8 <__udivmoddi4+0x200>
 8000be2:	ebb8 030e 	subs.w	r3, r8, lr
 8000be6:	eb64 040c 	sbc.w	r4, r4, ip
 8000bea:	fa04 f606 	lsl.w	r6, r4, r6
 8000bee:	40cb      	lsrs	r3, r1
 8000bf0:	431e      	orrs	r6, r3
 8000bf2:	40cc      	lsrs	r4, r1
 8000bf4:	e9c5 6400 	strd	r6, r4, [r5]
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	e750      	b.n	8000a9e <__udivmoddi4+0xa6>
 8000bfc:	f1c2 0320 	rsb	r3, r2, #32
 8000c00:	fa20 f103 	lsr.w	r1, r0, r3
 8000c04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c08:	fa24 f303 	lsr.w	r3, r4, r3
 8000c0c:	4094      	lsls	r4, r2
 8000c0e:	430c      	orrs	r4, r1
 8000c10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c18:	fa1f f78c 	uxth.w	r7, ip
 8000c1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c20:	fb08 3110 	mls	r1, r8, r0, r3
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2a:	fb00 f107 	mul.w	r1, r0, r7
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x24c>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c3a:	d22c      	bcs.n	8000c96 <__udivmoddi4+0x29e>
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	d92a      	bls.n	8000c96 <__udivmoddi4+0x29e>
 8000c40:	3802      	subs	r0, #2
 8000c42:	4463      	add	r3, ip
 8000c44:	1a5b      	subs	r3, r3, r1
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000c50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c54:	fb01 f307 	mul.w	r3, r1, r7
 8000c58:	42a3      	cmp	r3, r4
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x276>
 8000c5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c60:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000c64:	d213      	bcs.n	8000c8e <__udivmoddi4+0x296>
 8000c66:	42a3      	cmp	r3, r4
 8000c68:	d911      	bls.n	8000c8e <__udivmoddi4+0x296>
 8000c6a:	3902      	subs	r1, #2
 8000c6c:	4464      	add	r4, ip
 8000c6e:	1ae4      	subs	r4, r4, r3
 8000c70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c74:	e739      	b.n	8000aea <__udivmoddi4+0xf2>
 8000c76:	4604      	mov	r4, r0
 8000c78:	e6f0      	b.n	8000a5c <__udivmoddi4+0x64>
 8000c7a:	4608      	mov	r0, r1
 8000c7c:	e706      	b.n	8000a8c <__udivmoddi4+0x94>
 8000c7e:	45c8      	cmp	r8, r9
 8000c80:	d2ae      	bcs.n	8000be0 <__udivmoddi4+0x1e8>
 8000c82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c8a:	3801      	subs	r0, #1
 8000c8c:	e7a8      	b.n	8000be0 <__udivmoddi4+0x1e8>
 8000c8e:	4631      	mov	r1, r6
 8000c90:	e7ed      	b.n	8000c6e <__udivmoddi4+0x276>
 8000c92:	4603      	mov	r3, r0
 8000c94:	e799      	b.n	8000bca <__udivmoddi4+0x1d2>
 8000c96:	4630      	mov	r0, r6
 8000c98:	e7d4      	b.n	8000c44 <__udivmoddi4+0x24c>
 8000c9a:	46d6      	mov	lr, sl
 8000c9c:	e77f      	b.n	8000b9e <__udivmoddi4+0x1a6>
 8000c9e:	4463      	add	r3, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	e74d      	b.n	8000b40 <__udivmoddi4+0x148>
 8000ca4:	4606      	mov	r6, r0
 8000ca6:	4623      	mov	r3, r4
 8000ca8:	4608      	mov	r0, r1
 8000caa:	e70f      	b.n	8000acc <__udivmoddi4+0xd4>
 8000cac:	3e02      	subs	r6, #2
 8000cae:	4463      	add	r3, ip
 8000cb0:	e730      	b.n	8000b14 <__udivmoddi4+0x11c>
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_idiv0>:
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cbe:	f000 ff0d 	bl	8001adc <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000cc2:	f000 f82f 	bl	8000d24 <SystemClock_Config>

	/* Initialize all configured peripherals */

	// GPIO BME680 & Relay Initialization
	API_BME680_HAL_GPIO_Init();
 8000cc6:	f000 fe01 	bl	80018cc <API_BME680_HAL_GPIO_Init>
	// SPI & I2C Initialization
	API_BME680_HAL_SPI_Init();
 8000cca:	f000 fe51 	bl	8001970 <API_BME680_HAL_SPI_Init>
	API_display_HAL_I2C_Init();
 8000cce:	f000 fec5 	bl	8001a5c <API_display_HAL_I2C_Init>

	/* USER CODE BEGIN 2 */

	// Initialize FSM
	API_BME680_Initialize();
 8000cd2:	f000 f9d2 	bl	800107a <API_BME680_Initialize>

	API_BME680_readCalibrationData();
 8000cd6:	f000 fc6f 	bl	80015b8 <API_BME680_readCalibrationData>

	HAL_Delay(200);  // Ajusta según el tiempo de medición configurado
 8000cda:	20c8      	movs	r0, #200	@ 0xc8
 8000cdc:	f000 ff70 	bl	8001bc0 <HAL_Delay>
	while (1) {

		//API_BME680_forceMeasurement();

		// Leer temperatura
		uint32_t temp_adc = API_BME680_readTempADC();
 8000ce0:	f000 f9ed 	bl	80010be <API_BME680_readTempADC>
 8000ce4:	6178      	str	r0, [r7, #20]
		uint32_t temperature = API_BME680_calculateTemperature(temp_adc);
 8000ce6:	6978      	ldr	r0, [r7, #20]
 8000ce8:	f000 fa48 	bl	800117c <API_BME680_calculateTemperature>
 8000cec:	4603      	mov	r3, r0
 8000cee:	613b      	str	r3, [r7, #16]

		// Leer presión
		uint32_t press_adc = API_BME680_readPressADC();
 8000cf0:	f000 fa7e 	bl	80011f0 <API_BME680_readPressADC>
 8000cf4:	60f8      	str	r0, [r7, #12]
		uint32_t pressure = API_BME680_calculatePressure(press_adc);
 8000cf6:	68f8      	ldr	r0, [r7, #12]
 8000cf8:	f000 fad8 	bl	80012ac <API_BME680_calculatePressure>
 8000cfc:	ec53 2b10 	vmov	r2, r3, d0
 8000d00:	4610      	mov	r0, r2
 8000d02:	4619      	mov	r1, r3
 8000d04:	f7ff fe40 	bl	8000988 <__aeabi_d2uiz>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	60bb      	str	r3, [r7, #8]

		// Leer humedad
		uint32_t humd_adc = API_BME680_readHumADC();
 8000d0c:	f000 fb8c 	bl	8001428 <API_BME680_readHumADC>
 8000d10:	6078      	str	r0, [r7, #4]
		uint32_t humidity = API_BME680_calculateHumidity(humd_adc, temperature);
 8000d12:	6939      	ldr	r1, [r7, #16]
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f000 fbc3 	bl	80014a0 <API_BME680_calculateHumidity>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	603b      	str	r3, [r7, #0]
	while (1) {
 8000d1e:	bf00      	nop
 8000d20:	e7de      	b.n	8000ce0 <main+0x28>
	...

08000d24 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b094      	sub	sp, #80	@ 0x50
 8000d28:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d2a:	f107 0320 	add.w	r3, r7, #32
 8000d2e:	2230      	movs	r2, #48	@ 0x30
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f002 fdee 	bl	8003914 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	4b23      	ldr	r3, [pc, #140]	@ (8000ddc <SystemClock_Config+0xb8>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d50:	4a22      	ldr	r2, [pc, #136]	@ (8000ddc <SystemClock_Config+0xb8>)
 8000d52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d56:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d58:	4b20      	ldr	r3, [pc, #128]	@ (8000ddc <SystemClock_Config+0xb8>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d64:	2300      	movs	r3, #0
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	4b1d      	ldr	r3, [pc, #116]	@ (8000de0 <SystemClock_Config+0xbc>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d70:	4a1b      	ldr	r2, [pc, #108]	@ (8000de0 <SystemClock_Config+0xbc>)
 8000d72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	4b19      	ldr	r3, [pc, #100]	@ (8000de0 <SystemClock_Config+0xbc>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d84:	2302      	movs	r3, #2
 8000d86:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d8c:	2310      	movs	r3, #16
 8000d8e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d94:	f107 0320 	add.w	r3, r7, #32
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f001 fba1 	bl	80024e0 <HAL_RCC_OscConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <SystemClock_Config+0x84>
		Error_Handler();
 8000da4:	f000 f81e 	bl	8000de4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000da8:	230f      	movs	r3, #15
 8000daa:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dac:	2300      	movs	r3, #0
 8000dae:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f001 fe04 	bl	80029d0 <HAL_RCC_ClockConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0xae>
		Error_Handler();
 8000dce:	f000 f809 	bl	8000de4 <Error_Handler>
	}
}
 8000dd2:	bf00      	nop
 8000dd4:	3750      	adds	r7, #80	@ 0x50
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40007000 	.word	0x40007000

08000de4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de8:	b672      	cpsid	i
}
 8000dea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <Error_Handler+0x8>

08000df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b10      	ldr	r3, [pc, #64]	@ (8000e3c <HAL_MspInit+0x4c>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfe:	4a0f      	ldr	r2, [pc, #60]	@ (8000e3c <HAL_MspInit+0x4c>)
 8000e00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e06:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <HAL_MspInit+0x4c>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <HAL_MspInit+0x4c>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1a:	4a08      	ldr	r2, [pc, #32]	@ (8000e3c <HAL_MspInit+0x4c>)
 8000e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e22:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <HAL_MspInit+0x4c>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800

08000e40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	@ 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a19      	ldr	r2, [pc, #100]	@ (8000ec4 <HAL_I2C_MspInit+0x84>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d12c      	bne.n	8000ebc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <HAL_I2C_MspInit+0x88>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a17      	ldr	r2, [pc, #92]	@ (8000ec8 <HAL_I2C_MspInit+0x88>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <HAL_I2C_MspInit+0x88>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e84:	2312      	movs	r3, #18
 8000e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e90:	2304      	movs	r3, #4
 8000e92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480c      	ldr	r0, [pc, #48]	@ (8000ecc <HAL_I2C_MspInit+0x8c>)
 8000e9c:	f000 ff9a 	bl	8001dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <HAL_I2C_MspInit+0x88>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea8:	4a07      	ldr	r2, [pc, #28]	@ (8000ec8 <HAL_I2C_MspInit+0x88>)
 8000eaa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb0:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <HAL_I2C_MspInit+0x88>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ebc:	bf00      	nop
 8000ebe:	3728      	adds	r7, #40	@ 0x28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40005400 	.word	0x40005400
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020400 	.word	0x40020400

08000ed0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	@ 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a19      	ldr	r2, [pc, #100]	@ (8000f54 <HAL_SPI_MspInit+0x84>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d12b      	bne.n	8000f4a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b18      	ldr	r3, [pc, #96]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efa:	4a17      	ldr	r2, [pc, #92]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000efc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f02:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	4a10      	ldr	r2, [pc, #64]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|SDO_Pin|SDA_Pin;
 8000f2a:	23e0      	movs	r3, #224	@ 0xe0
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <HAL_SPI_MspInit+0x8c>)
 8000f46:	f000 ff45 	bl	8001dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3728      	adds	r7, #40	@ 0x28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40013000 	.word	0x40013000
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020000 	.word	0x40020000

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <NMI_Handler+0x4>

08000f68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <HardFault_Handler+0x4>

08000f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <MemManage_Handler+0x4>

08000f78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb6:	f000 fde3 	bl	8001b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <SystemInit+0x20>)
 8000fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fca:	4a05      	ldr	r2, [pc, #20]	@ (8000fe0 <SystemInit+0x20>)
 8000fcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800101c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fe8:	f7ff ffea 	bl	8000fc0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fec:	480c      	ldr	r0, [pc, #48]	@ (8001020 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fee:	490d      	ldr	r1, [pc, #52]	@ (8001024 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8001028 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001004:	4c0a      	ldr	r4, [pc, #40]	@ (8001030 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001012:	f002 fc87 	bl	8003924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001016:	f7ff fe4f 	bl	8000cb8 <main>
  bx  lr    
 800101a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800101c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001028:	080039ac 	.word	0x080039ac
  ldr r2, =_sbss
 800102c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001030:	2000011c 	.word	0x2000011c

08001034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC_IRQHandler>

08001036 <API_BME680_setMemoryPage>:

/* Public API code -----------------------------------------------------------*/

/* Function Implementations --------------------------------------------------*/

void API_BME680_setMemoryPage(uint8_t page) {
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	71fb      	strb	r3, [r7, #7]

	uint8_t reg = 0x73 & BME680_SPI_WRITE_MASK; // Registro para seleccionar la página de memoria
 8001040:	2373      	movs	r3, #115	@ 0x73
 8001042:	73fb      	strb	r3, [r7, #15]
	uint8_t value = (page == 1) ? 0x10 : 0x00; // Página 1 si page == 1, de lo contrario página 0
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d101      	bne.n	800104e <API_BME680_setMemoryPage+0x18>
 800104a:	2310      	movs	r3, #16
 800104c:	e000      	b.n	8001050 <API_BME680_setMemoryPage+0x1a>
 800104e:	2300      	movs	r3, #0
 8001050:	73bb      	strb	r3, [r7, #14]

	API_BME680_selectPin();
 8001052:	f000 fceb 	bl	8001a2c <API_BME680_selectPin>
	API_BME680_HAL_Transmit(&reg, sizeof(reg));
 8001056:	f107 030f 	add.w	r3, r7, #15
 800105a:	2101      	movs	r1, #1
 800105c:	4618      	mov	r0, r3
 800105e:	f000 fcbd 	bl	80019dc <API_BME680_HAL_Transmit>
	API_BME680_HAL_Transmit(&value, sizeof(value));
 8001062:	f107 030e 	add.w	r3, r7, #14
 8001066:	2101      	movs	r1, #1
 8001068:	4618      	mov	r0, r3
 800106a:	f000 fcb7 	bl	80019dc <API_BME680_HAL_Transmit>
	API_BME680_deselectPin();
 800106e:	f000 fce9 	bl	8001a44 <API_BME680_deselectPin>

}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <API_BME680_Initialize>:
	uint8_t mode = BME680_MODE_FORCED;
	API_BME680_writeRegister(BME680_REG_CTRL_MEAS, ctrl_meas | mode);

}

void API_BME680_Initialize(void) {
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
	//uint8_t ctrl_reset = 0xb6;
	//API_BME680_writeRegister(0x60, ctrl_reset);

	API_BME680_HAL_Delay(10);
	*/
	API_BME680_setMemoryPage(1);
 8001080:	2001      	movs	r0, #1
 8001082:	f7ff ffd8 	bl	8001036 <API_BME680_setMemoryPage>

	// 1. Configura la sobremuestreo de humedad a 1x
	uint8_t ctrl_hum = (0x01);  // osrs_h<2:0> = 0b001 (1x)
 8001086:	2301      	movs	r3, #1
 8001088:	71fb      	strb	r3, [r7, #7]
	API_BME680_writeRegister(BME680_REG_CTRL_HUM, ctrl_hum);
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	4619      	mov	r1, r3
 800108e:	2072      	movs	r0, #114	@ 0x72
 8001090:	f000 fbd2 	bl	8001838 <API_BME680_writeRegister>

	// 2. Configura la sobremuestreo de temperatura a 2x y presión a 16x
	uint8_t ctrl_meas = (0x02 << 5) | (0x05 << 2); // osrs_t<2:0> = 0b010 (2x), osrs_p<2:0> = 0b101 (16x)
 8001094:	2354      	movs	r3, #84	@ 0x54
 8001096:	71bb      	strb	r3, [r7, #6]
	//API_BME680_writeRegister(0x75, 0);
	API_BME680_writeRegister(BME680_REG_CTRL_MEAS, ctrl_meas);
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	4619      	mov	r1, r3
 800109c:	2074      	movs	r0, #116	@ 0x74
 800109e:	f000 fbcb 	bl	8001838 <API_BME680_writeRegister>
	// 5. Selecciona los parámetros del calentador y activa la medición de gas
	uint8_t ctrl_gas_1 = (0x00 & 0x0F) | (1 << 4); // nb_conv<3:0> = 0x0, run_gas = 1
	API_BME680_writeRegister(BME680_REG_CTRL_GAS_1, ctrl_gas_1);
	*/
	// 6. Establece el modo en "forced mode" para iniciar la medición
	uint8_t mode = BME680_MODE_FORCED;
 80010a2:	2301      	movs	r3, #1
 80010a4:	717b      	strb	r3, [r7, #5]
	API_BME680_writeRegister(BME680_REG_CTRL_MEAS, ctrl_meas | mode);
 80010a6:	79ba      	ldrb	r2, [r7, #6]
 80010a8:	797b      	ldrb	r3, [r7, #5]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	4619      	mov	r1, r3
 80010b0:	2074      	movs	r0, #116	@ 0x74
 80010b2:	f000 fbc1 	bl	8001838 <API_BME680_writeRegister>


}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <API_BME680_readTempADC>:

// Temperature
uint32_t API_BME680_readTempADC(void) {
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0

	API_BME680_setMemoryPage(1);  // Cambia a la página de memoria 1
 80010c4:	2001      	movs	r0, #1
 80010c6:	f7ff ffb6 	bl	8001036 <API_BME680_setMemoryPage>

	uint8_t t_reg_xlsb, t_reg_lsb, t_reg_msb;

	API_BME680_readRegister(BME680_REG_TEMP_ADC_XLSB, &t_reg_xlsb);
 80010ca:	f107 030b 	add.w	r3, r7, #11
 80010ce:	4619      	mov	r1, r3
 80010d0:	2024      	movs	r0, #36	@ 0x24
 80010d2:	f000 fbd3 	bl	800187c <API_BME680_readRegister>
	API_BME680_readRegister(BME680_REG_TEMP_ADC_LSB, &t_reg_lsb);
 80010d6:	f107 030a 	add.w	r3, r7, #10
 80010da:	4619      	mov	r1, r3
 80010dc:	2023      	movs	r0, #35	@ 0x23
 80010de:	f000 fbcd 	bl	800187c <API_BME680_readRegister>
	API_BME680_readRegister(BME680_REG_TEMP_ADC_MSB, &t_reg_msb);
 80010e2:	f107 0309 	add.w	r3, r7, #9
 80010e6:	4619      	mov	r1, r3
 80010e8:	2022      	movs	r0, #34	@ 0x22
 80010ea:	f000 fbc7 	bl	800187c <API_BME680_readRegister>

	uint8_t t_xlsb = 0, t_lsb = 0, t_msb = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	723b      	strb	r3, [r7, #8]
 80010f2:	2300      	movs	r3, #0
 80010f4:	71fb      	strb	r3, [r7, #7]
 80010f6:	2300      	movs	r3, #0
 80010f8:	71bb      	strb	r3, [r7, #6]
	uint32_t temp_adc = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]

	// Read XLSB
	API_BME680_selectPin();
 80010fe:	f000 fc95 	bl	8001a2c <API_BME680_selectPin>
	API_BME680_HAL_Transmit(&t_reg_xlsb, sizeof(t_reg_xlsb));
 8001102:	f107 030b 	add.w	r3, r7, #11
 8001106:	2101      	movs	r1, #1
 8001108:	4618      	mov	r0, r3
 800110a:	f000 fc67 	bl	80019dc <API_BME680_HAL_Transmit>
	API_BME680_HAL_Receive(&t_xlsb, sizeof(t_xlsb));
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	2101      	movs	r1, #1
 8001114:	4618      	mov	r0, r3
 8001116:	f000 fc75 	bl	8001a04 <API_BME680_HAL_Receive>
	API_BME680_deselectPin();
 800111a:	f000 fc93 	bl	8001a44 <API_BME680_deselectPin>

	// Read LSB
	API_BME680_selectPin();
 800111e:	f000 fc85 	bl	8001a2c <API_BME680_selectPin>
	API_BME680_HAL_Transmit(&t_reg_lsb, sizeof(t_reg_lsb));
 8001122:	f107 030a 	add.w	r3, r7, #10
 8001126:	2101      	movs	r1, #1
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fc57 	bl	80019dc <API_BME680_HAL_Transmit>
	API_BME680_HAL_Receive(&t_lsb, sizeof(t_lsb));
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	2101      	movs	r1, #1
 8001132:	4618      	mov	r0, r3
 8001134:	f000 fc66 	bl	8001a04 <API_BME680_HAL_Receive>
	API_BME680_deselectPin();
 8001138:	f000 fc84 	bl	8001a44 <API_BME680_deselectPin>

	// Read MSB
	API_BME680_selectPin();
 800113c:	f000 fc76 	bl	8001a2c <API_BME680_selectPin>
	API_BME680_HAL_Transmit(&t_reg_msb, sizeof(t_reg_msb));
 8001140:	f107 0309 	add.w	r3, r7, #9
 8001144:	2101      	movs	r1, #1
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fc48 	bl	80019dc <API_BME680_HAL_Transmit>
	API_BME680_HAL_Receive(&t_msb, sizeof(t_msb));
 800114c:	1dbb      	adds	r3, r7, #6
 800114e:	2101      	movs	r1, #1
 8001150:	4618      	mov	r0, r3
 8001152:	f000 fc57 	bl	8001a04 <API_BME680_HAL_Receive>
	API_BME680_deselectPin();
 8001156:	f000 fc75 	bl	8001a44 <API_BME680_deselectPin>

	// Combina los bytes en el orden correcto
	temp_adc = (((uint32_t) t_msb) << 12) | (((uint32_t) t_lsb) << 4) | (((uint32_t) t_xlsb) >> 4);
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	031a      	lsls	r2, r3, #12
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	011b      	lsls	r3, r3, #4
 8001162:	4313      	orrs	r3, r2
 8001164:	7a3a      	ldrb	r2, [r7, #8]
 8001166:	0912      	lsrs	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	4313      	orrs	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]

	return temp_adc & 0x1ffff;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f3c3 0310 	ubfx	r3, r3, #0, #17

}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <API_BME680_calculateTemperature>:

int16_t API_BME680_calculateTemperature(uint32_t temp_adc) {
 800117c:	b480      	push	{r7}
 800117e:	b087      	sub	sp, #28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

	int32_t var1, var2, var3, temp_comp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) calib.par_t1 << 1);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	10da      	asrs	r2, r3, #3
 8001188:	4b18      	ldr	r3, [pc, #96]	@ (80011ec <API_BME680_calculateTemperature+0x70>)
 800118a:	8b9b      	ldrh	r3, [r3, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	617b      	str	r3, [r7, #20]
	var2 = (var1 * (int32_t) calib.par_t2) >> 11;
 8001192:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <API_BME680_calculateTemperature+0x70>)
 8001194:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001198:	461a      	mov	r2, r3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	fb02 f303 	mul.w	r3, r2, r3
 80011a0:	12db      	asrs	r3, r3, #11
 80011a2:	613b      	str	r3, [r7, #16]
	var3 = ((((var1 >> 1) * (var1 >> 1)) >> 12) * ((int32_t) calib.par_t3 << 4)) >> 14;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	105b      	asrs	r3, r3, #1
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	1052      	asrs	r2, r2, #1
 80011ac:	fb02 f303 	mul.w	r3, r2, r3
 80011b0:	131b      	asrs	r3, r3, #12
 80011b2:	4a0e      	ldr	r2, [pc, #56]	@ (80011ec <API_BME680_calculateTemperature+0x70>)
 80011b4:	f992 2020 	ldrsb.w	r2, [r2, #32]
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	fb02 f303 	mul.w	r3, r2, r3
 80011be:	139b      	asrs	r3, r3, #14
 80011c0:	60fb      	str	r3, [r7, #12]
	calib.t_fine = var2 + var3;
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	4a08      	ldr	r2, [pc, #32]	@ (80011ec <API_BME680_calculateTemperature+0x70>)
 80011ca:	63d3      	str	r3, [r2, #60]	@ 0x3c
	temp_comp = ((calib.t_fine * 5) + 128) >> 8;
 80011cc:	4b07      	ldr	r3, [pc, #28]	@ (80011ec <API_BME680_calculateTemperature+0x70>)
 80011ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	3380      	adds	r3, #128	@ 0x80
 80011d8:	121b      	asrs	r3, r3, #8
 80011da:	60bb      	str	r3, [r7, #8]

	//
	return temp_comp;
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	b21b      	sxth	r3, r3

}
 80011e0:	4618      	mov	r0, r3
 80011e2:	371c      	adds	r7, #28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	20000028 	.word	0x20000028

080011f0 <API_BME680_readPressADC>:

// Pressure
uint32_t API_BME680_readPressADC(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0

	API_BME680_setMemoryPage(1);  // Cambia a la página de memoria 1
 80011f6:	2001      	movs	r0, #1
 80011f8:	f7ff ff1d 	bl	8001036 <API_BME680_setMemoryPage>

	uint8_t p_reg_xlsb, p_reg_lsb, p_reg_msb;

	API_BME680_readRegister(BME680_REG_PRESS_ADC_XLSB, &p_reg_xlsb);
 80011fc:	f107 030b 	add.w	r3, r7, #11
 8001200:	4619      	mov	r1, r3
 8001202:	2021      	movs	r0, #33	@ 0x21
 8001204:	f000 fb3a 	bl	800187c <API_BME680_readRegister>
	API_BME680_readRegister(BME680_REG_PRESS_ADC_LSB, &p_reg_lsb);
 8001208:	f107 030a 	add.w	r3, r7, #10
 800120c:	4619      	mov	r1, r3
 800120e:	2020      	movs	r0, #32
 8001210:	f000 fb34 	bl	800187c <API_BME680_readRegister>
	API_BME680_readRegister(BME680_REG_PRESS_ADC_MSB, &p_reg_msb);
 8001214:	f107 0309 	add.w	r3, r7, #9
 8001218:	4619      	mov	r1, r3
 800121a:	201f      	movs	r0, #31
 800121c:	f000 fb2e 	bl	800187c <API_BME680_readRegister>

	uint8_t p_xlsb = 0, p_lsb = 0, p_msb = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	723b      	strb	r3, [r7, #8]
 8001224:	2300      	movs	r3, #0
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	2300      	movs	r3, #0
 800122a:	71bb      	strb	r3, [r7, #6]
	uint32_t press_adc = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]

	// Read XLSB
	API_BME680_selectPin();
 8001230:	f000 fbfc 	bl	8001a2c <API_BME680_selectPin>
	API_BME680_HAL_Transmit(&p_reg_xlsb, sizeof(p_reg_xlsb));
 8001234:	f107 030b 	add.w	r3, r7, #11
 8001238:	2101      	movs	r1, #1
 800123a:	4618      	mov	r0, r3
 800123c:	f000 fbce 	bl	80019dc <API_BME680_HAL_Transmit>
	API_BME680_HAL_Receive(&p_xlsb, sizeof(p_xlsb));
 8001240:	f107 0308 	add.w	r3, r7, #8
 8001244:	2101      	movs	r1, #1
 8001246:	4618      	mov	r0, r3
 8001248:	f000 fbdc 	bl	8001a04 <API_BME680_HAL_Receive>
	API_BME680_deselectPin();
 800124c:	f000 fbfa 	bl	8001a44 <API_BME680_deselectPin>

	// Read LSB
	API_BME680_selectPin();
 8001250:	f000 fbec 	bl	8001a2c <API_BME680_selectPin>
	API_BME680_HAL_Transmit(&p_reg_lsb, sizeof(p_reg_lsb));
 8001254:	f107 030a 	add.w	r3, r7, #10
 8001258:	2101      	movs	r1, #1
 800125a:	4618      	mov	r0, r3
 800125c:	f000 fbbe 	bl	80019dc <API_BME680_HAL_Transmit>
	API_BME680_HAL_Receive(&p_lsb, sizeof(p_lsb));
 8001260:	1dfb      	adds	r3, r7, #7
 8001262:	2101      	movs	r1, #1
 8001264:	4618      	mov	r0, r3
 8001266:	f000 fbcd 	bl	8001a04 <API_BME680_HAL_Receive>
	API_BME680_deselectPin();
 800126a:	f000 fbeb 	bl	8001a44 <API_BME680_deselectPin>

	// Read MSB
	API_BME680_selectPin();
 800126e:	f000 fbdd 	bl	8001a2c <API_BME680_selectPin>
	API_BME680_HAL_Transmit(&p_reg_msb, sizeof(p_reg_msb));
 8001272:	f107 0309 	add.w	r3, r7, #9
 8001276:	2101      	movs	r1, #1
 8001278:	4618      	mov	r0, r3
 800127a:	f000 fbaf 	bl	80019dc <API_BME680_HAL_Transmit>
	API_BME680_HAL_Receive(&p_msb, sizeof(p_msb));
 800127e:	1dbb      	adds	r3, r7, #6
 8001280:	2101      	movs	r1, #1
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fbbe 	bl	8001a04 <API_BME680_HAL_Receive>
	API_BME680_deselectPin();
 8001288:	f000 fbdc 	bl	8001a44 <API_BME680_deselectPin>

	// Combina los bytes en el orden correcto
	press_adc = (((uint32_t) p_msb) << 12) | (((uint32_t) p_lsb) << 4) | (((uint32_t) p_xlsb) >> 4);
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	031a      	lsls	r2, r3, #12
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	4313      	orrs	r3, r2
 8001296:	7a3a      	ldrb	r2, [r7, #8]
 8001298:	0912      	lsrs	r2, r2, #4
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	4313      	orrs	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]

	return press_adc;
 80012a0:	68fb      	ldr	r3, [r7, #12]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <API_BME680_calculatePressure>:

double API_BME680_calculatePressure(uint32_t press_adc) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

	int32_t var1, var2, var3, press_comp;

	var1 = ((int32_t) calib.t_fine >> 1) - 64000;
 80012b4:	4b5a      	ldr	r3, [pc, #360]	@ (8001420 <API_BME680_calculatePressure+0x174>)
 80012b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012b8:	105b      	asrs	r3, r3, #1
 80012ba:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 80012be:	613b      	str	r3, [r7, #16]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) * (int32_t) calib.par_p6) >> 2;
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	109b      	asrs	r3, r3, #2
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	1092      	asrs	r2, r2, #2
 80012c8:	fb02 f303 	mul.w	r3, r2, r3
 80012cc:	12db      	asrs	r3, r3, #11
 80012ce:	4a54      	ldr	r2, [pc, #336]	@ (8001420 <API_BME680_calculatePressure+0x174>)
 80012d0:	f992 202e 	ldrsb.w	r2, [r2, #46]	@ 0x2e
 80012d4:	fb02 f303 	mul.w	r3, r2, r3
 80012d8:	109b      	asrs	r3, r3, #2
 80012da:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1 * (int32_t) calib.par_p5) << 1);
 80012dc:	4b50      	ldr	r3, [pc, #320]	@ (8001420 <API_BME680_calculatePressure+0x174>)
 80012de:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80012e2:	461a      	mov	r2, r3
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	fb02 f303 	mul.w	r3, r2, r3
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
	var2 = (var2 >> 2) + ((int32_t) calib.par_p4 << 16);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	109a      	asrs	r2, r3, #2
 80012f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001420 <API_BME680_calculatePressure+0x174>)
 80012f8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 80012fc:	041b      	lsls	r3, r3, #16
 80012fe:	4413      	add	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	109b      	asrs	r3, r3, #2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	1092      	asrs	r2, r2, #2
 800130a:	fb02 f303 	mul.w	r3, r2, r3
 800130e:	135b      	asrs	r3, r3, #13
			   ((int32_t) calib.par_p3 << 5)) >> 3) + (((int32_t) calib.par_p2 * var1) >> 1);
 8001310:	4a43      	ldr	r2, [pc, #268]	@ (8001420 <API_BME680_calculatePressure+0x174>)
 8001312:	f992 2028 	ldrsb.w	r2, [r2, #40]	@ 0x28
 8001316:	0152      	lsls	r2, r2, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001318:	fb02 f303 	mul.w	r3, r2, r3
			   ((int32_t) calib.par_p3 << 5)) >> 3) + (((int32_t) calib.par_p2 * var1) >> 1);
 800131c:	10da      	asrs	r2, r3, #3
 800131e:	4b40      	ldr	r3, [pc, #256]	@ (8001420 <API_BME680_calculatePressure+0x174>)
 8001320:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8001324:	4619      	mov	r1, r3
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	fb01 f303 	mul.w	r3, r1, r3
 800132c:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 800132e:	4413      	add	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
	var1 = var1 >> 18;
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	149b      	asrs	r3, r3, #18
 8001336:	613b      	str	r3, [r7, #16]
	var1 = ((32768 + var1) * (int32_t)calib.par_p1) >> 15;
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800133e:	4a38      	ldr	r2, [pc, #224]	@ (8001420 <API_BME680_calculatePressure+0x174>)
 8001340:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8001342:	fb02 f303 	mul.w	r3, r2, r3
 8001346:	13db      	asrs	r3, r3, #15
 8001348:	613b      	str	r3, [r7, #16]
	press_comp = 1048576 - press_adc;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001350:	617b      	str	r3, [r7, #20]
	press_comp = (uint32_t)((press_comp - (var2 >> 12)) * ((uint32_t)3125));
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	131b      	asrs	r3, r3, #12
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	461a      	mov	r2, r3
 800135c:	f640 4335 	movw	r3, #3125	@ 0xc35
 8001360:	fb02 f303 	mul.w	r3, r2, r3
 8001364:	617b      	str	r3, [r7, #20]
	if (press_comp >= (1 << 30)) {
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800136c:	db06      	blt.n	800137c <API_BME680_calculatePressure+0xd0>
		press_comp = ((press_comp / (uint32_t)var1) << 1);
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	fbb2 f3f3 	udiv	r3, r2, r3
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	e006      	b.n	800138a <API_BME680_calculatePressure+0xde>
	} else {
		press_comp = ((press_comp << 1) / (uint32_t)var1);
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	461a      	mov	r2, r3
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	fbb2 f3f3 	udiv	r3, r2, r3
 8001388:	617b      	str	r3, [r7, #20]
	}
	var1 = ((int32_t)calib.par_p9 * (int32_t)(((press_comp >> 3) *
 800138a:	4b25      	ldr	r3, [pc, #148]	@ (8001420 <API_BME680_calculatePressure+0x174>)
 800138c:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001390:	4619      	mov	r1, r3
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	10db      	asrs	r3, r3, #3
			    (press_comp >> 3)) >> 13)) >> 12;
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	10d2      	asrs	r2, r2, #3
	var1 = ((int32_t)calib.par_p9 * (int32_t)(((press_comp >> 3) *
 800139a:	fb02 f303 	mul.w	r3, r2, r3
			    (press_comp >> 3)) >> 13)) >> 12;
 800139e:	135b      	asrs	r3, r3, #13
	var1 = ((int32_t)calib.par_p9 * (int32_t)(((press_comp >> 3) *
 80013a0:	fb01 f303 	mul.w	r3, r1, r3
 80013a4:	131b      	asrs	r3, r3, #12
 80013a6:	613b      	str	r3, [r7, #16]
	var2 = ((int32_t)(press_comp >> 2) * (int32_t)calib.par_p8) >> 13;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	109b      	asrs	r3, r3, #2
 80013ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001420 <API_BME680_calculatePressure+0x174>)
 80013ae:	f9b2 2030 	ldrsh.w	r2, [r2, #48]	@ 0x30
 80013b2:	fb02 f303 	mul.w	r3, r2, r3
 80013b6:	135b      	asrs	r3, r3, #13
 80013b8:	60fb      	str	r3, [r7, #12]
	var3 = ((int32_t)(press_comp >> 8) * (int32_t)(press_comp >> 8) *
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	121b      	asrs	r3, r3, #8
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	1212      	asrs	r2, r2, #8
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
			    (int32_t)(press_comp >> 8) * (int32_t)calib.par_p10) >> 17;
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	1212      	asrs	r2, r2, #8
	var3 = ((int32_t)(press_comp >> 8) * (int32_t)(press_comp >> 8) *
 80013ca:	fb02 f303 	mul.w	r3, r2, r3
			    (int32_t)(press_comp >> 8) * (int32_t)calib.par_p10) >> 17;
 80013ce:	4a14      	ldr	r2, [pc, #80]	@ (8001420 <API_BME680_calculatePressure+0x174>)
 80013d0:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80013d4:	fb02 f303 	mul.w	r3, r2, r3
	var3 = ((int32_t)(press_comp >> 8) * (int32_t)(press_comp >> 8) *
 80013d8:	145b      	asrs	r3, r3, #17
 80013da:	60bb      	str	r3, [r7, #8]
	press_comp = (int32_t)(press_comp) +
				((var1 + var2 + var3 + ((int32_t)calib.par_p7 << 7)) >> 4);
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	441a      	add	r2, r3
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	441a      	add	r2, r3
 80013e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001420 <API_BME680_calculatePressure+0x174>)
 80013e8:	f993 302f 	ldrsb.w	r3, [r3, #47]	@ 0x2f
 80013ec:	01db      	lsls	r3, r3, #7
 80013ee:	4413      	add	r3, r2
 80013f0:	111b      	asrs	r3, r3, #4
	press_comp = (int32_t)(press_comp) +
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	4413      	add	r3, r2
 80013f6:	617b      	str	r3, [r7, #20]

	return press_comp / 100.0; // Conversion from Pa to hPa
 80013f8:	6978      	ldr	r0, [r7, #20]
 80013fa:	f7ff f849 	bl	8000490 <__aeabi_i2d>
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <API_BME680_calculatePressure+0x178>)
 8001404:	f7ff f9d8 	bl	80007b8 <__aeabi_ddiv>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	ec43 2b17 	vmov	d7, r2, r3

}
 8001410:	eeb0 0a47 	vmov.f32	s0, s14
 8001414:	eef0 0a67 	vmov.f32	s1, s15
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000028 	.word	0x20000028
 8001424:	40590000 	.word	0x40590000

08001428 <API_BME680_readHumADC>:

// Humidity
uint32_t API_BME680_readHumADC(void) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0

	API_BME680_setMemoryPage(1);  // Cambia a la página de memoria 1
 800142e:	2001      	movs	r0, #1
 8001430:	f7ff fe01 	bl	8001036 <API_BME680_setMemoryPage>

	uint8_t h_reg_lsb, h_reg_msb;

	API_BME680_readRegister(BME680_REG_HUM_ADC_LSB, &h_reg_lsb);
 8001434:	1cfb      	adds	r3, r7, #3
 8001436:	4619      	mov	r1, r3
 8001438:	2026      	movs	r0, #38	@ 0x26
 800143a:	f000 fa1f 	bl	800187c <API_BME680_readRegister>
	API_BME680_readRegister(BME680_REG_HUM_ADC_MSB, &h_reg_msb);
 800143e:	1cbb      	adds	r3, r7, #2
 8001440:	4619      	mov	r1, r3
 8001442:	2025      	movs	r0, #37	@ 0x25
 8001444:	f000 fa1a 	bl	800187c <API_BME680_readRegister>

	uint8_t h_lsb = 0, h_msb = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	707b      	strb	r3, [r7, #1]
 800144c:	2300      	movs	r3, #0
 800144e:	703b      	strb	r3, [r7, #0]
	uint32_t hum_adc = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	607b      	str	r3, [r7, #4]

	// Read LSB
	API_BME680_selectPin();
 8001454:	f000 faea 	bl	8001a2c <API_BME680_selectPin>
	API_BME680_HAL_Transmit(&h_reg_lsb, sizeof(h_reg_lsb));
 8001458:	1cfb      	adds	r3, r7, #3
 800145a:	2101      	movs	r1, #1
 800145c:	4618      	mov	r0, r3
 800145e:	f000 fabd 	bl	80019dc <API_BME680_HAL_Transmit>
	API_BME680_HAL_Receive(&h_lsb, sizeof(h_lsb));
 8001462:	1c7b      	adds	r3, r7, #1
 8001464:	2101      	movs	r1, #1
 8001466:	4618      	mov	r0, r3
 8001468:	f000 facc 	bl	8001a04 <API_BME680_HAL_Receive>
	API_BME680_deselectPin();
 800146c:	f000 faea 	bl	8001a44 <API_BME680_deselectPin>

	// Read MSB
	API_BME680_selectPin();
 8001470:	f000 fadc 	bl	8001a2c <API_BME680_selectPin>
	API_BME680_HAL_Transmit(&h_reg_msb, sizeof(h_reg_msb));
 8001474:	1cbb      	adds	r3, r7, #2
 8001476:	2101      	movs	r1, #1
 8001478:	4618      	mov	r0, r3
 800147a:	f000 faaf 	bl	80019dc <API_BME680_HAL_Transmit>
	API_BME680_HAL_Receive(&h_msb, sizeof(h_msb));
 800147e:	463b      	mov	r3, r7
 8001480:	2101      	movs	r1, #1
 8001482:	4618      	mov	r0, r3
 8001484:	f000 fabe 	bl	8001a04 <API_BME680_HAL_Receive>
	API_BME680_deselectPin();
 8001488:	f000 fadc 	bl	8001a44 <API_BME680_deselectPin>

	// Combina los bytes en el orden correcto
	hum_adc = (((uint32_t) h_msb) << 8) | (uint32_t) h_lsb;
 800148c:	783b      	ldrb	r3, [r7, #0]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	787a      	ldrb	r2, [r7, #1]
 8001492:	4313      	orrs	r3, r2
 8001494:	607b      	str	r3, [r7, #4]

	return hum_adc;
 8001496:	687b      	ldr	r3, [r7, #4]

}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <API_BME680_calculateHumidity>:

double API_BME680_calculateHumidity(uint32_t hum_adc, uint32_t temp_comp) {
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b08b      	sub	sp, #44	@ 0x2c
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]

	int32_t var1, var2, var3, var4, var5, var6, hum_comp, temp_scaled;

	temp_scaled = (int32_t)temp_comp;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
	var1 = (int32_t)hum_adc - (int32_t)((int32_t)calib.par_h1 << 4) -
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	4b3f      	ldr	r3, [pc, #252]	@ (80015b0 <API_BME680_calculateHumidity+0x110>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	1ad2      	subs	r2, r2, r3
			(((temp_scaled * (int32_t)calib.par_h3) / ((int32_t)100)) >> 1);
 80014b8:	4b3d      	ldr	r3, [pc, #244]	@ (80015b0 <API_BME680_calculateHumidity+0x110>)
 80014ba:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80014be:	4619      	mov	r1, r3
 80014c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c2:	fb01 f303 	mul.w	r3, r1, r3
 80014c6:	493b      	ldr	r1, [pc, #236]	@ (80015b4 <API_BME680_calculateHumidity+0x114>)
 80014c8:	fb81 0103 	smull	r0, r1, r1, r3
 80014cc:	1149      	asrs	r1, r1, #5
 80014ce:	17db      	asrs	r3, r3, #31
 80014d0:	1acb      	subs	r3, r1, r3
 80014d2:	105b      	asrs	r3, r3, #1
	var1 = (int32_t)hum_adc - (int32_t)((int32_t)calib.par_h1 << 4) -
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	623b      	str	r3, [r7, #32]
	var2 = ((int32_t)calib.par_h2 * (((temp_scaled *
 80014d8:	4b35      	ldr	r3, [pc, #212]	@ (80015b0 <API_BME680_calculateHumidity+0x110>)
 80014da:	885b      	ldrh	r3, [r3, #2]
 80014dc:	4618      	mov	r0, r3
			(int32_t)calib.par_h4) / ((int32_t)100)) +
 80014de:	4b34      	ldr	r3, [pc, #208]	@ (80015b0 <API_BME680_calculateHumidity+0x110>)
 80014e0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80014e4:	461a      	mov	r2, r3
	var2 = ((int32_t)calib.par_h2 * (((temp_scaled *
 80014e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e8:	fb02 f303 	mul.w	r3, r2, r3
			(int32_t)calib.par_h4) / ((int32_t)100)) +
 80014ec:	4a31      	ldr	r2, [pc, #196]	@ (80015b4 <API_BME680_calculateHumidity+0x114>)
 80014ee:	fb82 1203 	smull	r1, r2, r2, r3
 80014f2:	1152      	asrs	r2, r2, #5
 80014f4:	17db      	asrs	r3, r3, #31
 80014f6:	1ad2      	subs	r2, r2, r3
			(((temp_scaled * ((temp_scaled * (int32_t)calib.par_h5) /
 80014f8:	4b2d      	ldr	r3, [pc, #180]	@ (80015b0 <API_BME680_calculateHumidity+0x110>)
 80014fa:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80014fe:	4619      	mov	r1, r3
 8001500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001502:	fb01 f303 	mul.w	r3, r1, r3
 8001506:	492b      	ldr	r1, [pc, #172]	@ (80015b4 <API_BME680_calculateHumidity+0x114>)
 8001508:	fb81 4103 	smull	r4, r1, r1, r3
 800150c:	1149      	asrs	r1, r1, #5
 800150e:	17db      	asrs	r3, r3, #31
 8001510:	1acb      	subs	r3, r1, r3
 8001512:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001514:	fb01 f303 	mul.w	r3, r1, r3
			((int32_t)100))) >> 6) / ((int32_t)100)) + ((int32_t)(1 << 14)))) >> 10;
 8001518:	119b      	asrs	r3, r3, #6
 800151a:	4926      	ldr	r1, [pc, #152]	@ (80015b4 <API_BME680_calculateHumidity+0x114>)
 800151c:	fb81 4103 	smull	r4, r1, r1, r3
 8001520:	1149      	asrs	r1, r1, #5
 8001522:	17db      	asrs	r3, r3, #31
 8001524:	1acb      	subs	r3, r1, r3
			(int32_t)calib.par_h4) / ((int32_t)100)) +
 8001526:	4413      	add	r3, r2
			((int32_t)100))) >> 6) / ((int32_t)100)) + ((int32_t)(1 << 14)))) >> 10;
 8001528:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
	var2 = ((int32_t)calib.par_h2 * (((temp_scaled *
 800152c:	fb00 f303 	mul.w	r3, r0, r3
 8001530:	129b      	asrs	r3, r3, #10
 8001532:	61fb      	str	r3, [r7, #28]
	var3 = var1 * var2;
 8001534:	6a3b      	ldr	r3, [r7, #32]
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	fb02 f303 	mul.w	r3, r2, r3
 800153c:	61bb      	str	r3, [r7, #24]
	var4 = (((int32_t)calib.par_h6 << 7) +
 800153e:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <API_BME680_calculateHumidity+0x110>)
 8001540:	79db      	ldrb	r3, [r3, #7]
 8001542:	01da      	lsls	r2, r3, #7
			((temp_scaled * (int32_t)calib.par_h7) / ((int32_t)100))) >> 4;
 8001544:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <API_BME680_calculateHumidity+0x110>)
 8001546:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800154a:	4619      	mov	r1, r3
 800154c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154e:	fb01 f303 	mul.w	r3, r1, r3
 8001552:	4918      	ldr	r1, [pc, #96]	@ (80015b4 <API_BME680_calculateHumidity+0x114>)
 8001554:	fb81 0103 	smull	r0, r1, r1, r3
 8001558:	1149      	asrs	r1, r1, #5
 800155a:	17db      	asrs	r3, r3, #31
 800155c:	1acb      	subs	r3, r1, r3
	var4 = (((int32_t)calib.par_h6 << 7) +
 800155e:	4413      	add	r3, r2
 8001560:	111b      	asrs	r3, r3, #4
 8001562:	617b      	str	r3, [r7, #20]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	139b      	asrs	r3, r3, #14
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	1392      	asrs	r2, r2, #14
 800156c:	fb02 f303 	mul.w	r3, r2, r3
 8001570:	129b      	asrs	r3, r3, #10
 8001572:	613b      	str	r3, [r7, #16]
	var6 = (var4 * var5) >> 1;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	fb02 f303 	mul.w	r3, r2, r3
 800157c:	105b      	asrs	r3, r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
	hum_comp = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4413      	add	r3, r2
 8001586:	129b      	asrs	r3, r3, #10
 8001588:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800158c:	fb02 f303 	mul.w	r3, r2, r3
 8001590:	131b      	asrs	r3, r3, #12
 8001592:	60bb      	str	r3, [r7, #8]

	return hum_comp;
 8001594:	68b8      	ldr	r0, [r7, #8]
 8001596:	f7fe ff7b 	bl	8000490 <__aeabi_i2d>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	ec43 2b17 	vmov	d7, r2, r3

}
 80015a2:	eeb0 0a47 	vmov.f32	s0, s14
 80015a6:	eef0 0a67 	vmov.f32	s1, s15
 80015aa:	372c      	adds	r7, #44	@ 0x2c
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd90      	pop	{r4, r7, pc}
 80015b0:	20000028 	.word	0x20000028
 80015b4:	51eb851f 	.word	0x51eb851f

080015b8 <API_BME680_readCalibrationData>:

// Función para leer y almacenar los datos de calibración de temperatura
void API_BME680_readCalibrationData(void) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
	// MSB
	uint8_t t1_msb, t2_msb;
	uint8_t t3;

	// Read temperature calibration registers
	API_BME680_readRegister(BME680_REG_PAR_T1_LSB, &t1_lsb);
 80015be:	f107 031f 	add.w	r3, r7, #31
 80015c2:	4619      	mov	r1, r3
 80015c4:	20e9      	movs	r0, #233	@ 0xe9
 80015c6:	f000 f959 	bl	800187c <API_BME680_readRegister>
	API_BME680_readRegister(BME680_REG_PAR_T1_MSB, &t1_msb);
 80015ca:	f107 031d 	add.w	r3, r7, #29
 80015ce:	4619      	mov	r1, r3
 80015d0:	20ea      	movs	r0, #234	@ 0xea
 80015d2:	f000 f953 	bl	800187c <API_BME680_readRegister>
	calib.par_t1 = (uint16_t) ((t1_msb << 8) | t1_lsb);
 80015d6:	7f7b      	ldrb	r3, [r7, #29]
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	b21a      	sxth	r2, r3
 80015dc:	7ffb      	ldrb	r3, [r7, #31]
 80015de:	b21b      	sxth	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	4b93      	ldr	r3, [pc, #588]	@ (8001834 <API_BME680_readCalibrationData+0x27c>)
 80015e8:	839a      	strh	r2, [r3, #28]

	API_BME680_readRegister(BME680_REG_PAR_T2_LSB, &t2_lsb);
 80015ea:	f107 031e 	add.w	r3, r7, #30
 80015ee:	4619      	mov	r1, r3
 80015f0:	208a      	movs	r0, #138	@ 0x8a
 80015f2:	f000 f943 	bl	800187c <API_BME680_readRegister>
	API_BME680_readRegister(BME680_REG_PAR_T2_MSB, &t2_msb);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	208b      	movs	r0, #139	@ 0x8b
 80015fe:	f000 f93d 	bl	800187c <API_BME680_readRegister>
	calib.par_t2 = (int16_t) ((t2_msb << 8) | t2_lsb);
 8001602:	7f3b      	ldrb	r3, [r7, #28]
 8001604:	021b      	lsls	r3, r3, #8
 8001606:	b21a      	sxth	r2, r3
 8001608:	7fbb      	ldrb	r3, [r7, #30]
 800160a:	b21b      	sxth	r3, r3
 800160c:	4313      	orrs	r3, r2
 800160e:	b21a      	sxth	r2, r3
 8001610:	4b88      	ldr	r3, [pc, #544]	@ (8001834 <API_BME680_readCalibrationData+0x27c>)
 8001612:	83da      	strh	r2, [r3, #30]

	API_BME680_readRegister(BME680_REG_PAR_T3, &t3);
 8001614:	f107 031b 	add.w	r3, r7, #27
 8001618:	4619      	mov	r1, r3
 800161a:	208c      	movs	r0, #140	@ 0x8c
 800161c:	f000 f92e 	bl	800187c <API_BME680_readRegister>
	calib.par_t3 = (int8_t) t3;
 8001620:	7efb      	ldrb	r3, [r7, #27]
 8001622:	b25a      	sxtb	r2, r3
 8001624:	4b83      	ldr	r3, [pc, #524]	@ (8001834 <API_BME680_readCalibrationData+0x27c>)
 8001626:	f883 2020 	strb.w	r2, [r3, #32]
	// MSB
	uint8_t p1_msb, p2_msb, p4_msb, p5_msb, p8_msb, p9_msb;
	uint8_t p3, p6, p7, p10;

	// Read pressure calibration registers
	API_BME680_readRegister(BME680_REG_PAR_P1_LSB, &p1_lsb);
 800162a:	f107 031a 	add.w	r3, r7, #26
 800162e:	4619      	mov	r1, r3
 8001630:	208e      	movs	r0, #142	@ 0x8e
 8001632:	f000 f923 	bl	800187c <API_BME680_readRegister>
	API_BME680_readRegister(BME680_REG_PAR_P1_MSB, &p1_msb);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	208f      	movs	r0, #143	@ 0x8f
 800163e:	f000 f91d 	bl	800187c <API_BME680_readRegister>
	calib.par_p1 = (uint16_t) ((p1_msb << 8) | p1_lsb);
 8001642:	7d3b      	ldrb	r3, [r7, #20]
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	b21a      	sxth	r2, r3
 8001648:	7ebb      	ldrb	r3, [r7, #26]
 800164a:	b21b      	sxth	r3, r3
 800164c:	4313      	orrs	r3, r2
 800164e:	b21b      	sxth	r3, r3
 8001650:	b29a      	uxth	r2, r3
 8001652:	4b78      	ldr	r3, [pc, #480]	@ (8001834 <API_BME680_readCalibrationData+0x27c>)
 8001654:	849a      	strh	r2, [r3, #36]	@ 0x24

	API_BME680_readRegister(BME680_REG_PAR_P2_LSB, &p2_lsb);
 8001656:	f107 0319 	add.w	r3, r7, #25
 800165a:	4619      	mov	r1, r3
 800165c:	2090      	movs	r0, #144	@ 0x90
 800165e:	f000 f90d 	bl	800187c <API_BME680_readRegister>
	API_BME680_readRegister(BME680_REG_PAR_P2_MSB, &p2_msb);
 8001662:	f107 0313 	add.w	r3, r7, #19
 8001666:	4619      	mov	r1, r3
 8001668:	2091      	movs	r0, #145	@ 0x91
 800166a:	f000 f907 	bl	800187c <API_BME680_readRegister>
	calib.par_p2 = (int16_t) ((p2_msb << 8) | p2_lsb);
 800166e:	7cfb      	ldrb	r3, [r7, #19]
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	b21a      	sxth	r2, r3
 8001674:	7e7b      	ldrb	r3, [r7, #25]
 8001676:	b21b      	sxth	r3, r3
 8001678:	4313      	orrs	r3, r2
 800167a:	b21a      	sxth	r2, r3
 800167c:	4b6d      	ldr	r3, [pc, #436]	@ (8001834 <API_BME680_readCalibrationData+0x27c>)
 800167e:	84da      	strh	r2, [r3, #38]	@ 0x26

	API_BME680_readRegister(BME680_REG_PAR_P3, &p3);
 8001680:	f107 030e 	add.w	r3, r7, #14
 8001684:	4619      	mov	r1, r3
 8001686:	2092      	movs	r0, #146	@ 0x92
 8001688:	f000 f8f8 	bl	800187c <API_BME680_readRegister>
	calib.par_p3 = (int8_t) p3;
 800168c:	7bbb      	ldrb	r3, [r7, #14]
 800168e:	b25a      	sxtb	r2, r3
 8001690:	4b68      	ldr	r3, [pc, #416]	@ (8001834 <API_BME680_readCalibrationData+0x27c>)
 8001692:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

	API_BME680_readRegister(BME680_REG_PAR_P4_LSB, &p4_lsb);
 8001696:	f107 0318 	add.w	r3, r7, #24
 800169a:	4619      	mov	r1, r3
 800169c:	2094      	movs	r0, #148	@ 0x94
 800169e:	f000 f8ed 	bl	800187c <API_BME680_readRegister>
	API_BME680_readRegister(BME680_REG_PAR_P4_MSB, &p4_msb);
 80016a2:	f107 0312 	add.w	r3, r7, #18
 80016a6:	4619      	mov	r1, r3
 80016a8:	2095      	movs	r0, #149	@ 0x95
 80016aa:	f000 f8e7 	bl	800187c <API_BME680_readRegister>
	calib.par_p4 = (int16_t) ((p4_msb << 8) | p4_lsb);
 80016ae:	7cbb      	ldrb	r3, [r7, #18]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	b21a      	sxth	r2, r3
 80016b4:	7e3b      	ldrb	r3, [r7, #24]
 80016b6:	b21b      	sxth	r3, r3
 80016b8:	4313      	orrs	r3, r2
 80016ba:	b21a      	sxth	r2, r3
 80016bc:	4b5d      	ldr	r3, [pc, #372]	@ (8001834 <API_BME680_readCalibrationData+0x27c>)
 80016be:	855a      	strh	r2, [r3, #42]	@ 0x2a

	API_BME680_readRegister(BME680_REG_PAR_P5_LSB, &p5_lsb);
 80016c0:	f107 0317 	add.w	r3, r7, #23
 80016c4:	4619      	mov	r1, r3
 80016c6:	2096      	movs	r0, #150	@ 0x96
 80016c8:	f000 f8d8 	bl	800187c <API_BME680_readRegister>
	API_BME680_readRegister(BME680_REG_PAR_P5_MSB, &p5_msb);
 80016cc:	f107 0311 	add.w	r3, r7, #17
 80016d0:	4619      	mov	r1, r3
 80016d2:	2097      	movs	r0, #151	@ 0x97
 80016d4:	f000 f8d2 	bl	800187c <API_BME680_readRegister>
	calib.par_p5 = (int16_t) ((p5_msb << 8) | p5_lsb);
 80016d8:	7c7b      	ldrb	r3, [r7, #17]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	b21a      	sxth	r2, r3
 80016de:	7dfb      	ldrb	r3, [r7, #23]
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	4b53      	ldr	r3, [pc, #332]	@ (8001834 <API_BME680_readCalibrationData+0x27c>)
 80016e8:	859a      	strh	r2, [r3, #44]	@ 0x2c

	API_BME680_readRegister(BME680_REG_PAR_P6, &p6);
 80016ea:	f107 030d 	add.w	r3, r7, #13
 80016ee:	4619      	mov	r1, r3
 80016f0:	2099      	movs	r0, #153	@ 0x99
 80016f2:	f000 f8c3 	bl	800187c <API_BME680_readRegister>
	calib.par_p6 = (int8_t) p6;
 80016f6:	7b7b      	ldrb	r3, [r7, #13]
 80016f8:	b25a      	sxtb	r2, r3
 80016fa:	4b4e      	ldr	r3, [pc, #312]	@ (8001834 <API_BME680_readCalibrationData+0x27c>)
 80016fc:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

	API_BME680_readRegister(BME680_REG_PAR_P7, &p7);
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	4619      	mov	r1, r3
 8001706:	2098      	movs	r0, #152	@ 0x98
 8001708:	f000 f8b8 	bl	800187c <API_BME680_readRegister>
	calib.par_p7 = (int8_t) p7;
 800170c:	7b3b      	ldrb	r3, [r7, #12]
 800170e:	b25a      	sxtb	r2, r3
 8001710:	4b48      	ldr	r3, [pc, #288]	@ (8001834 <API_BME680_readCalibrationData+0x27c>)
 8001712:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	API_BME680_readRegister(BME680_REG_PAR_P8_LSB, &p8_lsb);
 8001716:	f107 0316 	add.w	r3, r7, #22
 800171a:	4619      	mov	r1, r3
 800171c:	209c      	movs	r0, #156	@ 0x9c
 800171e:	f000 f8ad 	bl	800187c <API_BME680_readRegister>
	API_BME680_readRegister(BME680_REG_PAR_P8_MSB, &p8_msb);
 8001722:	f107 0310 	add.w	r3, r7, #16
 8001726:	4619      	mov	r1, r3
 8001728:	209d      	movs	r0, #157	@ 0x9d
 800172a:	f000 f8a7 	bl	800187c <API_BME680_readRegister>
	calib.par_p8 = (int16_t) ((p8_msb << 8) | p8_lsb);
 800172e:	7c3b      	ldrb	r3, [r7, #16]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	b21a      	sxth	r2, r3
 8001734:	7dbb      	ldrb	r3, [r7, #22]
 8001736:	b21b      	sxth	r3, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	b21a      	sxth	r2, r3
 800173c:	4b3d      	ldr	r3, [pc, #244]	@ (8001834 <API_BME680_readCalibrationData+0x27c>)
 800173e:	861a      	strh	r2, [r3, #48]	@ 0x30

	API_BME680_readRegister(BME680_REG_PAR_P9_LSB, &p9_lsb);
 8001740:	f107 0315 	add.w	r3, r7, #21
 8001744:	4619      	mov	r1, r3
 8001746:	209e      	movs	r0, #158	@ 0x9e
 8001748:	f000 f898 	bl	800187c <API_BME680_readRegister>
	API_BME680_readRegister(BME680_REG_PAR_P9_MSB, &p9_msb);
 800174c:	f107 030f 	add.w	r3, r7, #15
 8001750:	4619      	mov	r1, r3
 8001752:	209f      	movs	r0, #159	@ 0x9f
 8001754:	f000 f892 	bl	800187c <API_BME680_readRegister>
	calib.par_p9 = (int16_t) ((p9_msb << 8) | p9_lsb);
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	b21a      	sxth	r2, r3
 800175e:	7d7b      	ldrb	r3, [r7, #21]
 8001760:	b21b      	sxth	r3, r3
 8001762:	4313      	orrs	r3, r2
 8001764:	b21a      	sxth	r2, r3
 8001766:	4b33      	ldr	r3, [pc, #204]	@ (8001834 <API_BME680_readCalibrationData+0x27c>)
 8001768:	865a      	strh	r2, [r3, #50]	@ 0x32

	API_BME680_readRegister(BME680_REG_PAR_P10, &p10);
 800176a:	f107 030b 	add.w	r3, r7, #11
 800176e:	4619      	mov	r1, r3
 8001770:	20a0      	movs	r0, #160	@ 0xa0
 8001772:	f000 f883 	bl	800187c <API_BME680_readRegister>
	calib.par_p10 = (uint8_t) p10;
 8001776:	7afa      	ldrb	r2, [r7, #11]
 8001778:	4b2e      	ldr	r3, [pc, #184]	@ (8001834 <API_BME680_readCalibrationData+0x27c>)
 800177a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	// MSB
	uint8_t h1_msb, h2_msb;
	uint8_t h3, h4, h5, h6, h7;

	// Read pressure calibration registers
	API_BME680_readRegister(BME680_REG_PAR_H1_LSB, &h1_lsb);
 800177e:	f107 030a 	add.w	r3, r7, #10
 8001782:	4619      	mov	r1, r3
 8001784:	20e2      	movs	r0, #226	@ 0xe2
 8001786:	f000 f879 	bl	800187c <API_BME680_readRegister>
	API_BME680_readRegister(BME680_REG_PAR_H1_MSB, &h1_msb);
 800178a:	f107 0308 	add.w	r3, r7, #8
 800178e:	4619      	mov	r1, r3
 8001790:	20e3      	movs	r0, #227	@ 0xe3
 8001792:	f000 f873 	bl	800187c <API_BME680_readRegister>
	calib.par_h1 = (uint16_t) ((h1_msb << 8) | h1_lsb);
 8001796:	7a3b      	ldrb	r3, [r7, #8]
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	b21a      	sxth	r2, r3
 800179c:	7abb      	ldrb	r3, [r7, #10]
 800179e:	b21b      	sxth	r3, r3
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	4b23      	ldr	r3, [pc, #140]	@ (8001834 <API_BME680_readCalibrationData+0x27c>)
 80017a8:	801a      	strh	r2, [r3, #0]

	API_BME680_readRegister(BME680_REG_PAR_H2_LSB, &h2_lsb);
 80017aa:	f107 0309 	add.w	r3, r7, #9
 80017ae:	4619      	mov	r1, r3
 80017b0:	20e2      	movs	r0, #226	@ 0xe2
 80017b2:	f000 f863 	bl	800187c <API_BME680_readRegister>
	API_BME680_readRegister(BME680_REG_PAR_H2_MSB, &h2_msb);
 80017b6:	1dfb      	adds	r3, r7, #7
 80017b8:	4619      	mov	r1, r3
 80017ba:	20e1      	movs	r0, #225	@ 0xe1
 80017bc:	f000 f85e 	bl	800187c <API_BME680_readRegister>
	calib.par_h2 = (int16_t) ((h2_msb << 8) | h2_lsb);
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	7a7b      	ldrb	r3, [r7, #9]
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	4313      	orrs	r3, r2
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	4b18      	ldr	r3, [pc, #96]	@ (8001834 <API_BME680_readCalibrationData+0x27c>)
 80017d2:	805a      	strh	r2, [r3, #2]

	API_BME680_readRegister(BME680_REG_PAR_H3, &h3);
 80017d4:	1dbb      	adds	r3, r7, #6
 80017d6:	4619      	mov	r1, r3
 80017d8:	20e4      	movs	r0, #228	@ 0xe4
 80017da:	f000 f84f 	bl	800187c <API_BME680_readRegister>
	calib.par_h3 = (uint8_t) h3;
 80017de:	79bb      	ldrb	r3, [r7, #6]
 80017e0:	b25a      	sxtb	r2, r3
 80017e2:	4b14      	ldr	r3, [pc, #80]	@ (8001834 <API_BME680_readCalibrationData+0x27c>)
 80017e4:	711a      	strb	r2, [r3, #4]

	API_BME680_readRegister(BME680_REG_PAR_H4, &h4);
 80017e6:	1d7b      	adds	r3, r7, #5
 80017e8:	4619      	mov	r1, r3
 80017ea:	20e5      	movs	r0, #229	@ 0xe5
 80017ec:	f000 f846 	bl	800187c <API_BME680_readRegister>
	calib.par_h4 = (uint8_t) h4;
 80017f0:	797b      	ldrb	r3, [r7, #5]
 80017f2:	b25a      	sxtb	r2, r3
 80017f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001834 <API_BME680_readCalibrationData+0x27c>)
 80017f6:	715a      	strb	r2, [r3, #5]

	API_BME680_readRegister(BME680_REG_PAR_H5, &h5);
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	4619      	mov	r1, r3
 80017fc:	20e6      	movs	r0, #230	@ 0xe6
 80017fe:	f000 f83d 	bl	800187c <API_BME680_readRegister>
	calib.par_h5 = (uint8_t) h5;
 8001802:	793b      	ldrb	r3, [r7, #4]
 8001804:	b25a      	sxtb	r2, r3
 8001806:	4b0b      	ldr	r3, [pc, #44]	@ (8001834 <API_BME680_readCalibrationData+0x27c>)
 8001808:	719a      	strb	r2, [r3, #6]

	API_BME680_readRegister(BME680_REG_PAR_H6, &h6);
 800180a:	1cfb      	adds	r3, r7, #3
 800180c:	4619      	mov	r1, r3
 800180e:	20e7      	movs	r0, #231	@ 0xe7
 8001810:	f000 f834 	bl	800187c <API_BME680_readRegister>
	calib.par_h6 = (uint8_t) h6;
 8001814:	78fa      	ldrb	r2, [r7, #3]
 8001816:	4b07      	ldr	r3, [pc, #28]	@ (8001834 <API_BME680_readCalibrationData+0x27c>)
 8001818:	71da      	strb	r2, [r3, #7]

	API_BME680_readRegister(BME680_REG_PAR_H7, &h7);
 800181a:	1cbb      	adds	r3, r7, #2
 800181c:	4619      	mov	r1, r3
 800181e:	20e8      	movs	r0, #232	@ 0xe8
 8001820:	f000 f82c 	bl	800187c <API_BME680_readRegister>
	calib.par_h7 = (uint8_t) h7;
 8001824:	78bb      	ldrb	r3, [r7, #2]
 8001826:	b25a      	sxtb	r2, r3
 8001828:	4b02      	ldr	r3, [pc, #8]	@ (8001834 <API_BME680_readCalibrationData+0x27c>)
 800182a:	721a      	strb	r2, [r3, #8]

}
 800182c:	bf00      	nop
 800182e:	3720      	adds	r7, #32
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000028 	.word	0x20000028

08001838 <API_BME680_writeRegister>:

/* Private API code ----------------------------------------------------------*/

/* Function Implementations --------------------------------------------------*/

static void API_BME680_writeRegister(uint8_t reg, uint8_t value) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	460a      	mov	r2, r1
 8001842:	71fb      	strb	r3, [r7, #7]
 8001844:	4613      	mov	r3, r2
 8001846:	71bb      	strb	r3, [r7, #6]

	reg &= BME680_SPI_WRITE_MASK; // Asegúrate de que el bit de escritura esté limpio
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800184e:	b2db      	uxtb	r3, r3
 8001850:	71fb      	strb	r3, [r7, #7]

	API_BME680_selectPin();
 8001852:	f000 f8eb 	bl	8001a2c <API_BME680_selectPin>
	API_BME680_HAL_Transmit(&reg, sizeof(reg));
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	2101      	movs	r1, #1
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f8be 	bl	80019dc <API_BME680_HAL_Transmit>
	API_BME680_HAL_Transmit(&value, sizeof(value)); //////////
 8001860:	1dbb      	adds	r3, r7, #6
 8001862:	2101      	movs	r1, #1
 8001864:	4618      	mov	r0, r3
 8001866:	f000 f8b9 	bl	80019dc <API_BME680_HAL_Transmit>
	API_BME680_deselectPin();
 800186a:	f000 f8eb 	bl	8001a44 <API_BME680_deselectPin>

	API_BME680_HAL_Delay(10);
 800186e:	200a      	movs	r0, #10
 8001870:	f000 f820 	bl	80018b4 <API_BME680_HAL_Delay>

}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <API_BME680_readRegister>:

static void API_BME680_readRegister(uint8_t reg, uint8_t *data) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]

	reg |= BME680_SPI_READ_MASK;
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800188e:	b2db      	uxtb	r3, r3
 8001890:	71fb      	strb	r3, [r7, #7]

	API_BME680_selectPin();
 8001892:	f000 f8cb 	bl	8001a2c <API_BME680_selectPin>
	API_BME680_HAL_Transmit(&reg, 1);
 8001896:	1dfb      	adds	r3, r7, #7
 8001898:	2101      	movs	r1, #1
 800189a:	4618      	mov	r0, r3
 800189c:	f000 f89e 	bl	80019dc <API_BME680_HAL_Transmit>
	API_BME680_HAL_Receive(data, 1);
 80018a0:	2101      	movs	r1, #1
 80018a2:	6838      	ldr	r0, [r7, #0]
 80018a4:	f000 f8ae 	bl	8001a04 <API_BME680_HAL_Receive>
	API_BME680_deselectPin();
 80018a8:	f000 f8cc 	bl	8001a44 <API_BME680_deselectPin>

}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <API_BME680_HAL_Delay>:

#define TIMEOUT 1000

/* HAL API code --------------------------------------------------------------*/

void API_BME680_HAL_Delay(uint32_t delay) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	 * @note This function is declared as __weak to be overwritten in case of other
	 *       implementations in user file.
	 * @param Delay specifies the delay time length, in milliseconds.
	 * @retval None
	 */
	HAL_Delay(delay);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f97f 	bl	8001bc0 <HAL_Delay>

}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <API_BME680_HAL_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void API_BME680_HAL_GPIO_Init(void) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	4b20      	ldr	r3, [pc, #128]	@ (8001968 <API_BME680_HAL_GPIO_Init+0x9c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001968 <API_BME680_HAL_GPIO_Init+0x9c>)
 80018ec:	f043 0310 	orr.w	r3, r3, #16
 80018f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001968 <API_BME680_HAL_GPIO_Init+0x9c>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	f003 0310 	and.w	r3, r3, #16
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <API_BME680_HAL_GPIO_Init+0x9c>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	4a18      	ldr	r2, [pc, #96]	@ (8001968 <API_BME680_HAL_GPIO_Init+0x9c>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6313      	str	r3, [r2, #48]	@ 0x30
 800190e:	4b16      	ldr	r3, [pc, #88]	@ (8001968 <API_BME680_HAL_GPIO_Init+0x9c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	603b      	str	r3, [r7, #0]
 800191e:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <API_BME680_HAL_GPIO_Init+0x9c>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	4a11      	ldr	r2, [pc, #68]	@ (8001968 <API_BME680_HAL_GPIO_Init+0x9c>)
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	6313      	str	r3, [r2, #48]	@ 0x30
 800192a:	4b0f      	ldr	r3, [pc, #60]	@ (8001968 <API_BME680_HAL_GPIO_Init+0x9c>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_Output_GPIO_Port, CS_Output_Pin, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800193c:	480b      	ldr	r0, [pc, #44]	@ (800196c <API_BME680_HAL_GPIO_Init+0xa0>)
 800193e:	f000 fbf5 	bl	800212c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CS_Output_Pin */
	GPIO_InitStruct.Pin = CS_Output_Pin;
 8001942:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001946:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001948:	2301      	movs	r3, #1
 800194a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(CS_Output_GPIO_Port, &GPIO_InitStruct);
 8001954:	f107 030c 	add.w	r3, r7, #12
 8001958:	4619      	mov	r1, r3
 800195a:	4804      	ldr	r0, [pc, #16]	@ (800196c <API_BME680_HAL_GPIO_Init+0xa0>)
 800195c:	f000 fa3a 	bl	8001dd4 <HAL_GPIO_Init>

}
 8001960:	bf00      	nop
 8001962:	3720      	adds	r7, #32
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40023800 	.word	0x40023800
 800196c:	40020000 	.word	0x40020000

08001970 <API_BME680_HAL_SPI_Init>:
/**
 * @brief SPI1 Initialization Function with BME680 sensor
 * @param None
 * @retval None
 */
void API_BME680_HAL_SPI_Init(void) {
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0

	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001974:	4b17      	ldr	r3, [pc, #92]	@ (80019d4 <API_BME680_HAL_SPI_Init+0x64>)
 8001976:	4a18      	ldr	r2, [pc, #96]	@ (80019d8 <API_BME680_HAL_SPI_Init+0x68>)
 8001978:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800197a:	4b16      	ldr	r3, [pc, #88]	@ (80019d4 <API_BME680_HAL_SPI_Init+0x64>)
 800197c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001980:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001982:	4b14      	ldr	r3, [pc, #80]	@ (80019d4 <API_BME680_HAL_SPI_Init+0x64>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001988:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <API_BME680_HAL_SPI_Init+0x64>)
 800198a:	2200      	movs	r2, #0
 800198c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800198e:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <API_BME680_HAL_SPI_Init+0x64>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001994:	4b0f      	ldr	r3, [pc, #60]	@ (80019d4 <API_BME680_HAL_SPI_Init+0x64>)
 8001996:	2200      	movs	r2, #0
 8001998:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800199a:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <API_BME680_HAL_SPI_Init+0x64>)
 800199c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019a0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019a2:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <API_BME680_HAL_SPI_Init+0x64>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019a8:	4b0a      	ldr	r3, [pc, #40]	@ (80019d4 <API_BME680_HAL_SPI_Init+0x64>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019ae:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <API_BME680_HAL_SPI_Init+0x64>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019b4:	4b07      	ldr	r3, [pc, #28]	@ (80019d4 <API_BME680_HAL_SPI_Init+0x64>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 80019ba:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <API_BME680_HAL_SPI_Init+0x64>)
 80019bc:	220a      	movs	r2, #10
 80019be:	62da      	str	r2, [r3, #44]	@ 0x2c

	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80019c0:	4804      	ldr	r0, [pc, #16]	@ (80019d4 <API_BME680_HAL_SPI_Init+0x64>)
 80019c2:	f001 f9d1 	bl	8002d68 <HAL_SPI_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <API_BME680_HAL_SPI_Init+0x60>

		Error_Handler();
 80019cc:	f7ff fa0a 	bl	8000de4 <Error_Handler>

	}

}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	2000006c 	.word	0x2000006c
 80019d8:	40013000 	.word	0x40013000

080019dc <API_BME680_HAL_Transmit>:

// Transmitir datos a través de SPI
void API_BME680_HAL_Transmit(uint8_t *pData, uint16_t size) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	807b      	strh	r3, [r7, #2]

	HAL_SPI_Transmit(&hspi1, pData, size, TIMEOUT);
 80019e8:	887a      	ldrh	r2, [r7, #2]
 80019ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4803      	ldr	r0, [pc, #12]	@ (8001a00 <API_BME680_HAL_Transmit+0x24>)
 80019f2:	f001 fa42 	bl	8002e7a <HAL_SPI_Transmit>

}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2000006c 	.word	0x2000006c

08001a04 <API_BME680_HAL_Receive>:

// Recibir datos a través de SPI
void API_BME680_HAL_Receive(uint8_t *pData, uint16_t size) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]

	HAL_SPI_Receive(&hspi1, pData, size, TIMEOUT);
 8001a10:	887a      	ldrh	r2, [r7, #2]
 8001a12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	4803      	ldr	r0, [pc, #12]	@ (8001a28 <API_BME680_HAL_Receive+0x24>)
 8001a1a:	f001 fb71 	bl	8003100 <HAL_SPI_Receive>

}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2000006c 	.word	0x2000006c

08001a2c <API_BME680_selectPin>:

// Control del pin CS (Chip Select)
void API_BME680_selectPin(void) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS_Output_GPIO_Port, CS_Output_Pin, GPIO_PIN_RESET);
 8001a30:	2200      	movs	r2, #0
 8001a32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a36:	4802      	ldr	r0, [pc, #8]	@ (8001a40 <API_BME680_selectPin+0x14>)
 8001a38:	f000 fb78 	bl	800212c <HAL_GPIO_WritePin>

}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40020000 	.word	0x40020000

08001a44 <API_BME680_deselectPin>:

void API_BME680_deselectPin(void) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS_Output_GPIO_Port, CS_Output_Pin, GPIO_PIN_SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a4e:	4802      	ldr	r0, [pc, #8]	@ (8001a58 <API_BME680_deselectPin+0x14>)
 8001a50:	f000 fb6c 	bl	800212c <HAL_GPIO_WritePin>

}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40020000 	.word	0x40020000

08001a5c <API_display_HAL_I2C_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
void API_display_HAL_I2C_Init(void) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	/* I2C1 parameter configuration*/
	hi2c1.Instance = I2C1;
 8001a60:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad0 <API_display_HAL_I2C_Init+0x74>)
 8001a62:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad4 <API_display_HAL_I2C_Init+0x78>)
 8001a64:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <API_display_HAL_I2C_Init+0x74>)
 8001a68:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad8 <API_display_HAL_I2C_Init+0x7c>)
 8001a6a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a6c:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <API_display_HAL_I2C_Init+0x74>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001a72:	4b17      	ldr	r3, [pc, #92]	@ (8001ad0 <API_display_HAL_I2C_Init+0x74>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a78:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <API_display_HAL_I2C_Init+0x74>)
 8001a7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a7e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a80:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <API_display_HAL_I2C_Init+0x74>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001a86:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <API_display_HAL_I2C_Init+0x74>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <API_display_HAL_I2C_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <API_display_HAL_I2C_Init+0x74>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001a98:	480d      	ldr	r0, [pc, #52]	@ (8001ad0 <API_display_HAL_I2C_Init+0x74>)
 8001a9a:	f000 fb61 	bl	8002160 <HAL_I2C_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <API_display_HAL_I2C_Init+0x4c>
		Error_Handler();
 8001aa4:	f7ff f99e 	bl	8000de4 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4809      	ldr	r0, [pc, #36]	@ (8001ad0 <API_display_HAL_I2C_Init+0x74>)
 8001aac:	f000 fc9c 	bl	80023e8 <HAL_I2CEx_ConfigAnalogFilter>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <API_display_HAL_I2C_Init+0x5e>
		Error_Handler();
 8001ab6:	f7ff f995 	bl	8000de4 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001aba:	2100      	movs	r1, #0
 8001abc:	4804      	ldr	r0, [pc, #16]	@ (8001ad0 <API_display_HAL_I2C_Init+0x74>)
 8001abe:	f000 fccf 	bl	8002460 <HAL_I2CEx_ConfigDigitalFilter>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <API_display_HAL_I2C_Init+0x70>
		Error_Handler();
 8001ac8:	f7ff f98c 	bl	8000de4 <Error_Handler>
	}

}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	200000c4 	.word	0x200000c4
 8001ad4:	40005400 	.word	0x40005400
 8001ad8:	000186a0 	.word	0x000186a0

08001adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <HAL_Init+0x40>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b1c <HAL_Init+0x40>)
 8001ae6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aec:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <HAL_Init+0x40>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0a      	ldr	r2, [pc, #40]	@ (8001b1c <HAL_Init+0x40>)
 8001af2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001af6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af8:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <HAL_Init+0x40>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a07      	ldr	r2, [pc, #28]	@ (8001b1c <HAL_Init+0x40>)
 8001afe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b04:	2003      	movs	r0, #3
 8001b06:	f000 f931 	bl	8001d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0a:	200f      	movs	r0, #15
 8001b0c:	f000 f808 	bl	8001b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b10:	f7ff f96e 	bl	8000df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023c00 	.word	0x40023c00

08001b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b28:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <HAL_InitTick+0x54>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b12      	ldr	r3, [pc, #72]	@ (8001b78 <HAL_InitTick+0x58>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f93b 	bl	8001dba <HAL_SYSTICK_Config>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e00e      	b.n	8001b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b0f      	cmp	r3, #15
 8001b52:	d80a      	bhi.n	8001b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b54:	2200      	movs	r2, #0
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b5c:	f000 f911 	bl	8001d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b60:	4a06      	ldr	r2, [pc, #24]	@ (8001b7c <HAL_InitTick+0x5c>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e000      	b.n	8001b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000000 	.word	0x20000000
 8001b78:	20000008 	.word	0x20000008
 8001b7c:	20000004 	.word	0x20000004

08001b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b84:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <HAL_IncTick+0x20>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <HAL_IncTick+0x24>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4413      	add	r3, r2
 8001b90:	4a04      	ldr	r2, [pc, #16]	@ (8001ba4 <HAL_IncTick+0x24>)
 8001b92:	6013      	str	r3, [r2, #0]
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000008 	.word	0x20000008
 8001ba4:	20000118 	.word	0x20000118

08001ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bac:	4b03      	ldr	r3, [pc, #12]	@ (8001bbc <HAL_GetTick+0x14>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000118 	.word	0x20000118

08001bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc8:	f7ff ffee 	bl	8001ba8 <HAL_GetTick>
 8001bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bd8:	d005      	beq.n	8001be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bda:	4b0a      	ldr	r3, [pc, #40]	@ (8001c04 <HAL_Delay+0x44>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001be6:	bf00      	nop
 8001be8:	f7ff ffde 	bl	8001ba8 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d8f7      	bhi.n	8001be8 <HAL_Delay+0x28>
  {
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000008 	.word	0x20000008

08001c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c18:	4b0c      	ldr	r3, [pc, #48]	@ (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c24:	4013      	ands	r3, r2
 8001c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3a:	4a04      	ldr	r2, [pc, #16]	@ (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	60d3      	str	r3, [r2, #12]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c54:	4b04      	ldr	r3, [pc, #16]	@ (8001c68 <__NVIC_GetPriorityGrouping+0x18>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	f003 0307 	and.w	r3, r3, #7
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	6039      	str	r1, [r7, #0]
 8001c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	db0a      	blt.n	8001c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	490c      	ldr	r1, [pc, #48]	@ (8001cb8 <__NVIC_SetPriority+0x4c>)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	0112      	lsls	r2, r2, #4
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	440b      	add	r3, r1
 8001c90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c94:	e00a      	b.n	8001cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4908      	ldr	r1, [pc, #32]	@ (8001cbc <__NVIC_SetPriority+0x50>)
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	3b04      	subs	r3, #4
 8001ca4:	0112      	lsls	r2, r2, #4
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	440b      	add	r3, r1
 8001caa:	761a      	strb	r2, [r3, #24]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000e100 	.word	0xe000e100
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b089      	sub	sp, #36	@ 0x24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f1c3 0307 	rsb	r3, r3, #7
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	bf28      	it	cs
 8001cde:	2304      	movcs	r3, #4
 8001ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	d902      	bls.n	8001cf0 <NVIC_EncodePriority+0x30>
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3b03      	subs	r3, #3
 8001cee:	e000      	b.n	8001cf2 <NVIC_EncodePriority+0x32>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	401a      	ands	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d12:	43d9      	mvns	r1, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	4313      	orrs	r3, r2
         );
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3724      	adds	r7, #36	@ 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
	...

08001d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d38:	d301      	bcc.n	8001d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e00f      	b.n	8001d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d68 <SysTick_Config+0x40>)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d46:	210f      	movs	r1, #15
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d4c:	f7ff ff8e 	bl	8001c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d50:	4b05      	ldr	r3, [pc, #20]	@ (8001d68 <SysTick_Config+0x40>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d56:	4b04      	ldr	r3, [pc, #16]	@ (8001d68 <SysTick_Config+0x40>)
 8001d58:	2207      	movs	r2, #7
 8001d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	e000e010 	.word	0xe000e010

08001d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ff47 	bl	8001c08 <__NVIC_SetPriorityGrouping>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d94:	f7ff ff5c 	bl	8001c50 <__NVIC_GetPriorityGrouping>
 8001d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	6978      	ldr	r0, [r7, #20]
 8001da0:	f7ff ff8e 	bl	8001cc0 <NVIC_EncodePriority>
 8001da4:	4602      	mov	r2, r0
 8001da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff5d 	bl	8001c6c <__NVIC_SetPriority>
}
 8001db2:	bf00      	nop
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ffb0 	bl	8001d28 <SysTick_Config>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	@ 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	e177      	b.n	80020e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001df0:	2201      	movs	r2, #1
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	f040 8166 	bne.w	80020da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d005      	beq.n	8001e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d130      	bne.n	8001e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	2203      	movs	r2, #3
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 0201 	and.w	r2, r3, #1
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	d017      	beq.n	8001ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d123      	bne.n	8001f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	08da      	lsrs	r2, r3, #3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3208      	adds	r2, #8
 8001ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	08da      	lsrs	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3208      	adds	r2, #8
 8001f12:	69b9      	ldr	r1, [r7, #24]
 8001f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0203 	and.w	r2, r3, #3
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80c0 	beq.w	80020da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b66      	ldr	r3, [pc, #408]	@ (80020f8 <HAL_GPIO_Init+0x324>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f62:	4a65      	ldr	r2, [pc, #404]	@ (80020f8 <HAL_GPIO_Init+0x324>)
 8001f64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f6a:	4b63      	ldr	r3, [pc, #396]	@ (80020f8 <HAL_GPIO_Init+0x324>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f76:	4a61      	ldr	r2, [pc, #388]	@ (80020fc <HAL_GPIO_Init+0x328>)
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	089b      	lsrs	r3, r3, #2
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	220f      	movs	r2, #15
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a58      	ldr	r2, [pc, #352]	@ (8002100 <HAL_GPIO_Init+0x32c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d037      	beq.n	8002012 <HAL_GPIO_Init+0x23e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a57      	ldr	r2, [pc, #348]	@ (8002104 <HAL_GPIO_Init+0x330>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d031      	beq.n	800200e <HAL_GPIO_Init+0x23a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a56      	ldr	r2, [pc, #344]	@ (8002108 <HAL_GPIO_Init+0x334>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d02b      	beq.n	800200a <HAL_GPIO_Init+0x236>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a55      	ldr	r2, [pc, #340]	@ (800210c <HAL_GPIO_Init+0x338>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d025      	beq.n	8002006 <HAL_GPIO_Init+0x232>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a54      	ldr	r2, [pc, #336]	@ (8002110 <HAL_GPIO_Init+0x33c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d01f      	beq.n	8002002 <HAL_GPIO_Init+0x22e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a53      	ldr	r2, [pc, #332]	@ (8002114 <HAL_GPIO_Init+0x340>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d019      	beq.n	8001ffe <HAL_GPIO_Init+0x22a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a52      	ldr	r2, [pc, #328]	@ (8002118 <HAL_GPIO_Init+0x344>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d013      	beq.n	8001ffa <HAL_GPIO_Init+0x226>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a51      	ldr	r2, [pc, #324]	@ (800211c <HAL_GPIO_Init+0x348>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00d      	beq.n	8001ff6 <HAL_GPIO_Init+0x222>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a50      	ldr	r2, [pc, #320]	@ (8002120 <HAL_GPIO_Init+0x34c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d007      	beq.n	8001ff2 <HAL_GPIO_Init+0x21e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4f      	ldr	r2, [pc, #316]	@ (8002124 <HAL_GPIO_Init+0x350>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d101      	bne.n	8001fee <HAL_GPIO_Init+0x21a>
 8001fea:	2309      	movs	r3, #9
 8001fec:	e012      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8001fee:	230a      	movs	r3, #10
 8001ff0:	e010      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8001ff2:	2308      	movs	r3, #8
 8001ff4:	e00e      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8001ff6:	2307      	movs	r3, #7
 8001ff8:	e00c      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8001ffa:	2306      	movs	r3, #6
 8001ffc:	e00a      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8001ffe:	2305      	movs	r3, #5
 8002000:	e008      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8002002:	2304      	movs	r3, #4
 8002004:	e006      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8002006:	2303      	movs	r3, #3
 8002008:	e004      	b.n	8002014 <HAL_GPIO_Init+0x240>
 800200a:	2302      	movs	r3, #2
 800200c:	e002      	b.n	8002014 <HAL_GPIO_Init+0x240>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8002012:	2300      	movs	r3, #0
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	f002 0203 	and.w	r2, r2, #3
 800201a:	0092      	lsls	r2, r2, #2
 800201c:	4093      	lsls	r3, r2
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002024:	4935      	ldr	r1, [pc, #212]	@ (80020fc <HAL_GPIO_Init+0x328>)
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	089b      	lsrs	r3, r3, #2
 800202a:	3302      	adds	r3, #2
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002032:	4b3d      	ldr	r3, [pc, #244]	@ (8002128 <HAL_GPIO_Init+0x354>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002056:	4a34      	ldr	r2, [pc, #208]	@ (8002128 <HAL_GPIO_Init+0x354>)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800205c:	4b32      	ldr	r3, [pc, #200]	@ (8002128 <HAL_GPIO_Init+0x354>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002080:	4a29      	ldr	r2, [pc, #164]	@ (8002128 <HAL_GPIO_Init+0x354>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002086:	4b28      	ldr	r3, [pc, #160]	@ (8002128 <HAL_GPIO_Init+0x354>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002128 <HAL_GPIO_Init+0x354>)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002128 <HAL_GPIO_Init+0x354>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020d4:	4a14      	ldr	r2, [pc, #80]	@ (8002128 <HAL_GPIO_Init+0x354>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3301      	adds	r3, #1
 80020de:	61fb      	str	r3, [r7, #28]
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	2b0f      	cmp	r3, #15
 80020e4:	f67f ae84 	bls.w	8001df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	3724      	adds	r7, #36	@ 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40013800 	.word	0x40013800
 8002100:	40020000 	.word	0x40020000
 8002104:	40020400 	.word	0x40020400
 8002108:	40020800 	.word	0x40020800
 800210c:	40020c00 	.word	0x40020c00
 8002110:	40021000 	.word	0x40021000
 8002114:	40021400 	.word	0x40021400
 8002118:	40021800 	.word	0x40021800
 800211c:	40021c00 	.word	0x40021c00
 8002120:	40022000 	.word	0x40022000
 8002124:	40022400 	.word	0x40022400
 8002128:	40013c00 	.word	0x40013c00

0800212c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	807b      	strh	r3, [r7, #2]
 8002138:	4613      	mov	r3, r2
 800213a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800213c:	787b      	ldrb	r3, [r7, #1]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002142:	887a      	ldrh	r2, [r7, #2]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002148:	e003      	b.n	8002152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800214a:	887b      	ldrh	r3, [r7, #2]
 800214c:	041a      	lsls	r2, r3, #16
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	619a      	str	r2, [r3, #24]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e12b      	b.n	80023ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe fe5a 	bl	8000e40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2224      	movs	r2, #36	@ 0x24
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021c4:	f000 fdbc 	bl	8002d40 <HAL_RCC_GetPCLK1Freq>
 80021c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4a81      	ldr	r2, [pc, #516]	@ (80023d4 <HAL_I2C_Init+0x274>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d807      	bhi.n	80021e4 <HAL_I2C_Init+0x84>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4a80      	ldr	r2, [pc, #512]	@ (80023d8 <HAL_I2C_Init+0x278>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	bf94      	ite	ls
 80021dc:	2301      	movls	r3, #1
 80021de:	2300      	movhi	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	e006      	b.n	80021f2 <HAL_I2C_Init+0x92>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4a7d      	ldr	r2, [pc, #500]	@ (80023dc <HAL_I2C_Init+0x27c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	bf94      	ite	ls
 80021ec:	2301      	movls	r3, #1
 80021ee:	2300      	movhi	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e0e7      	b.n	80023ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4a78      	ldr	r2, [pc, #480]	@ (80023e0 <HAL_I2C_Init+0x280>)
 80021fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002202:	0c9b      	lsrs	r3, r3, #18
 8002204:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	430a      	orrs	r2, r1
 8002218:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4a6a      	ldr	r2, [pc, #424]	@ (80023d4 <HAL_I2C_Init+0x274>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d802      	bhi.n	8002234 <HAL_I2C_Init+0xd4>
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	3301      	adds	r3, #1
 8002232:	e009      	b.n	8002248 <HAL_I2C_Init+0xe8>
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800223a:	fb02 f303 	mul.w	r3, r2, r3
 800223e:	4a69      	ldr	r2, [pc, #420]	@ (80023e4 <HAL_I2C_Init+0x284>)
 8002240:	fba2 2303 	umull	r2, r3, r2, r3
 8002244:	099b      	lsrs	r3, r3, #6
 8002246:	3301      	adds	r3, #1
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	430b      	orrs	r3, r1
 800224e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800225a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	495c      	ldr	r1, [pc, #368]	@ (80023d4 <HAL_I2C_Init+0x274>)
 8002264:	428b      	cmp	r3, r1
 8002266:	d819      	bhi.n	800229c <HAL_I2C_Init+0x13c>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	1e59      	subs	r1, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	fbb1 f3f3 	udiv	r3, r1, r3
 8002276:	1c59      	adds	r1, r3, #1
 8002278:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800227c:	400b      	ands	r3, r1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_I2C_Init+0x138>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1e59      	subs	r1, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002290:	3301      	adds	r3, #1
 8002292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002296:	e051      	b.n	800233c <HAL_I2C_Init+0x1dc>
 8002298:	2304      	movs	r3, #4
 800229a:	e04f      	b.n	800233c <HAL_I2C_Init+0x1dc>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d111      	bne.n	80022c8 <HAL_I2C_Init+0x168>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1e58      	subs	r0, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	440b      	add	r3, r1
 80022b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b6:	3301      	adds	r3, #1
 80022b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022bc:	2b00      	cmp	r3, #0
 80022be:	bf0c      	ite	eq
 80022c0:	2301      	moveq	r3, #1
 80022c2:	2300      	movne	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	e012      	b.n	80022ee <HAL_I2C_Init+0x18e>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1e58      	subs	r0, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6859      	ldr	r1, [r3, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	0099      	lsls	r1, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	fbb0 f3f3 	udiv	r3, r0, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf0c      	ite	eq
 80022e8:	2301      	moveq	r3, #1
 80022ea:	2300      	movne	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_Init+0x196>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e022      	b.n	800233c <HAL_I2C_Init+0x1dc>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10e      	bne.n	800231c <HAL_I2C_Init+0x1bc>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1e58      	subs	r0, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6859      	ldr	r1, [r3, #4]
 8002306:	460b      	mov	r3, r1
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	440b      	add	r3, r1
 800230c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002310:	3301      	adds	r3, #1
 8002312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002316:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800231a:	e00f      	b.n	800233c <HAL_I2C_Init+0x1dc>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1e58      	subs	r0, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	0099      	lsls	r1, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002332:	3301      	adds	r3, #1
 8002334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002338:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	6809      	ldr	r1, [r1, #0]
 8002340:	4313      	orrs	r3, r2
 8002342:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69da      	ldr	r2, [r3, #28]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800236a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6911      	ldr	r1, [r2, #16]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68d2      	ldr	r2, [r2, #12]
 8002376:	4311      	orrs	r1, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	430b      	orrs	r3, r1
 800237e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	000186a0 	.word	0x000186a0
 80023d8:	001e847f 	.word	0x001e847f
 80023dc:	003d08ff 	.word	0x003d08ff
 80023e0:	431bde83 	.word	0x431bde83
 80023e4:	10624dd3 	.word	0x10624dd3

080023e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b20      	cmp	r3, #32
 80023fc:	d129      	bne.n	8002452 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2224      	movs	r2, #36	@ 0x24
 8002402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0201 	bic.w	r2, r2, #1
 8002414:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0210 	bic.w	r2, r2, #16
 8002424:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 0201 	orr.w	r2, r2, #1
 8002444:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	e000      	b.n	8002454 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002452:	2302      	movs	r3, #2
  }
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b20      	cmp	r3, #32
 8002478:	d12a      	bne.n	80024d0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2224      	movs	r2, #36	@ 0x24
 800247e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0201 	bic.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002498:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800249a:	89fb      	ldrh	r3, [r7, #14]
 800249c:	f023 030f 	bic.w	r3, r3, #15
 80024a0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	89fb      	ldrh	r3, [r7, #14]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	89fa      	ldrh	r2, [r7, #14]
 80024b2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0201 	orr.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2220      	movs	r2, #32
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	e000      	b.n	80024d2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80024d0:	2302      	movs	r3, #2
  }
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e267      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d075      	beq.n	80025ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024fe:	4b88      	ldr	r3, [pc, #544]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b04      	cmp	r3, #4
 8002508:	d00c      	beq.n	8002524 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800250a:	4b85      	ldr	r3, [pc, #532]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002512:	2b08      	cmp	r3, #8
 8002514:	d112      	bne.n	800253c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002516:	4b82      	ldr	r3, [pc, #520]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800251e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002522:	d10b      	bne.n	800253c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002524:	4b7e      	ldr	r3, [pc, #504]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d05b      	beq.n	80025e8 <HAL_RCC_OscConfig+0x108>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d157      	bne.n	80025e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e242      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002544:	d106      	bne.n	8002554 <HAL_RCC_OscConfig+0x74>
 8002546:	4b76      	ldr	r3, [pc, #472]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a75      	ldr	r2, [pc, #468]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 800254c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e01d      	b.n	8002590 <HAL_RCC_OscConfig+0xb0>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0x98>
 800255e:	4b70      	ldr	r3, [pc, #448]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a6f      	ldr	r2, [pc, #444]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002564:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b6d      	ldr	r3, [pc, #436]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a6c      	ldr	r2, [pc, #432]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e00b      	b.n	8002590 <HAL_RCC_OscConfig+0xb0>
 8002578:	4b69      	ldr	r3, [pc, #420]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a68      	ldr	r2, [pc, #416]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 800257e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	4b66      	ldr	r3, [pc, #408]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a65      	ldr	r2, [pc, #404]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 800258a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800258e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d013      	beq.n	80025c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7ff fb06 	bl	8001ba8 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a0:	f7ff fb02 	bl	8001ba8 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	@ 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e207      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0xc0>
 80025be:	e014      	b.n	80025ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7ff faf2 	bl	8001ba8 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c8:	f7ff faee 	bl	8001ba8 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	@ 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e1f3      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025da:	4b51      	ldr	r3, [pc, #324]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0xe8>
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d063      	beq.n	80026be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00b      	beq.n	800261a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002602:	4b47      	ldr	r3, [pc, #284]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800260a:	2b08      	cmp	r3, #8
 800260c:	d11c      	bne.n	8002648 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800260e:	4b44      	ldr	r3, [pc, #272]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d116      	bne.n	8002648 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261a:	4b41      	ldr	r3, [pc, #260]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <HAL_RCC_OscConfig+0x152>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e1c7      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002632:	4b3b      	ldr	r3, [pc, #236]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4937      	ldr	r1, [pc, #220]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002646:	e03a      	b.n	80026be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d020      	beq.n	8002692 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002650:	4b34      	ldr	r3, [pc, #208]	@ (8002724 <HAL_RCC_OscConfig+0x244>)
 8002652:	2201      	movs	r2, #1
 8002654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002656:	f7ff faa7 	bl	8001ba8 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265e:	f7ff faa3 	bl	8001ba8 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e1a8      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002670:	4b2b      	ldr	r3, [pc, #172]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267c:	4b28      	ldr	r3, [pc, #160]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4925      	ldr	r1, [pc, #148]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]
 8002690:	e015      	b.n	80026be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002692:	4b24      	ldr	r3, [pc, #144]	@ (8002724 <HAL_RCC_OscConfig+0x244>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002698:	f7ff fa86 	bl	8001ba8 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026a0:	f7ff fa82 	bl	8001ba8 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e187      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d036      	beq.n	8002738 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d016      	beq.n	8002700 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d2:	4b15      	ldr	r3, [pc, #84]	@ (8002728 <HAL_RCC_OscConfig+0x248>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d8:	f7ff fa66 	bl	8001ba8 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e0:	f7ff fa62 	bl	8001ba8 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e167      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002720 <HAL_RCC_OscConfig+0x240>)
 80026f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x200>
 80026fe:	e01b      	b.n	8002738 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002700:	4b09      	ldr	r3, [pc, #36]	@ (8002728 <HAL_RCC_OscConfig+0x248>)
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002706:	f7ff fa4f 	bl	8001ba8 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800270c:	e00e      	b.n	800272c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800270e:	f7ff fa4b 	bl	8001ba8 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d907      	bls.n	800272c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e150      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
 8002720:	40023800 	.word	0x40023800
 8002724:	42470000 	.word	0x42470000
 8002728:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272c:	4b88      	ldr	r3, [pc, #544]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 800272e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1ea      	bne.n	800270e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 8097 	beq.w	8002874 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002746:	2300      	movs	r3, #0
 8002748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800274a:	4b81      	ldr	r3, [pc, #516]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10f      	bne.n	8002776 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	4b7d      	ldr	r3, [pc, #500]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	4a7c      	ldr	r2, [pc, #496]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 8002760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002764:	6413      	str	r3, [r2, #64]	@ 0x40
 8002766:	4b7a      	ldr	r3, [pc, #488]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002772:	2301      	movs	r3, #1
 8002774:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002776:	4b77      	ldr	r3, [pc, #476]	@ (8002954 <HAL_RCC_OscConfig+0x474>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d118      	bne.n	80027b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002782:	4b74      	ldr	r3, [pc, #464]	@ (8002954 <HAL_RCC_OscConfig+0x474>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a73      	ldr	r2, [pc, #460]	@ (8002954 <HAL_RCC_OscConfig+0x474>)
 8002788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800278c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800278e:	f7ff fa0b 	bl	8001ba8 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002796:	f7ff fa07 	bl	8001ba8 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e10c      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a8:	4b6a      	ldr	r3, [pc, #424]	@ (8002954 <HAL_RCC_OscConfig+0x474>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d106      	bne.n	80027ca <HAL_RCC_OscConfig+0x2ea>
 80027bc:	4b64      	ldr	r3, [pc, #400]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c0:	4a63      	ldr	r2, [pc, #396]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027c8:	e01c      	b.n	8002804 <HAL_RCC_OscConfig+0x324>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b05      	cmp	r3, #5
 80027d0:	d10c      	bne.n	80027ec <HAL_RCC_OscConfig+0x30c>
 80027d2:	4b5f      	ldr	r3, [pc, #380]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d6:	4a5e      	ldr	r2, [pc, #376]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80027d8:	f043 0304 	orr.w	r3, r3, #4
 80027dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80027de:	4b5c      	ldr	r3, [pc, #368]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e2:	4a5b      	ldr	r2, [pc, #364]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ea:	e00b      	b.n	8002804 <HAL_RCC_OscConfig+0x324>
 80027ec:	4b58      	ldr	r3, [pc, #352]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f0:	4a57      	ldr	r2, [pc, #348]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f8:	4b55      	ldr	r3, [pc, #340]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fc:	4a54      	ldr	r2, [pc, #336]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80027fe:	f023 0304 	bic.w	r3, r3, #4
 8002802:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d015      	beq.n	8002838 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280c:	f7ff f9cc 	bl	8001ba8 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002812:	e00a      	b.n	800282a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002814:	f7ff f9c8 	bl	8001ba8 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002822:	4293      	cmp	r3, r2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e0cb      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282a:	4b49      	ldr	r3, [pc, #292]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0ee      	beq.n	8002814 <HAL_RCC_OscConfig+0x334>
 8002836:	e014      	b.n	8002862 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002838:	f7ff f9b6 	bl	8001ba8 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283e:	e00a      	b.n	8002856 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002840:	f7ff f9b2 	bl	8001ba8 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e0b5      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002856:	4b3e      	ldr	r3, [pc, #248]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1ee      	bne.n	8002840 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002862:	7dfb      	ldrb	r3, [r7, #23]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d105      	bne.n	8002874 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002868:	4b39      	ldr	r3, [pc, #228]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 800286a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286c:	4a38      	ldr	r2, [pc, #224]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 800286e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002872:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80a1 	beq.w	80029c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800287e:	4b34      	ldr	r3, [pc, #208]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	2b08      	cmp	r3, #8
 8002888:	d05c      	beq.n	8002944 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d141      	bne.n	8002916 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002892:	4b31      	ldr	r3, [pc, #196]	@ (8002958 <HAL_RCC_OscConfig+0x478>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7ff f986 	bl	8001ba8 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a0:	f7ff f982 	bl	8001ba8 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e087      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b2:	4b27      	ldr	r3, [pc, #156]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69da      	ldr	r2, [r3, #28]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	019b      	lsls	r3, r3, #6
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d4:	085b      	lsrs	r3, r3, #1
 80028d6:	3b01      	subs	r3, #1
 80028d8:	041b      	lsls	r3, r3, #16
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e0:	061b      	lsls	r3, r3, #24
 80028e2:	491b      	ldr	r1, [pc, #108]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002958 <HAL_RCC_OscConfig+0x478>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ee:	f7ff f95b 	bl	8001ba8 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f6:	f7ff f957 	bl	8001ba8 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e05c      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002908:	4b11      	ldr	r3, [pc, #68]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x416>
 8002914:	e054      	b.n	80029c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002916:	4b10      	ldr	r3, [pc, #64]	@ (8002958 <HAL_RCC_OscConfig+0x478>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7ff f944 	bl	8001ba8 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002924:	f7ff f940 	bl	8001ba8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e045      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002936:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <HAL_RCC_OscConfig+0x470>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x444>
 8002942:	e03d      	b.n	80029c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d107      	bne.n	800295c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e038      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
 8002950:	40023800 	.word	0x40023800
 8002954:	40007000 	.word	0x40007000
 8002958:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800295c:	4b1b      	ldr	r3, [pc, #108]	@ (80029cc <HAL_RCC_OscConfig+0x4ec>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d028      	beq.n	80029bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d121      	bne.n	80029bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002982:	429a      	cmp	r2, r3
 8002984:	d11a      	bne.n	80029bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800298c:	4013      	ands	r3, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002992:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002994:	4293      	cmp	r3, r2
 8002996:	d111      	bne.n	80029bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a2:	085b      	lsrs	r3, r3, #1
 80029a4:	3b01      	subs	r3, #1
 80029a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d107      	bne.n	80029bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800

080029d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0cc      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e4:	4b68      	ldr	r3, [pc, #416]	@ (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d90c      	bls.n	8002a0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b65      	ldr	r3, [pc, #404]	@ (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b63      	ldr	r3, [pc, #396]	@ (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0b8      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d020      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a24:	4b59      	ldr	r3, [pc, #356]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a58      	ldr	r2, [pc, #352]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a3c:	4b53      	ldr	r3, [pc, #332]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	4a52      	ldr	r2, [pc, #328]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a48:	4b50      	ldr	r3, [pc, #320]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	494d      	ldr	r1, [pc, #308]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d044      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d107      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6e:	4b47      	ldr	r3, [pc, #284]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d119      	bne.n	8002aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e07f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d003      	beq.n	8002a8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d107      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e06f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e067      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aae:	4b37      	ldr	r3, [pc, #220]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f023 0203 	bic.w	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4934      	ldr	r1, [pc, #208]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ac0:	f7ff f872 	bl	8001ba8 <HAL_GetTick>
 8002ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac6:	e00a      	b.n	8002ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac8:	f7ff f86e 	bl	8001ba8 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e04f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ade:	4b2b      	ldr	r3, [pc, #172]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 020c 	and.w	r2, r3, #12
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d1eb      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002af0:	4b25      	ldr	r3, [pc, #148]	@ (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d20c      	bcs.n	8002b18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	4b22      	ldr	r3, [pc, #136]	@ (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	4b20      	ldr	r3, [pc, #128]	@ (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e032      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b24:	4b19      	ldr	r3, [pc, #100]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4916      	ldr	r1, [pc, #88]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b42:	4b12      	ldr	r3, [pc, #72]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	490e      	ldr	r1, [pc, #56]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b56:	f000 f821 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	490a      	ldr	r1, [pc, #40]	@ (8002b90 <HAL_RCC_ClockConfig+0x1c0>)
 8002b68:	5ccb      	ldrb	r3, [r1, r3]
 8002b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6e:	4a09      	ldr	r2, [pc, #36]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b72:	4b09      	ldr	r3, [pc, #36]	@ (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe ffd2 	bl	8001b20 <HAL_InitTick>

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40023c00 	.word	0x40023c00
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	08003984 	.word	0x08003984
 8002b94:	20000000 	.word	0x20000000
 8002b98:	20000004 	.word	0x20000004

08002b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ba0:	b090      	sub	sp, #64	@ 0x40
 8002ba2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ba8:	2300      	movs	r3, #0
 8002baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bac:	2300      	movs	r3, #0
 8002bae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bb4:	4b59      	ldr	r3, [pc, #356]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 030c 	and.w	r3, r3, #12
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d00d      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x40>
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	f200 80a1 	bhi.w	8002d08 <HAL_RCC_GetSysClockFreq+0x16c>
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d003      	beq.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bce:	e09b      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bd0:	4b53      	ldr	r3, [pc, #332]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002bd4:	e09b      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bd6:	4b53      	ldr	r3, [pc, #332]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bda:	e098      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bdc:	4b4f      	ldr	r3, [pc, #316]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002be4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002be6:	4b4d      	ldr	r3, [pc, #308]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d028      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf2:	4b4a      	ldr	r3, [pc, #296]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	099b      	lsrs	r3, r3, #6
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	623b      	str	r3, [r7, #32]
 8002bfc:	627a      	str	r2, [r7, #36]	@ 0x24
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c04:	2100      	movs	r1, #0
 8002c06:	4b47      	ldr	r3, [pc, #284]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c08:	fb03 f201 	mul.w	r2, r3, r1
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	fb00 f303 	mul.w	r3, r0, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	4a43      	ldr	r2, [pc, #268]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c16:	fba0 1202 	umull	r1, r2, r0, r2
 8002c1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c1c:	460a      	mov	r2, r1
 8002c1e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002c20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c22:	4413      	add	r3, r2
 8002c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c28:	2200      	movs	r2, #0
 8002c2a:	61bb      	str	r3, [r7, #24]
 8002c2c:	61fa      	str	r2, [r7, #28]
 8002c2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c36:	f7fd fec7 	bl	80009c8 <__aeabi_uldivmod>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4613      	mov	r3, r2
 8002c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c42:	e053      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c44:	4b35      	ldr	r3, [pc, #212]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	099b      	lsrs	r3, r3, #6
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	617a      	str	r2, [r7, #20]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c56:	f04f 0b00 	mov.w	fp, #0
 8002c5a:	4652      	mov	r2, sl
 8002c5c:	465b      	mov	r3, fp
 8002c5e:	f04f 0000 	mov.w	r0, #0
 8002c62:	f04f 0100 	mov.w	r1, #0
 8002c66:	0159      	lsls	r1, r3, #5
 8002c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c6c:	0150      	lsls	r0, r2, #5
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	ebb2 080a 	subs.w	r8, r2, sl
 8002c76:	eb63 090b 	sbc.w	r9, r3, fp
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c8e:	ebb2 0408 	subs.w	r4, r2, r8
 8002c92:	eb63 0509 	sbc.w	r5, r3, r9
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	00eb      	lsls	r3, r5, #3
 8002ca0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ca4:	00e2      	lsls	r2, r4, #3
 8002ca6:	4614      	mov	r4, r2
 8002ca8:	461d      	mov	r5, r3
 8002caa:	eb14 030a 	adds.w	r3, r4, sl
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	eb45 030b 	adc.w	r3, r5, fp
 8002cb4:	607b      	str	r3, [r7, #4]
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	028b      	lsls	r3, r1, #10
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ccc:	4621      	mov	r1, r4
 8002cce:	028a      	lsls	r2, r1, #10
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	60fa      	str	r2, [r7, #12]
 8002cdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ce0:	f7fd fe72 	bl	80009c8 <__aeabi_uldivmod>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4613      	mov	r3, r2
 8002cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cec:	4b0b      	ldr	r3, [pc, #44]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	0c1b      	lsrs	r3, r3, #16
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002cfc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d06:	e002      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d08:	4b05      	ldr	r3, [pc, #20]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3740      	adds	r7, #64	@ 0x40
 8002d14:	46bd      	mov	sp, r7
 8002d16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	00f42400 	.word	0x00f42400
 8002d24:	017d7840 	.word	0x017d7840

08002d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d2c:	4b03      	ldr	r3, [pc, #12]	@ (8002d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	20000000 	.word	0x20000000

08002d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d44:	f7ff fff0 	bl	8002d28 <HAL_RCC_GetHCLKFreq>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	4b05      	ldr	r3, [pc, #20]	@ (8002d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	0a9b      	lsrs	r3, r3, #10
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	4903      	ldr	r1, [pc, #12]	@ (8002d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d56:	5ccb      	ldrb	r3, [r1, r3]
 8002d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40023800 	.word	0x40023800
 8002d64:	08003994 	.word	0x08003994

08002d68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e07b      	b.n	8002e72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d108      	bne.n	8002d94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d8a:	d009      	beq.n	8002da0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	61da      	str	r2, [r3, #28]
 8002d92:	e005      	b.n	8002da0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fe f888 	bl	8000ed0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e24:	ea42 0103 	orr.w	r1, r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	0c1b      	lsrs	r3, r3, #16
 8002e3e:	f003 0104 	and.w	r1, r3, #4
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	f003 0210 	and.w	r2, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69da      	ldr	r2, [r3, #28]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b088      	sub	sp, #32
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	603b      	str	r3, [r7, #0]
 8002e86:	4613      	mov	r3, r2
 8002e88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_SPI_Transmit+0x22>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e12d      	b.n	80030f8 <HAL_SPI_Transmit+0x27e>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ea4:	f7fe fe80 	bl	8001ba8 <HAL_GetTick>
 8002ea8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002eaa:	88fb      	ldrh	r3, [r7, #6]
 8002eac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d002      	beq.n	8002ec0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ebe:	e116      	b.n	80030ee <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <HAL_SPI_Transmit+0x52>
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d102      	bne.n	8002ed2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ed0:	e10d      	b.n	80030ee <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	88fa      	ldrh	r2, [r7, #6]
 8002eea:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	88fa      	ldrh	r2, [r7, #6]
 8002ef0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f18:	d10f      	bne.n	8002f3a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f44:	2b40      	cmp	r3, #64	@ 0x40
 8002f46:	d007      	beq.n	8002f58 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f60:	d14f      	bne.n	8003002 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <HAL_SPI_Transmit+0xf6>
 8002f6a:	8afb      	ldrh	r3, [r7, #22]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d142      	bne.n	8002ff6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f74:	881a      	ldrh	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f80:	1c9a      	adds	r2, r3, #2
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f94:	e02f      	b.n	8002ff6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d112      	bne.n	8002fca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa8:	881a      	ldrh	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb4:	1c9a      	adds	r2, r3, #2
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002fc8:	e015      	b.n	8002ff6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fca:	f7fe fded 	bl	8001ba8 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d803      	bhi.n	8002fe2 <HAL_SPI_Transmit+0x168>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fe0:	d102      	bne.n	8002fe8 <HAL_SPI_Transmit+0x16e>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d106      	bne.n	8002ff6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002ff4:	e07b      	b.n	80030ee <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1ca      	bne.n	8002f96 <HAL_SPI_Transmit+0x11c>
 8003000:	e050      	b.n	80030a4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_SPI_Transmit+0x196>
 800300a:	8afb      	ldrh	r3, [r7, #22]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d144      	bne.n	800309a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	330c      	adds	r3, #12
 800301a:	7812      	ldrb	r2, [r2, #0]
 800301c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003036:	e030      	b.n	800309a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b02      	cmp	r3, #2
 8003044:	d113      	bne.n	800306e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	330c      	adds	r3, #12
 8003050:	7812      	ldrb	r2, [r2, #0]
 8003052:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800306c:	e015      	b.n	800309a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800306e:	f7fe fd9b 	bl	8001ba8 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d803      	bhi.n	8003086 <HAL_SPI_Transmit+0x20c>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003084:	d102      	bne.n	800308c <HAL_SPI_Transmit+0x212>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d106      	bne.n	800309a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003098:	e029      	b.n	80030ee <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800309e:	b29b      	uxth	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1c9      	bne.n	8003038 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	6839      	ldr	r1, [r7, #0]
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 fbdf 	bl	800386c <SPI_EndRxTxTransaction>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2220      	movs	r2, #32
 80030b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10a      	bne.n	80030d8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	e003      	b.n	80030ee <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80030f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3720      	adds	r7, #32
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af02      	add	r7, sp, #8
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	4613      	mov	r3, r2
 800310e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b01      	cmp	r3, #1
 800311e:	d002      	beq.n	8003126 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003120:	2302      	movs	r3, #2
 8003122:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003124:	e0fb      	b.n	800331e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800312e:	d112      	bne.n	8003156 <HAL_SPI_Receive+0x56>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10e      	bne.n	8003156 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2204      	movs	r2, #4
 800313c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003140:	88fa      	ldrh	r2, [r7, #6]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	4613      	mov	r3, r2
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 f8ef 	bl	8003330 <HAL_SPI_TransmitReceive>
 8003152:	4603      	mov	r3, r0
 8003154:	e0e8      	b.n	8003328 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_SPI_Receive+0x64>
 8003160:	2302      	movs	r3, #2
 8003162:	e0e1      	b.n	8003328 <HAL_SPI_Receive+0x228>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800316c:	f7fe fd1c 	bl	8001ba8 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <HAL_SPI_Receive+0x7e>
 8003178:	88fb      	ldrh	r3, [r7, #6]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d102      	bne.n	8003184 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003182:	e0cc      	b.n	800331e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2204      	movs	r2, #4
 8003188:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	88fa      	ldrh	r2, [r7, #6]
 800319c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	88fa      	ldrh	r2, [r7, #6]
 80031a2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031ca:	d10f      	bne.n	80031ec <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80031ea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f6:	2b40      	cmp	r3, #64	@ 0x40
 80031f8:	d007      	beq.n	800320a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003208:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d16a      	bne.n	80032e8 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003212:	e032      	b.n	800327a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b01      	cmp	r3, #1
 8003220:	d115      	bne.n	800324e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f103 020c 	add.w	r2, r3, #12
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800322e:	7812      	ldrb	r2, [r2, #0]
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800324c:	e015      	b.n	800327a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800324e:	f7fe fcab 	bl	8001ba8 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d803      	bhi.n	8003266 <HAL_SPI_Receive+0x166>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003264:	d102      	bne.n	800326c <HAL_SPI_Receive+0x16c>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d106      	bne.n	800327a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003278:	e051      	b.n	800331e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1c7      	bne.n	8003214 <HAL_SPI_Receive+0x114>
 8003284:	e035      	b.n	80032f2 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b01      	cmp	r3, #1
 8003292:	d113      	bne.n	80032bc <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800329e:	b292      	uxth	r2, r2
 80032a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a6:	1c9a      	adds	r2, r3, #2
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032ba:	e015      	b.n	80032e8 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032bc:	f7fe fc74 	bl	8001ba8 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d803      	bhi.n	80032d4 <HAL_SPI_Receive+0x1d4>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032d2:	d102      	bne.n	80032da <HAL_SPI_Receive+0x1da>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80032e6:	e01a      	b.n	800331e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1c9      	bne.n	8003286 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	6839      	ldr	r1, [r7, #0]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 fa52 	bl	80037a0 <SPI_EndRxTransaction>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2220      	movs	r2, #32
 8003306:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	75fb      	strb	r3, [r7, #23]
 8003314:	e003      	b.n	800331e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003326:	7dfb      	ldrb	r3, [r7, #23]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08c      	sub	sp, #48	@ 0x30
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
 800333c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800333e:	2301      	movs	r3, #1
 8003340:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_SPI_TransmitReceive+0x26>
 8003352:	2302      	movs	r3, #2
 8003354:	e198      	b.n	8003688 <HAL_SPI_TransmitReceive+0x358>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800335e:	f7fe fc23 	bl	8001ba8 <HAL_GetTick>
 8003362:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800336a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003374:	887b      	ldrh	r3, [r7, #2]
 8003376:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003378:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800337c:	2b01      	cmp	r3, #1
 800337e:	d00f      	beq.n	80033a0 <HAL_SPI_TransmitReceive+0x70>
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003386:	d107      	bne.n	8003398 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d103      	bne.n	8003398 <HAL_SPI_TransmitReceive+0x68>
 8003390:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003394:	2b04      	cmp	r3, #4
 8003396:	d003      	beq.n	80033a0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003398:	2302      	movs	r3, #2
 800339a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800339e:	e16d      	b.n	800367c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d005      	beq.n	80033b2 <HAL_SPI_TransmitReceive+0x82>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <HAL_SPI_TransmitReceive+0x82>
 80033ac:	887b      	ldrh	r3, [r7, #2]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d103      	bne.n	80033ba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80033b8:	e160      	b.n	800367c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d003      	beq.n	80033ce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2205      	movs	r2, #5
 80033ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	887a      	ldrh	r2, [r7, #2]
 80033de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	887a      	ldrh	r2, [r7, #2]
 80033e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	887a      	ldrh	r2, [r7, #2]
 80033f0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	887a      	ldrh	r2, [r7, #2]
 80033f6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800340e:	2b40      	cmp	r3, #64	@ 0x40
 8003410:	d007      	beq.n	8003422 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003420:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800342a:	d17c      	bne.n	8003526 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <HAL_SPI_TransmitReceive+0x10a>
 8003434:	8b7b      	ldrh	r3, [r7, #26]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d16a      	bne.n	8003510 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	881a      	ldrh	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344a:	1c9a      	adds	r2, r3, #2
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003454:	b29b      	uxth	r3, r3
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800345e:	e057      	b.n	8003510 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b02      	cmp	r3, #2
 800346c:	d11b      	bne.n	80034a6 <HAL_SPI_TransmitReceive+0x176>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d016      	beq.n	80034a6 <HAL_SPI_TransmitReceive+0x176>
 8003478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800347a:	2b01      	cmp	r3, #1
 800347c:	d113      	bne.n	80034a6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003482:	881a      	ldrh	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348e:	1c9a      	adds	r2, r3, #2
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003498:	b29b      	uxth	r3, r3
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d119      	bne.n	80034e8 <HAL_SPI_TransmitReceive+0x1b8>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d014      	beq.n	80034e8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c8:	b292      	uxth	r2, r2
 80034ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d0:	1c9a      	adds	r2, r3, #2
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034e4:	2301      	movs	r3, #1
 80034e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034e8:	f7fe fb5e 	bl	8001ba8 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d80b      	bhi.n	8003510 <HAL_SPI_TransmitReceive+0x1e0>
 80034f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034fe:	d007      	beq.n	8003510 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800350e:	e0b5      	b.n	800367c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1a2      	bne.n	8003460 <HAL_SPI_TransmitReceive+0x130>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800351e:	b29b      	uxth	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d19d      	bne.n	8003460 <HAL_SPI_TransmitReceive+0x130>
 8003524:	e080      	b.n	8003628 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_SPI_TransmitReceive+0x204>
 800352e:	8b7b      	ldrh	r3, [r7, #26]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d16f      	bne.n	8003614 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	330c      	adds	r3, #12
 800353e:	7812      	ldrb	r2, [r2, #0]
 8003540:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003550:	b29b      	uxth	r3, r3
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800355a:	e05b      	b.n	8003614 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b02      	cmp	r3, #2
 8003568:	d11c      	bne.n	80035a4 <HAL_SPI_TransmitReceive+0x274>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d017      	beq.n	80035a4 <HAL_SPI_TransmitReceive+0x274>
 8003574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003576:	2b01      	cmp	r3, #1
 8003578:	d114      	bne.n	80035a4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	330c      	adds	r3, #12
 8003584:	7812      	ldrb	r2, [r2, #0]
 8003586:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d119      	bne.n	80035e6 <HAL_SPI_TransmitReceive+0x2b6>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d014      	beq.n	80035e6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035e2:	2301      	movs	r3, #1
 80035e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035e6:	f7fe fadf 	bl	8001ba8 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d803      	bhi.n	80035fe <HAL_SPI_TransmitReceive+0x2ce>
 80035f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035fc:	d102      	bne.n	8003604 <HAL_SPI_TransmitReceive+0x2d4>
 80035fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003600:	2b00      	cmp	r3, #0
 8003602:	d107      	bne.n	8003614 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003612:	e033      	b.n	800367c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d19e      	bne.n	800355c <HAL_SPI_TransmitReceive+0x22c>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003622:	b29b      	uxth	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d199      	bne.n	800355c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800362a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f91d 	bl	800386c <SPI_EndRxTxTransaction>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d006      	beq.n	8003646 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2220      	movs	r2, #32
 8003642:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003644:	e01a      	b.n	800367c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10a      	bne.n	8003664 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003672:	e003      	b.n	800367c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003684:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003688:	4618      	mov	r0, r3
 800368a:	3730      	adds	r7, #48	@ 0x30
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	4613      	mov	r3, r2
 800369e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036a0:	f7fe fa82 	bl	8001ba8 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	4413      	add	r3, r2
 80036ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036b0:	f7fe fa7a 	bl	8001ba8 <HAL_GetTick>
 80036b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036b6:	4b39      	ldr	r3, [pc, #228]	@ (800379c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	015b      	lsls	r3, r3, #5
 80036bc:	0d1b      	lsrs	r3, r3, #20
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	fb02 f303 	mul.w	r3, r2, r3
 80036c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036c6:	e054      	b.n	8003772 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036ce:	d050      	beq.n	8003772 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036d0:	f7fe fa6a 	bl	8001ba8 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	69fa      	ldr	r2, [r7, #28]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d902      	bls.n	80036e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d13d      	bne.n	8003762 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80036f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036fe:	d111      	bne.n	8003724 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003708:	d004      	beq.n	8003714 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003712:	d107      	bne.n	8003724 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003722:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003728:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800372c:	d10f      	bne.n	800374e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800374c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e017      	b.n	8003792 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	3b01      	subs	r3, #1
 8003770:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4013      	ands	r3, r2
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	429a      	cmp	r2, r3
 8003780:	bf0c      	ite	eq
 8003782:	2301      	moveq	r3, #1
 8003784:	2300      	movne	r3, #0
 8003786:	b2db      	uxtb	r3, r3
 8003788:	461a      	mov	r2, r3
 800378a:	79fb      	ldrb	r3, [r7, #7]
 800378c:	429a      	cmp	r2, r3
 800378e:	d19b      	bne.n	80036c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3720      	adds	r7, #32
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20000000 	.word	0x20000000

080037a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037b4:	d111      	bne.n	80037da <SPI_EndRxTransaction+0x3a>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037be:	d004      	beq.n	80037ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c8:	d107      	bne.n	80037da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037e2:	d12a      	bne.n	800383a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ec:	d012      	beq.n	8003814 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2200      	movs	r2, #0
 80037f6:	2180      	movs	r1, #128	@ 0x80
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f7ff ff49 	bl	8003690 <SPI_WaitFlagStateUntilTimeout>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d02d      	beq.n	8003860 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003808:	f043 0220 	orr.w	r2, r3, #32
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e026      	b.n	8003862 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2200      	movs	r2, #0
 800381c:	2101      	movs	r1, #1
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f7ff ff36 	bl	8003690 <SPI_WaitFlagStateUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d01a      	beq.n	8003860 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800382e:	f043 0220 	orr.w	r2, r3, #32
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e013      	b.n	8003862 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2200      	movs	r2, #0
 8003842:	2101      	movs	r1, #1
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f7ff ff23 	bl	8003690 <SPI_WaitFlagStateUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d007      	beq.n	8003860 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003854:	f043 0220 	orr.w	r2, r3, #32
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e000      	b.n	8003862 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af02      	add	r7, sp, #8
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2201      	movs	r2, #1
 8003880:	2102      	movs	r1, #2
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f7ff ff04 	bl	8003690 <SPI_WaitFlagStateUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d007      	beq.n	800389e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003892:	f043 0220 	orr.w	r2, r3, #32
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e032      	b.n	8003904 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800389e:	4b1b      	ldr	r3, [pc, #108]	@ (800390c <SPI_EndRxTxTransaction+0xa0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003910 <SPI_EndRxTxTransaction+0xa4>)
 80038a4:	fba2 2303 	umull	r2, r3, r2, r3
 80038a8:	0d5b      	lsrs	r3, r3, #21
 80038aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80038ae:	fb02 f303 	mul.w	r3, r2, r3
 80038b2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038bc:	d112      	bne.n	80038e4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2200      	movs	r2, #0
 80038c6:	2180      	movs	r1, #128	@ 0x80
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f7ff fee1 	bl	8003690 <SPI_WaitFlagStateUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d016      	beq.n	8003902 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d8:	f043 0220 	orr.w	r2, r3, #32
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e00f      	b.n	8003904 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038fa:	2b80      	cmp	r3, #128	@ 0x80
 80038fc:	d0f2      	beq.n	80038e4 <SPI_EndRxTxTransaction+0x78>
 80038fe:	e000      	b.n	8003902 <SPI_EndRxTxTransaction+0x96>
        break;
 8003900:	bf00      	nop
  }

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20000000 	.word	0x20000000
 8003910:	165e9f81 	.word	0x165e9f81

08003914 <memset>:
 8003914:	4402      	add	r2, r0
 8003916:	4603      	mov	r3, r0
 8003918:	4293      	cmp	r3, r2
 800391a:	d100      	bne.n	800391e <memset+0xa>
 800391c:	4770      	bx	lr
 800391e:	f803 1b01 	strb.w	r1, [r3], #1
 8003922:	e7f9      	b.n	8003918 <memset+0x4>

08003924 <__libc_init_array>:
 8003924:	b570      	push	{r4, r5, r6, lr}
 8003926:	4d0d      	ldr	r5, [pc, #52]	@ (800395c <__libc_init_array+0x38>)
 8003928:	4c0d      	ldr	r4, [pc, #52]	@ (8003960 <__libc_init_array+0x3c>)
 800392a:	1b64      	subs	r4, r4, r5
 800392c:	10a4      	asrs	r4, r4, #2
 800392e:	2600      	movs	r6, #0
 8003930:	42a6      	cmp	r6, r4
 8003932:	d109      	bne.n	8003948 <__libc_init_array+0x24>
 8003934:	4d0b      	ldr	r5, [pc, #44]	@ (8003964 <__libc_init_array+0x40>)
 8003936:	4c0c      	ldr	r4, [pc, #48]	@ (8003968 <__libc_init_array+0x44>)
 8003938:	f000 f818 	bl	800396c <_init>
 800393c:	1b64      	subs	r4, r4, r5
 800393e:	10a4      	asrs	r4, r4, #2
 8003940:	2600      	movs	r6, #0
 8003942:	42a6      	cmp	r6, r4
 8003944:	d105      	bne.n	8003952 <__libc_init_array+0x2e>
 8003946:	bd70      	pop	{r4, r5, r6, pc}
 8003948:	f855 3b04 	ldr.w	r3, [r5], #4
 800394c:	4798      	blx	r3
 800394e:	3601      	adds	r6, #1
 8003950:	e7ee      	b.n	8003930 <__libc_init_array+0xc>
 8003952:	f855 3b04 	ldr.w	r3, [r5], #4
 8003956:	4798      	blx	r3
 8003958:	3601      	adds	r6, #1
 800395a:	e7f2      	b.n	8003942 <__libc_init_array+0x1e>
 800395c:	080039a4 	.word	0x080039a4
 8003960:	080039a4 	.word	0x080039a4
 8003964:	080039a4 	.word	0x080039a4
 8003968:	080039a8 	.word	0x080039a8

0800396c <_init>:
 800396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396e:	bf00      	nop
 8003970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003972:	bc08      	pop	{r3}
 8003974:	469e      	mov	lr, r3
 8003976:	4770      	bx	lr

08003978 <_fini>:
 8003978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397a:	bf00      	nop
 800397c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397e:	bc08      	pop	{r3}
 8003980:	469e      	mov	lr, r3
 8003982:	4770      	bx	lr
