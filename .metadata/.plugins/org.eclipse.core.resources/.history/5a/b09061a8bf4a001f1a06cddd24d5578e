
/* Includes -------------------------------------------------*/
#include "API_debounce.h"

/* Private variables ---------------------------------------*/
// Enum privado
typedef enum{

BUTTON_UP,  // Estado: inicial (no presionado)
BUTTON_FALLING,  // Estado: siendo presionado
BUTTON_DOWN, // Estado: totalmente presionado
BUTTON_RAISING, // Estado: se suelta el bot√≥n

} debounceState_t;

// Variable global privado
static bool_t button_pressed;

// Variable global privada (con static)
static debounceState_t currentState;

/* Private function prototypes --------------------------*/
void debounceFSM_init(void){

	currentState = BUTTON_UP;
	button_pressed = false;

}


bool_t debounceFSM_isButtonDown() {

	return (currentState == BUTTON_DOWN);

}



void writeKey() {

	button_pressed = true;

}

bool_t debounceFSM_readKey() {

	if (button_pressed) {

		button_pressed = false;

		return true;

	}

	return button_pressed;

}

  void debounceFSM_update(void) {

  	  switch(currentState) {

  	  case BUTTON_UP:

  		currentState = BUTTON_FALLING;
  		  break;

  	  case BUTTON_FALLING:

  		  if (readKey()) {

  			currentState = BUTTON_DOWN;

  		  } else {

  			currentState = BUTTON_UP;

  		  }

  		  break;

  	  case BUTTON_RAISING:

  		  if (!readKey()) {

  			currentState = BUTTON_UP;

  		  } else {

  			currentState = BUTTON_DOWN;

  		  }

  		  break;

  	  case BUTTON_DOWN:

  		currentState = BUTTON_RAISING;

  		  break;

  	  default:

  		  debounceFSM_init();

  		  break;

  	  }

    }




