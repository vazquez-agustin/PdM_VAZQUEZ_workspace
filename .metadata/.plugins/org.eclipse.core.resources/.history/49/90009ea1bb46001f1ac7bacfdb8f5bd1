/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "gpio.h"

/* Private define ------------------------------------------------------------*/
#define TIMEoN 200;
#define TIMEoFF 200;

/* Private variables ---------------------------------------------------------*/
uint16_t led_pins_seq1[] = {LED1, LED2, LED3};
uint16_t led_pins_seq2[] = {LED3, LED2, LED1};

uint8_t num_leds = sizeof(led_pins_seq1) / sizeof(led_pins_seq1[0]);

uint8_t current_led = 0; // Índice del LED actual
uint8_t sequence = 0; // Secuencia actual: 0 - Secuencia alterna: 1

/* Function Prototypes -------------------------------------------------------*/

void blinkSequence (Led_TypeDef led, uint32_t timeOn, uint32_t timeOff);


void SystemClock_Config(void);

uint8_t ReadButton(void);

/* Main Program --------------------------------------------------------------*/
int main(void) {

  HAL_Init();
  SystemClock_Config();

  /* Initialize BSP Led for LED1, 2 & 3 as well as the user button*/
  void peripheralsInit();

  while (1)
  {



  }

	  /*
    if (ReadButton())
    {
      sequence = !sequence; // Alternar secuencia
      HAL_Delay(200); // Debounce delay
    }

    uint16_t *current_sequence;

    if (sequence == 0) {

    	current_sequence = led_pins_seq1;

	} else {

		current_sequence = led_pins_seq2;

	}

    HAL_GPIO_WritePin(LED_PORT, current_sequence[current_led], GPIO_PIN_SET);
    HAL_Delay(200);
    HAL_GPIO_WritePin(LED_PORT, current_sequence[current_led], GPIO_PIN_RESET);
    HAL_Delay(200);

    current_led = (current_led + 1) % num_leds; // Mover al siguiente LED
  }

  */


void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

// Funciones para simplificar el código en MAIN
void peripheralsInit() {

	/* Initialize BSP Led for LED2 */
	BSP_LED_Init(LED1);
	BSP_LED_Init(LED2);
	BSP_LED_Init(LED3);

	/* Initialize BSP PB for BUTTON_USER */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);

}

void blinkSequence(Led_TypeDef led, uint32_t timeOn, uint32_t timeOff) {

	BSP_LED_Init(led);
	HAL_Delay(timeOn);
	BSP_LED_Off(led);
	HAL_Delay(timeOff);

}

void changeSequence(void) {

	if (BSP_PB_GetState(BUTTON_USER)) {

	}

		return led_pins_seq1;

	} else {

		return led_pins_seq2;

	}

}

void Error_Handler(void)
{

  __disable_irq();
  while (1)
  {
  }
}
